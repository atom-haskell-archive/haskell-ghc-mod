"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(state) {
    process = new ghc_mod_1.GhcModiProcess();
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess()
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return;
    }
    tempDisposables && tempDisposables.dispose();
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    const upiConsumerDisp = new atom_1.Disposable(() => upiConsumer.destroy());
    disposables.add(upiConsumerDisp);
    return upiConsumerDisp;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BLHVDQUF3QztBQUN4QywrQkFBb0Q7QUFDcEQsNkRBQXNEO0FBQ3RELGlEQUEwQztBQUMxQyxpQ0FBMEM7QUFFMUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUVwRCxtQ0FBK0I7QUFBdkIsMEJBQUEsTUFBTSxDQUFBO0FBRWQsa0JBQTBCLEtBQVk7SUFDcEMsT0FBTyxHQUFHLElBQUksd0JBQWMsRUFBRSxDQUFBO0lBQzlCLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDdkMsZUFBZSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhDLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsMEJBQW1CLENBQUMsRUFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQWM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFBO0lBQzVELENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLGtDQUFrQyxFQUFFLE1BQU0sT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7S0FDM0UsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBbEJELDRCQWtCQztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ25CLGlCQUFpQixHQUFHLFNBQVMsQ0FBQTtJQUM3QixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7QUFDekIsQ0FBQztBQU5ELGdDQU1DO0FBRUQ7SUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQUMsaUJBQWlCLEdBQUcsSUFBSSxzQ0FBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUFDLENBQUM7SUFDL0UsTUFBTSxDQUFDLGlCQUFpQixDQUFBO0FBQzFCLENBQUM7QUFKRCw0REFJQztBQUVELG9CQUE0QixPQUE2QjtJQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3hDLGVBQWUsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUMsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyRCxNQUFNLGVBQWUsR0FDbkIsSUFBSSxpQkFBVSxDQUFDLE1BQU0sV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDN0MsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNoQyxNQUFNLENBQUMsZUFBZSxDQUFBO0FBQ3hCLENBQUM7QUFSRCxnQ0FRQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBkZWNhZmZlaW5hdGUgc3VnZ2VzdGlvbnM6XG4gKiBEUzEwMjogUmVtb3ZlIHVubmVjZXNzYXJ5IGNvZGUgY3JlYXRlZCBiZWNhdXNlIG9mIGltcGxpY2l0IHJldHVybnNcbiAqIERTMTAzOiBSZXdyaXRlIGNvZGUgdG8gbm8gbG9uZ2VyIHVzZSBfX2d1YXJkX19cbiAqIERTMjA3OiBDb25zaWRlciBzaG9ydGVyIHZhcmlhdGlvbnMgb2YgbnVsbCBjaGVja3NcbiAqIEZ1bGwgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL2RlY2FmZmVpbmF0ZS9kZWNhZmZlaW5hdGUvYmxvYi9tYXN0ZXIvZG9jcy9zdWdnZXN0aW9ucy5tZFxuICovXG5pbXBvcnQge0doY01vZGlQcm9jZXNzfSBmcm9tICcuL2doYy1tb2QnXG5pbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGV9IGZyb20gJ2F0b20nXG5pbXBvcnQge0NvbXBsZXRpb25CYWNrZW5kfSBmcm9tICcuL2NvbXBsZXRpb24tYmFja2VuZCdcbmltcG9ydCB7VVBJQ29uc3VtZXJ9IGZyb20gJy4vdXBpLWNvbnN1bWVyJ1xuaW1wb3J0IHtkZWZhdWx0RXJyb3JIYW5kbGVyfSBmcm9tICcuL3V0aWwnXG5cbmxldCBwcm9jZXNzOiBHaGNNb2RpUHJvY2VzcyB8IHVuZGVmaW5lZFxubGV0IGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlIHwgdW5kZWZpbmVkXG5sZXQgdGVtcERpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlIHwgdW5kZWZpbmVkXG5sZXQgY29tcGxldGlvbkJhY2tlbmQ6IENvbXBsZXRpb25CYWNrZW5kIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCB7Y29uZmlnfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlIChzdGF0ZTogbmV2ZXIpIHtcbiAgcHJvY2VzcyA9IG5ldyBHaGNNb2RpUHJvY2VzcygpXG4gIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICB0ZW1wRGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIGRpc3Bvc2FibGVzLmFkZCh0ZW1wRGlzcG9zYWJsZXMpXG5cbiAgdGVtcERpc3Bvc2FibGVzLmFkZChcbiAgICBwcm9jZXNzLm9uRXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlciksXG4gICAgcHJvY2Vzcy5vbldhcm5pbmcoKGRldGFpbDogc3RyaW5nKSA9PiB7XG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZygnZ2hjLW1vZCB3YXJuaW5nJywge2RldGFpbH0pXG4gICAgfSksXG4gIClcblxuICBkaXNwb3NhYmxlcy5hZGQoXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgJ2hhc2tlbGwtZ2hjLW1vZDpzaHV0ZG93bi1iYWNrZW5kJzogKCkgPT4gcHJvY2VzcyAmJiBwcm9jZXNzLmtpbGxQcm9jZXNzKClcbiAgICB9KVxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlICgpIHtcbiAgcHJvY2VzcyAmJiBwcm9jZXNzLmRlc3Ryb3koKVxuICBwcm9jZXNzID0gdW5kZWZpbmVkXG4gIGNvbXBsZXRpb25CYWNrZW5kID0gdW5kZWZpbmVkXG4gIGRpc3Bvc2FibGVzICYmIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICBkaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUNvbXBsZXRpb25CYWNrZW5kICgpIHtcbiAgaWYgKCEgcHJvY2VzcykgeyByZXR1cm4gfVxuICBpZiAoISBjb21wbGV0aW9uQmFja2VuZCkgeyBjb21wbGV0aW9uQmFja2VuZCA9IG5ldyBDb21wbGV0aW9uQmFja2VuZChwcm9jZXNzKSB9XG4gIHJldHVybiBjb21wbGV0aW9uQmFja2VuZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZVVQSSAoc2VydmljZTogVVBJLklVUElSZWdpc3RyYXRpb24pIHtcbiAgaWYgKCFwcm9jZXNzIHx8ICFkaXNwb3NhYmxlcykgeyByZXR1cm4gfVxuICB0ZW1wRGlzcG9zYWJsZXMgJiYgdGVtcERpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICBjb25zdCB1cGlDb25zdW1lciA9IG5ldyBVUElDb25zdW1lcihzZXJ2aWNlLCBwcm9jZXNzKVxuICBjb25zdCB1cGlDb25zdW1lckRpc3AgPVxuICAgIG5ldyBEaXNwb3NhYmxlKCgpID0+IHVwaUNvbnN1bWVyLmRlc3Ryb3koKSlcbiAgZGlzcG9zYWJsZXMuYWRkKHVwaUNvbnN1bWVyRGlzcClcbiAgcmV0dXJuIHVwaUNvbnN1bWVyRGlzcFxufVxuIl19
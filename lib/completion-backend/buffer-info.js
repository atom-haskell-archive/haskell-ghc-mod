"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const atom_haskell_utils_1 = require("atom-haskell-utils");
class BufferInfo {
    constructor(buffer) {
        this.buffer = buffer;
        this.oldText = '';
        this.oldImports = { name: 'Main', imports: [] };
        this.destroy = () => {
            this.disposables.dispose();
        };
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(this.buffer.onDidDestroy(this.destroy));
    }
    async getImports() {
        const parsed = await this.parse();
        const imports = parsed ? parsed.imports : [];
        if (!imports.some(({ name }) => name === 'Prelude')) {
            imports.push({
                qualified: false,
                hiding: false,
                name: 'Prelude',
                importList: null,
                alias: null,
            });
        }
        return imports;
    }
    async getModuleName() {
        const parsed = await this.parse();
        return parsed.name;
    }
    async parse() {
        const newText = this.buffer.getText();
        if (this.oldText === newText) {
            return this.oldImports;
        }
        else {
            this.oldText = newText;
            this.oldImports = await atom_haskell_utils_1.parseHsModuleImports(this.buffer.getText());
            return this.oldImports;
        }
    }
}
exports.BufferInfo = BufferInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVmZmVyLWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcGxldGlvbi1iYWNrZW5kL2J1ZmZlci1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXNEO0FBQ3RELDJEQUFrRjtBQUlsRjtJQUtFLFlBQTRCLE1BQWtCO1FBQWxCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFIdEMsWUFBTyxHQUFXLEVBQUUsQ0FBQTtRQUNwQixlQUFVLEdBQW1CLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUE7UUFPM0QsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzVCLENBQUMsQ0FBQTtRQU5DLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQzlELENBQUM7SUFNTSxLQUFLLENBQUMsVUFBVTtRQUNyQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUU1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLE1BQU0sRUFBRSxLQUFLO2dCQUNiLElBQUksRUFBRSxTQUFTO2dCQUNmLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixLQUFLLEVBQUUsSUFBSTthQUNaLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFBO0lBQ2hCLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYTtRQUN4QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQTtJQUNwQixDQUFDO0lBRU8sS0FBSyxDQUFDLEtBQUs7UUFDakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7WUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLHlDQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtZQUNuRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQTtRQUN4QixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBOUNELGdDQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIFRleHRCdWZmZXIgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgcGFyc2VIc01vZHVsZUltcG9ydHMsIElNb2R1bGVJbXBvcnRzLCBJSW1wb3J0IH0gZnJvbSAnYXRvbS1oYXNrZWxsLXV0aWxzJ1xuXG5leHBvcnQgeyBJSW1wb3J0IH1cblxuZXhwb3J0IGNsYXNzIEJ1ZmZlckluZm8ge1xuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgb2xkVGV4dDogc3RyaW5nID0gJydcbiAgcHJpdmF0ZSBvbGRJbXBvcnRzOiBJTW9kdWxlSW1wb3J0cyA9IHsgbmFtZTogJ01haW4nLCBpbXBvcnRzOiBbXSB9XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5idWZmZXIub25EaWREZXN0cm95KHRoaXMuZGVzdHJveSkpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSA9ICgpID0+IHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEltcG9ydHMoKTogUHJvbWlzZTxJSW1wb3J0W10+IHtcbiAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCB0aGlzLnBhcnNlKClcbiAgICBjb25zdCBpbXBvcnRzID0gcGFyc2VkID8gcGFyc2VkLmltcG9ydHMgOiBbXVxuICAgIC8vIHRzbGludDpkaXNhYmxlOiBuby1udWxsLWtleXdvcmRcbiAgICBpZiAoIWltcG9ydHMuc29tZSgoeyBuYW1lIH0pID0+IG5hbWUgPT09ICdQcmVsdWRlJykpIHtcbiAgICAgIGltcG9ydHMucHVzaCh7XG4gICAgICAgIHF1YWxpZmllZDogZmFsc2UsXG4gICAgICAgIGhpZGluZzogZmFsc2UsXG4gICAgICAgIG5hbWU6ICdQcmVsdWRlJyxcbiAgICAgICAgaW1wb3J0TGlzdDogbnVsbCxcbiAgICAgICAgYWxpYXM6IG51bGwsXG4gICAgICB9KVxuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZW5hYmxlOiBuby1udWxsLWtleXdvcmRcbiAgICByZXR1cm4gaW1wb3J0c1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldE1vZHVsZU5hbWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCB0aGlzLnBhcnNlKClcbiAgICByZXR1cm4gcGFyc2VkLm5hbWVcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcGFyc2UoKTogUHJvbWlzZTxJTW9kdWxlSW1wb3J0cz4ge1xuICAgIGNvbnN0IG5ld1RleHQgPSB0aGlzLmJ1ZmZlci5nZXRUZXh0KClcbiAgICBpZiAodGhpcy5vbGRUZXh0ID09PSBuZXdUZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5vbGRJbXBvcnRzXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2xkVGV4dCA9IG5ld1RleHRcbiAgICAgIHRoaXMub2xkSW1wb3J0cyA9IGF3YWl0IHBhcnNlSHNNb2R1bGVJbXBvcnRzKHRoaXMuYnVmZmVyLmdldFRleHQoKSlcbiAgICAgIHJldHVybiB0aGlzLm9sZEltcG9ydHNcbiAgICB9XG4gIH1cbn1cbiJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const CP = require("child_process");
const os_1 = require("os");
const Util = require("../util");
async function buildStack(opts, upi) {
    const messages = [];
    const disp = new atom_1.CompositeDisposable();
    try {
        return await new Promise((resolve, reject) => {
            const proc = CP.spawn('stack', ['--copy-compiler-tool', 'build', 'ghc-mod'], opts);
            const buffered = () => {
                let buffer = '';
                return (data) => {
                    const output = data.toString('utf8');
                    const [first, ...tail] = output.split(os_1.EOL);
                    buffer += first;
                    if (tail.length > 0) {
                        const lines = [buffer, ...(tail.slice(0, -1))];
                        buffer = tail.slice(-1)[0];
                        messages.push(...lines.map(message => ({ message, severity: 'build' })));
                        if (upi) {
                            upi.setMessages(messages);
                        }
                        else {
                            atom.notifications.addInfo(lines.join('\n'));
                        }
                    }
                };
            };
            proc.stdout.on('data', buffered());
            proc.stderr.on('data', buffered());
            if (upi) {
                disp.add(upi.addPanelControl({
                    element: 'ide-haskell-button',
                    opts: {
                        classes: ['cancel'],
                        events: {
                            click: () => {
                                proc.kill('SIGTERM');
                                proc.kill('SIGKILL');
                            },
                        },
                    },
                }));
            }
            proc.once('exit', (code, signal) => {
                if (code === 0) {
                    resolve(true);
                }
                else {
                    reject(new Error(`Stack build exited with nonzero exit status ${code} due to ${signal}`));
                    Util.warn(messages.map(m => m.message).join('\n'));
                }
            });
        });
    }
    catch (e) {
        Util.warn(e);
        atom.notifications.addError(e.toString(), {
            dismissable: true,
            detail: messages.map(m => m.message).join('\n'),
        });
        return false;
    }
    finally {
        upi && upi.setMessages([]);
        disp.dispose();
    }
}
exports.buildStack = buildStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2hjLW1vZC9idWlsZC1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUEwQztBQUUxQyxvQ0FBbUM7QUFDbkMsMkJBQXdCO0FBQ3hCLGdDQUErQjtBQUd4QixLQUFLLHFCQUFxQixJQUFnQixFQUFFLEdBQTZCO0lBQzlFLE1BQU0sUUFBUSxHQUFrQixFQUFFLENBQUE7SUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0lBQ3RDLElBQUksQ0FBQztRQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3BELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ2xGLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtnQkFDcEIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO2dCQUNmLE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO29CQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO29CQUNwQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFHLENBQUMsQ0FBQTtvQkFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQTtvQkFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3BCLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENB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NERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBJVVBJSW5zdGFuY2UsIElSZXN1bHRJdGVtIH0gZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCAqIGFzIENQIGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcydcbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi4vdXRpbCdcbmltcG9ydCB7IFJ1bk9wdGlvbnMgfSBmcm9tICcuL2doYy1tb2RpLXByb2Nlc3MtcmVhbCdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkU3RhY2sob3B0czogUnVuT3B0aW9ucywgdXBpOiBJVVBJSW5zdGFuY2UgfCB1bmRlZmluZWQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3QgbWVzc2FnZXM6IElSZXN1bHRJdGVtW10gPSBbXVxuICBjb25zdCBkaXNwID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTxib29sZWFuPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBwcm9jID0gQ1Auc3Bhd24oJ3N0YWNrJywgWyctLWNvcHktY29tcGlsZXItdG9vbCcsICdidWlsZCcsICdnaGMtbW9kJ10sIG9wdHMpXG4gICAgICBjb25zdCBidWZmZXJlZCA9ICgpID0+IHtcbiAgICAgICAgbGV0IGJ1ZmZlciA9ICcnXG4gICAgICAgIHJldHVybiAoZGF0YTogQnVmZmVyKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3V0cHV0ID0gZGF0YS50b1N0cmluZygndXRmOCcpXG4gICAgICAgICAgY29uc3QgW2ZpcnN0LCAuLi50YWlsXSA9IG91dHB1dC5zcGxpdChFT0wpXG4gICAgICAgICAgYnVmZmVyICs9IGZpcnN0XG4gICAgICAgICAgaWYgKHRhaWwubGVuZ3RoID4gMCkgeyAvLyBpdCBtZWFucyB0aGVyZSdzIGF0IGxlYXN0IG9uZSBuZXdsaW5lXG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IFtidWZmZXIsIC4uLih0YWlsLnNsaWNlKDAsIC0xKSldXG4gICAgICAgICAgICBidWZmZXIgPSB0YWlsLnNsaWNlKC0xKVswXVxuICAgICAgICAgICAgbWVzc2FnZXMucHVzaCguLi5saW5lcy5tYXAobWVzc2FnZSA9PiAoeyBtZXNzYWdlLCBzZXZlcml0eTogJ2J1aWxkJyB9KSkpXG4gICAgICAgICAgICBpZiAodXBpKSB7XG4gICAgICAgICAgICAgIHVwaS5zZXRNZXNzYWdlcyhtZXNzYWdlcylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRJbmZvKGxpbmVzLmpvaW4oJ1xcbicpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCBidWZmZXJlZCgpKVxuICAgICAgcHJvYy5zdGRlcnIub24oJ2RhdGEnLCBidWZmZXJlZCgpKVxuICAgICAgaWYgKHVwaSkge1xuICAgICAgICBkaXNwLmFkZCh1cGkuYWRkUGFuZWxDb250cm9sKHtcbiAgICAgICAgICBlbGVtZW50OiAnaWRlLWhhc2tlbGwtYnV0dG9uJyxcbiAgICAgICAgICBvcHRzOiB7XG4gICAgICAgICAgICBjbGFzc2VzOiBbJ2NhbmNlbCddLFxuICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvYy5raWxsKCdTSUdURVJNJylcbiAgICAgICAgICAgICAgICBwcm9jLmtpbGwoJ1NJR0tJTEwnKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICAgIHByb2Mub25jZSgnZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKHRydWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU3RhY2sgYnVpbGQgZXhpdGVkIHdpdGggbm9uemVybyBleGl0IHN0YXR1cyAke2NvZGV9IGR1ZSB0byAke3NpZ25hbH1gKSlcbiAgICAgICAgICBVdGlsLndhcm4obWVzc2FnZXMubWFwKG0gPT4gbS5tZXNzYWdlKS5qb2luKCdcXG4nKSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgVXRpbC53YXJuKGUpXG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKGUudG9TdHJpbmcoKSwge1xuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICBkZXRhaWw6IG1lc3NhZ2VzLm1hcChtID0+IG0ubWVzc2FnZSkuam9pbignXFxuJyksXG4gICAgfSlcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBmaW5hbGx5IHtcbiAgICB1cGkgJiYgdXBpLnNldE1lc3NhZ2VzKFtdKVxuICAgIGRpc3AuZGlzcG9zZSgpXG4gIH1cbn1cbiJdfQ==
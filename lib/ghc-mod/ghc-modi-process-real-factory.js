"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Util = require("../util");
const ghc_modi_process_real_1 = require("./ghc-modi-process-real");
async function createGhcModiProcessReal(rootDir) {
    let opts;
    let vers;
    let caps;
    try {
        opts = await Util.getProcessOptions(rootDir.getPath());
        const versP = getVersion(opts);
        const bopts = opts;
        checkComp(bopts, versP).catch((e) => {
            atom.notifications.addError('Failed to check compiler versions', {
                detail: e.toString(),
                stack: e.stack,
                dismissable: true,
            });
        });
        vers = await versP;
        caps = getCaps(vers);
        return new ghc_modi_process_real_1.GhcModiProcessReal(caps, rootDir, opts);
    }
    catch (e) {
        const err = e;
        Util.notifySpawnFail({ dir: rootDir.getPath(), err, opts, vers, caps });
        throw e;
    }
}
exports.createGhcModiProcessReal = createGhcModiProcessReal;
function getCaps({ vers }) {
    const caps = {
        version: vers,
        fileMap: false,
        quoteArgs: false,
        optparse: false,
        typeConstraints: false,
        browseParents: false,
        interactiveCaseSplit: false,
        importedFrom: false,
        browseMain: false,
    };
    const atLeast = (b) => {
        for (let i = 0; i < b.length; i++) {
            const v = b[i];
            if (vers[i] > v) {
                return true;
            }
            else if (vers[i] < v) {
                return false;
            }
        }
        return true;
    };
    const exact = (b) => {
        for (let i = 0; i < b.length; i++) {
            const v = b[i];
            if (vers[i] !== v) {
                return false;
            }
        }
        return true;
    };
    if (!atLeast([5, 4])) {
        atom.notifications.addError(`\
Haskell-ghc-mod: ghc-mod < 5.4 is not supported. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (exact([5, 4])) {
        atom.notifications.addWarning(`\
Haskell-ghc-mod: ghc-mod 5.4.* is deprecated. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (atLeast([5, 4])) {
        caps.fileMap = true;
    }
    if (atLeast([5, 5])) {
        caps.quoteArgs = true;
        caps.optparse = true;
    }
    if (atLeast([5, 6])) {
        caps.typeConstraints = true;
        caps.browseParents = true;
        caps.interactiveCaseSplit = true;
    }
    if (atom.config.get('haskell-ghc-mod.experimental')) {
        caps.importedFrom = true;
    }
    Util.debug(JSON.stringify(caps));
    return caps;
}
async function getVersion(opts) {
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const cmd = atom.config.get('haskell-ghc-mod.ghcModPath');
    const { stdout } = await Util.execPromise(cmd, ['version'], Object.assign({ timeout }, opts));
    const versRaw = /^ghc-mod version (\d+)\.(\d+)\.(\d+)(?:\.(\d+))?/.exec(stdout);
    if (!versRaw) {
        throw new Error("Couldn't get ghc-mod version");
    }
    const vers = versRaw.slice(1, 5).map((i) => parseInt(i, 10));
    const compRaw = /GHC (.+)$/.exec(stdout.trim());
    if (!compRaw) {
        throw new Error("Couldn't get ghc version");
    }
    const comp = compRaw[1];
    Util.debug(`Ghc-mod ${vers} built with ${comp}`);
    return { vers, comp };
}
async function checkComp(opts, versP) {
    const { comp } = await versP;
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const tryWarn = async (cmd, args) => {
        try {
            return (await Util.execPromise(cmd, args, Object.assign({ timeout }, opts))).stdout.trim();
        }
        catch (error) {
            Util.warn(error);
            return undefined;
        }
    };
    const [stackghc, pathghc] = await Promise.all([
        tryWarn('stack', ['ghc', '--', '--numeric-version']),
        tryWarn('ghc', ['--numeric-version']),
    ]);
    Util.debug(`Stack GHC version ${stackghc}`);
    Util.debug(`Path GHC version ${pathghc}`);
    if (stackghc && (stackghc !== comp)) {
        const warn = `\
GHC version in your Stack '${stackghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Stack projects`;
        atom.notifications.addWarning(warn);
        Util.warn(warn);
    }
    if (pathghc && (pathghc !== comp)) {
        const warn = `\
GHC version in your PATH '${pathghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Cabal or Plain projects`;
        atom.notifications.addWarning(warn);
        Util.warn(warn);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjLW1vZGktcHJvY2Vzcy1yZWFsLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2hjLW1vZC9naGMtbW9kaS1wcm9jZXNzLXJlYWwtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdDQUErQjtBQUMvQixtRUFBd0U7QUFLakUsS0FBSyxtQ0FBbUMsT0FBa0I7SUFDL0QsSUFBSSxJQUE0QixDQUFBO0lBQ2hDLElBQUksSUFBNEIsQ0FBQTtJQUNoQyxJQUFJLElBQTRCLENBQUE7SUFDaEMsSUFBSSxDQUFDO1FBQ0gsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQ3RELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDbEIsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFRLEVBQUUsRUFBRTtZQUN6QyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRTtnQkFDL0QsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3BCLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSztnQkFDZCxXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQTtRQUNsQixJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLDBDQUFrQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDcEQsQ0FBQztJQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFWCxNQUFNLEdBQUcsR0FBd0IsQ0FB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QUMsQ0FBQTtZQUNoQixNQUFNLENBQUMsU0FBUyxDQUFBO1FBQ2xCLENBQUM7SUFDSCxDQUFDLENBQUE7SUFDRCxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUM1QyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQ3RDLENBQUMsQ0FBQTtJQUNGLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDM0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUN6QyxFQUFFLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxHQUFHOzZCQUNZLFFBQVE7cUNBQ0EsSUFBSTttQ0FDTixDQUFBO1FBQy9CLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDakIsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxJQUFJLEdBQUc7NEJBQ1csT0FBTztxQ0FDRSxJQUFJOzRDQUNHLENBQUE7UUFDeEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNqQixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdIQ01vZENhcHMgfSBmcm9tICcuL2ludGVyYWN0aXZlLXByb2Nlc3MnXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBHaGNNb2RpUHJvY2Vzc1JlYWwsIFJ1bk9wdGlvbnMgfSBmcm9tICcuL2doYy1tb2RpLXByb2Nlc3MtcmVhbCdcbmltcG9ydCB7IERpcmVjdG9yeSB9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCB0eXBlIEdIQ01vZFZlcnMgPSB7IHZlcnM6IG51bWJlcltdLCBjb21wOiBzdHJpbmcgfVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlR2hjTW9kaVByb2Nlc3NSZWFsKHJvb3REaXI6IERpcmVjdG9yeSk6IFByb21pc2U8R2hjTW9kaVByb2Nlc3NSZWFsPiB7XG4gIGxldCBvcHRzOiBSdW5PcHRpb25zIHwgdW5kZWZpbmVkXG4gIGxldCB2ZXJzOiBHSENNb2RWZXJzIHwgdW5kZWZpbmVkXG4gIGxldCBjYXBzOiBHSENNb2RDYXBzIHwgdW5kZWZpbmVkXG4gIHRyeSB7XG4gICAgb3B0cyA9IGF3YWl0IFV0aWwuZ2V0UHJvY2Vzc09wdGlvbnMocm9vdERpci5nZXRQYXRoKCkpXG4gICAgY29uc3QgdmVyc1AgPSBnZXRWZXJzaW9uKG9wdHMpXG4gICAgY29uc3QgYm9wdHMgPSBvcHRzXG4gICAgY2hlY2tDb21wKGJvcHRzLCB2ZXJzUCkuY2F0Y2goKGU6IEVycm9yKSA9PiB7XG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoJ0ZhaWxlZCB0byBjaGVjayBjb21waWxlciB2ZXJzaW9ucycsIHtcbiAgICAgICAgZGV0YWlsOiBlLnRvU3RyaW5nKCksXG4gICAgICAgIHN0YWNrOiBlLnN0YWNrLFxuICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfSlcbiAgICB2ZXJzID0gYXdhaXQgdmVyc1BcbiAgICBjYXBzID0gZ2V0Q2Fwcyh2ZXJzKVxuICAgIHJldHVybiBuZXcgR2hjTW9kaVByb2Nlc3NSZWFsKGNhcHMsIHJvb3REaXIsIG9wdHMpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuICAgIGNvbnN0IGVycjogRXJyb3IgJiB7Y29kZTogYW55fSA9IGVcbiAgICBVdGlsLm5vdGlmeVNwYXduRmFpbCh7IGRpcjogcm9vdERpci5nZXRQYXRoKCksIGVyciwgb3B0cywgdmVycywgY2FwcyB9KVxuICAgIHRocm93IGVcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDYXBzKHsgdmVycyB9OiB7IHZlcnM6IG51bWJlcltdIH0pOiBHSENNb2RDYXBzIHtcbiAgY29uc3QgY2FwczogR0hDTW9kQ2FwcyA9IHtcbiAgICB2ZXJzaW9uOiB2ZXJzLFxuICAgIGZpbGVNYXA6IGZhbHNlLFxuICAgIHF1b3RlQXJnczogZmFsc2UsXG4gICAgb3B0cGFyc2U6IGZhbHNlLFxuICAgIHR5cGVDb25zdHJhaW50czogZmFsc2UsXG4gICAgYnJvd3NlUGFyZW50czogZmFsc2UsXG4gICAgaW50ZXJhY3RpdmVDYXNlU3BsaXQ6IGZhbHNlLFxuICAgIGltcG9ydGVkRnJvbTogZmFsc2UsXG4gICAgYnJvd3NlTWFpbjogZmFsc2UsXG4gIH1cblxuICBjb25zdCBhdExlYXN0ID0gKGI6IG51bWJlcltdKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB2ID0gYltpXVxuICAgICAgaWYgKHZlcnNbaV0gPiB2KSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGVsc2UgaWYgKHZlcnNbaV0gPCB2KSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgY29uc3QgZXhhY3QgPSAoYjogbnVtYmVyW10pID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHYgPSBiW2ldXG4gICAgICBpZiAodmVyc1tpXSAhPT0gdikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICghYXRMZWFzdChbNSwgNF0pKSB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKFxuICAgICAgYFxcXG5IYXNrZWxsLWdoYy1tb2Q6IGdoYy1tb2QgPCA1LjQgaXMgbm90IHN1cHBvcnRlZC4gXFxcblVzZSBhdCB5b3VyIG93biByaXNrIG9yIHVwZGF0ZSB5b3VyIGdoYy1tb2QgaW5zdGFsbGF0aW9uYCxcbiAgICAgIHsgZGlzbWlzc2FibGU6IHRydWUgfSxcbiAgICApXG4gIH1cbiAgaWYgKGV4YWN0KFs1LCA0XSkpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyhcbiAgICAgIGBcXFxuSGFza2VsbC1naGMtbW9kOiBnaGMtbW9kIDUuNC4qIGlzIGRlcHJlY2F0ZWQuIFxcXG5Vc2UgYXQgeW91ciBvd24gcmlzayBvciB1cGRhdGUgeW91ciBnaGMtbW9kIGluc3RhbGxhdGlvbmAsXG4gICAgICB7IGRpc21pc3NhYmxlOiB0cnVlIH0sXG4gICAgKVxuICB9XG4gIGlmIChhdExlYXN0KFs1LCA0XSkpIHtcbiAgICBjYXBzLmZpbGVNYXAgPSB0cnVlXG4gIH1cbiAgaWYgKGF0TGVhc3QoWzUsIDVdKSkge1xuICAgIGNhcHMucXVvdGVBcmdzID0gdHJ1ZVxuICAgIGNhcHMub3B0cGFyc2UgPSB0cnVlXG4gIH1cbiAgaWYgKGF0TGVhc3QoWzUsIDZdKSkge1xuICAgIGNhcHMudHlwZUNvbnN0cmFpbnRzID0gdHJ1ZVxuICAgIGNhcHMuYnJvd3NlUGFyZW50cyA9IHRydWVcbiAgICBjYXBzLmludGVyYWN0aXZlQ2FzZVNwbGl0ID0gdHJ1ZVxuICB9XG4gIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5leHBlcmltZW50YWwnKSkge1xuICAgIGNhcHMuaW1wb3J0ZWRGcm9tID0gdHJ1ZVxuICB9XG4gIFV0aWwuZGVidWcoSlNPTi5zdHJpbmdpZnkoY2FwcykpXG4gIHJldHVybiBjYXBzXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFZlcnNpb24ob3B0czogVXRpbC5FeGVjT3B0cyk6IFByb21pc2U8R0hDTW9kVmVycz4ge1xuICBjb25zdCB0aW1lb3V0ID0gYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWdoYy1tb2QuaW5pdFRpbWVvdXQnKSAqIDEwMDBcbiAgY29uc3QgY21kID0gYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWdoYy1tb2QuZ2hjTW9kUGF0aCcpXG4gIGNvbnN0IHsgc3Rkb3V0IH0gPSBhd2FpdCBVdGlsLmV4ZWNQcm9taXNlKGNtZCwgWyd2ZXJzaW9uJ10sIHsgdGltZW91dCwgLi4ub3B0cyB9KVxuICBjb25zdCB2ZXJzUmF3ID0gL15naGMtbW9kIHZlcnNpb24gKFxcZCspXFwuKFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8vLmV4ZWMoc3Rkb3V0KVxuICBpZiAoIXZlcnNSYXcpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZ2V0IGdoYy1tb2QgdmVyc2lvblwiKSB9XG4gIGNvbnN0IHZlcnMgPSB2ZXJzUmF3LnNsaWNlKDEsIDUpLm1hcCgoaSkgPT4gcGFyc2VJbnQoaSwgMTApKVxuICBjb25zdCBjb21wUmF3ID0gL0dIQyAoLispJC8uZXhlYyhzdGRvdXQudHJpbSgpKVxuICBpZiAoIWNvbXBSYXcpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZ2V0IGdoYyB2ZXJzaW9uXCIpIH1cbiAgY29uc3QgY29tcCA9IGNvbXBSYXdbMV1cbiAgVXRpbC5kZWJ1ZyhgR2hjLW1vZCAke3ZlcnN9IGJ1aWx0IHdpdGggJHtjb21wfWApXG4gIHJldHVybiB7IHZlcnMsIGNvbXAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja0NvbXAob3B0czogVXRpbC5FeGVjT3B0cywgdmVyc1A6IFByb21pc2U8R0hDTW9kVmVycz4pIHtcbiAgY29uc3QgeyBjb21wIH0gPSBhd2FpdCB2ZXJzUFxuICBjb25zdCB0aW1lb3V0ID0gYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWdoYy1tb2QuaW5pdFRpbWVvdXQnKSAqIDEwMDBcbiAgY29uc3QgdHJ5V2FybiA9IGFzeW5jIChjbWQ6IHN0cmluZywgYXJnczogc3RyaW5nW10pID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChhd2FpdCBVdGlsLmV4ZWNQcm9taXNlKGNtZCwgYXJncywgeyB0aW1lb3V0LCAuLi5vcHRzIH0pKS5zdGRvdXQudHJpbSgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIFV0aWwud2FybihlcnJvcilcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH1cbiAgY29uc3QgW3N0YWNrZ2hjLCBwYXRoZ2hjXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICB0cnlXYXJuKCdzdGFjaycsIFsnZ2hjJywgJy0tJywgJy0tbnVtZXJpYy12ZXJzaW9uJ10pLFxuICAgIHRyeVdhcm4oJ2doYycsIFsnLS1udW1lcmljLXZlcnNpb24nXSksXG4gIF0pXG4gIFV0aWwuZGVidWcoYFN0YWNrIEdIQyB2ZXJzaW9uICR7c3RhY2tnaGN9YClcbiAgVXRpbC5kZWJ1ZyhgUGF0aCBHSEMgdmVyc2lvbiAke3BhdGhnaGN9YClcbiAgaWYgKHN0YWNrZ2hjICYmIChzdGFja2doYyAhPT0gY29tcCkpIHtcbiAgICBjb25zdCB3YXJuID0gYFxcXG5HSEMgdmVyc2lvbiBpbiB5b3VyIFN0YWNrICcke3N0YWNrZ2hjfScgZG9lc24ndCBtYXRjaCB3aXRoIFxcXG5HSEMgdmVyc2lvbiB1c2VkIHRvIGJ1aWxkIGdoYy1tb2QgJyR7Y29tcH0nLiBUaGlzIGNhbiBsZWFkIHRvIFxcXG5wcm9ibGVtcyB3aGVuIHVzaW5nIFN0YWNrIHByb2plY3RzYFxuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKHdhcm4pXG4gICAgVXRpbC53YXJuKHdhcm4pXG4gIH1cbiAgaWYgKHBhdGhnaGMgJiYgKHBhdGhnaGMgIT09IGNvbXApKSB7XG4gICAgY29uc3Qgd2FybiA9IGBcXFxuR0hDIHZlcnNpb24gaW4geW91ciBQQVRIICcke3BhdGhnaGN9JyBkb2Vzbid0IG1hdGNoIHdpdGggXFxcbkdIQyB2ZXJzaW9uIHVzZWQgdG8gYnVpbGQgZ2hjLW1vZCAnJHtjb21wfScuIFRoaXMgY2FuIGxlYWQgdG8gXFxcbnByb2JsZW1zIHdoZW4gdXNpbmcgQ2FiYWwgb3IgUGxhaW4gcHJvamVjdHNgXG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcod2FybilcbiAgICBVdGlsLndhcm4od2FybilcbiAgfVxufVxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Util = require("../util");
const ghc_modi_process_real_1 = require("./ghc-modi-process-real");
const build_stack_1 = require("./build-stack");
async function createGhcModiProcessReal(rootDir, upi) {
    let opts;
    let vers;
    let caps;
    let builder;
    try {
        if (upi && atom.config.get('haskell-ghc-mod.builderManagement')) {
            builder = await upi.getOthersConfigParam('ide-haskell-cabal', 'builder');
        }
        const bn = builder && builder.name;
        Util.debug(`Using builder ${bn}`);
        opts = await Util.getProcessOptions(rootDir.getPath());
        const versP = getVersion(opts);
        const bopts = opts;
        const shouldBuild = await checkComp(bopts, versP, bn).catch(async (e) => {
            if (e.code === 'ENOENT') {
                return askBuild(bn, `Atom couldn't find ghc-mod.`);
            }
            else {
                atom.notifications.addError('Failed to check compiler versions', {
                    detail: e.toString(),
                    stack: e.stack,
                    dismissable: true,
                });
                return false;
            }
        });
        if (shouldBuild) {
            const success = await build_stack_1.buildStack(bopts, upi);
            if (success) {
                return createGhcModiProcessReal(rootDir, upi);
            }
            else {
                atom.notifications.addWarning('Building ghc-mod failed, continuing as-is');
            }
        }
        vers = await versP;
        caps = getCaps(vers);
        return new ghc_modi_process_real_1.GhcModiProcessReal(caps, rootDir, opts);
    }
    catch (e) {
        const err = e;
        Util.notifySpawnFail({ dir: rootDir.getPath(), err, opts, vers, caps });
        throw e;
    }
}
exports.createGhcModiProcessReal = createGhcModiProcessReal;
function getCaps({ vers }) {
    const caps = {
        version: vers,
        fileMap: false,
        quoteArgs: false,
        optparse: false,
        typeConstraints: false,
        browseParents: false,
        interactiveCaseSplit: false,
        importedFrom: false,
        browseMain: false,
    };
    const atLeast = (x) => Util.versAtLeast(vers, x);
    const exact = (b) => {
        for (let i = 0; i < b.length; i++) {
            const v = b[i];
            if (vers[i] !== v) {
                return false;
            }
        }
        return true;
    };
    if (!atLeast([5, 4])) {
        atom.notifications.addError(`\
Haskell-ghc-mod: ghc-mod < 5.4 is not supported. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (exact([5, 4])) {
        atom.notifications.addWarning(`\
Haskell-ghc-mod: ghc-mod 5.4.* is deprecated. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (atLeast([5, 4])) {
        caps.fileMap = true;
    }
    if (atLeast([5, 5])) {
        caps.quoteArgs = true;
        caps.optparse = true;
    }
    if (atLeast([5, 6])) {
        caps.typeConstraints = true;
        caps.browseParents = true;
        caps.interactiveCaseSplit = true;
    }
    if (atom.config.get('haskell-ghc-mod.experimental')) {
        caps.importedFrom = true;
    }
    Util.debug(JSON.stringify(caps));
    return caps;
}
async function getVersion(opts) {
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const cmd = atom.config.get('haskell-ghc-mod.ghcModPath');
    const { stdout } = await Util.execPromise(cmd, ['version'], Object.assign({ timeout }, opts));
    const versRaw = /^ghc-mod version (\d+)\.(\d+)\.(\d+)(?:\.(\d+))?/.exec(stdout);
    if (!versRaw) {
        throw new Error("Couldn't get ghc-mod version");
    }
    const vers = versRaw.slice(1, 5).map((i) => parseInt(i, 10));
    const compRaw = /GHC (.+)$/.exec(stdout.trim());
    if (!compRaw) {
        throw new Error("Couldn't get ghc version");
    }
    const comp = compRaw[1];
    Util.debug(`Ghc-mod ${vers} built with ${comp}`);
    return { vers, comp };
}
async function checkComp(opts, versP, builder) {
    const { comp } = await versP;
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const tryWarn = async (cmd, args) => {
        try {
            return (await Util.execPromise(cmd, args, Object.assign({ timeout }, opts))).stdout.trim();
        }
        catch (error) {
            Util.warn(error);
            return undefined;
        }
    };
    const [stackghc, pathghc] = await Promise.all([
        tryWarn('stack', ['--no-install-ghc', 'ghc', '--', '--numeric-version']),
        tryWarn('ghc', ['--numeric-version']),
    ]);
    Util.debug(`Stack GHC version ${stackghc}`);
    Util.debug(`Path GHC version ${pathghc}`);
    const warnStack = ['stack', undefined].includes(builder);
    const warnCabal = ['cabal', 'none', undefined].includes(builder);
    let shouldBuild = false;
    if (pathghc && pathghc !== comp && warnCabal) {
        shouldBuild =
            shouldBuild ||
                (await askBuild(builder, `\
GHC version in your PATH '${pathghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Cabal or Plain projects`));
    }
    if (stackghc && stackghc !== comp && warnStack) {
        shouldBuild =
            shouldBuild ||
                (await askBuild(builder, `\
GHC version in your Stack '${stackghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Stack projects.`));
    }
    return shouldBuild;
}
async function askBuild(builder, msg) {
    let buttons;
    return new Promise((resolve) => {
        let notif;
        if (builder === 'stack') {
            buttons = [
                {
                    className: 'icon icon-zap',
                    text: 'Build ghc-mod',
                    onDidClick() {
                        resolve(true);
                        notif && notif.dismiss();
                    },
                },
                {
                    className: 'icon icon-x',
                    text: 'No thanks',
                    onDidClick() {
                        resolve(false);
                        notif && notif.dismiss();
                    },
                },
            ];
        }
        const warn = `${msg} ${buttons ? 'Would you like to attempt building ghc-mod?' : ''}`;
        notif = atom.notifications.addWarning(warn, {
            dismissable: builder !== undefined,
            buttons,
        });
        Util.warn(msg);
        if (buttons) {
            const disp = notif.onDidDismiss(() => {
                disp.dispose();
                resolve(false);
            });
        }
        else {
            resolve(false);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjLW1vZGktcHJvY2Vzcy1yZWFsLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2hjLW1vZC9naGMtbW9kaS1wcm9jZXNzLXJlYWwtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdDQUErQjtBQUMvQixtRUFBd0U7QUFHeEUsK0NBQTBDO0FBSW5DLEtBQUssbUNBQ1YsT0FBa0IsRUFDbEIsR0FBNkI7SUFFN0IsSUFBSSxJQUE0QixDQUFBO0lBQ2hDLElBQUksSUFBNEIsQ0FBQTtJQUNoQyxJQUFJLElBQTRCLENBQUE7SUFDaEMsSUFBSSxPQUFxQyxDQUFBO0lBQ3pDLElBQUksQ0FBQztRQUNILEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoRSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsb0JBQW9CLENBQ3RDLG1CQUFtQixFQUNuQixTQUFTLENBQ1YsQ0FBQTtRQUNILENBQUM7UUFDRCxNQUFNLEVBQUUsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQTtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRWpDLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUN0RCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBRWxCLE1BQU0sV0FBVyxHQUFHLE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUN6RCxLQUFLLEVBQUUsQ0FBTSxFQUFFLEVBQUU7WUFDZixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFB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QUM7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsU0FBUyxFQUFFLGFBQWE7b0JBQ3hCLElBQUksRUFBRSxXQUFXO29CQUNqQixVQUFVO3dCQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTt3QkFDZCxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFBO29CQUMxQixDQUFDO2lCQUNGO2FBQ0YsQ0FBQTtRQUNILENBQUM7UUFDRCxNQUFNLElBQUksR0FBRyxHQUFHLEdBQUcsSUFDakIsT0FBTyxDQUFDLENBQUMsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUMsRUFDNUQsRUFBRSxDQUFBO1FBQ0YsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRTtZQUMxQyxXQUFXLEVBQUUsT0FBTyxLQUFLLFNBQVM7WUFDbEMsT0FBTztTQUNSLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDZCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDaEIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDaEIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdIQ01vZENhcHMgfSBmcm9tICcuL2ludGVyYWN0aXZlLXByb2Nlc3MnXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBHaGNNb2RpUHJvY2Vzc1JlYWwsIFJ1bk9wdGlvbnMgfSBmcm9tICcuL2doYy1tb2RpLXByb2Nlc3MtcmVhbCdcbmltcG9ydCB7IERpcmVjdG9yeSwgTm90aWZpY2F0aW9uIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IElVUElJbnN0YW5jZSB9IGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgeyBidWlsZFN0YWNrIH0gZnJvbSAnLi9idWlsZC1zdGFjaydcblxuZXhwb3J0IHR5cGUgR0hDTW9kVmVycyA9IHsgdmVyczogbnVtYmVyW107IGNvbXA6IHN0cmluZyB9XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVHaGNNb2RpUHJvY2Vzc1JlYWwoXG4gIHJvb3REaXI6IERpcmVjdG9yeSxcbiAgdXBpOiBJVVBJSW5zdGFuY2UgfCB1bmRlZmluZWQsXG4pOiBQcm9taXNlPEdoY01vZGlQcm9jZXNzUmVhbD4ge1xuICBsZXQgb3B0czogUnVuT3B0aW9ucyB8IHVuZGVmaW5lZFxuICBsZXQgdmVyczogR0hDTW9kVmVycyB8IHVuZGVmaW5lZFxuICBsZXQgY2FwczogR0hDTW9kQ2FwcyB8IHVuZGVmaW5lZFxuICBsZXQgYnVpbGRlcjogeyBuYW1lOiBzdHJpbmcgfSB8IHVuZGVmaW5lZFxuICB0cnkge1xuICAgIGlmICh1cGkgJiYgYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWdoYy1tb2QuYnVpbGRlck1hbmFnZW1lbnQnKSkge1xuICAgICAgLy8gVE9ETzogdGhpcyBpcyB1c2VkIHR3aWNlLCB0aGUgc2Vjb25kIHRpbWUgaW4gZ2hjLW1vZC9pbmRleC50cywgc2hvdWxkIHByb2JhYmx5IGZpeCB0aGF0XG4gICAgICBidWlsZGVyID0gYXdhaXQgdXBpLmdldE90aGVyc0NvbmZpZ1BhcmFtPHsgbmFtZTogc3RyaW5nIH0+KFxuICAgICAgICAnaWRlLWhhc2tlbGwtY2FiYWwnLFxuICAgICAgICAnYnVpbGRlcicsXG4gICAgICApXG4gICAgfVxuICAgIGNvbnN0IGJuID0gYnVpbGRlciAmJiBidWlsZGVyLm5hbWVcbiAgICBVdGlsLmRlYnVnKGBVc2luZyBidWlsZGVyICR7Ym59YClcbiAgICAvLyBUT0RPOiBTaG91bGQgcHJlZmVyIHN0YWNrIHNhbmRib3ggd2hlbiB1c2luZyBzdGFjayBhbmQgY2FiYWwgc2FuYmRveCB3aGVuIHVzaW5nIGNhYmFsIVxuICAgIG9wdHMgPSBhd2FpdCBVdGlsLmdldFByb2Nlc3NPcHRpb25zKHJvb3REaXIuZ2V0UGF0aCgpKVxuICAgIGNvbnN0IHZlcnNQID0gZ2V0VmVyc2lvbihvcHRzKVxuICAgIGNvbnN0IGJvcHRzID0gb3B0c1xuICAgIC8vIFRPRE86IHRoaXMgZ2V0cyBjaGVja2VkIG9ubHkgb25jZSwgc2hvdWxkIGNoZWNrIG9uIGdoYy1tb2QgcmVzdGFydD9cbiAgICBjb25zdCBzaG91bGRCdWlsZCA9IGF3YWl0IGNoZWNrQ29tcChib3B0cywgdmVyc1AsIGJuKS5jYXRjaChcbiAgICAgIGFzeW5jIChlOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICByZXR1cm4gYXNrQnVpbGQoYm4sIGBBdG9tIGNvdWxkbid0IGZpbmQgZ2hjLW1vZC5gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcignRmFpbGVkIHRvIGNoZWNrIGNvbXBpbGVyIHZlcnNpb25zJywge1xuICAgICAgICAgICAgZGV0YWlsOiBlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBzdGFjazogZS5zdGFjayxcbiAgICAgICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKVxuICAgIGlmIChzaG91bGRCdWlsZCkge1xuICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGJ1aWxkU3RhY2soYm9wdHMsIHVwaSlcbiAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVHaGNNb2RpUHJvY2Vzc1JlYWwocm9vdERpciwgdXBpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoXG4gICAgICAgICAgJ0J1aWxkaW5nIGdoYy1tb2QgZmFpbGVkLCBjb250aW51aW5nIGFzLWlzJyxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICB2ZXJzID0gYXdhaXQgdmVyc1BcbiAgICBjYXBzID0gZ2V0Q2Fwcyh2ZXJzKVxuICAgIHJldHVybiBuZXcgR2hjTW9kaVByb2Nlc3NSZWFsKGNhcHMsIHJvb3REaXIsIG9wdHMpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuICAgIGNvbnN0IGVycjogRXJyb3IgJiB7IGNvZGU6IGFueSB9ID0gZVxuICAgIFV0aWwubm90aWZ5U3Bhd25GYWlsKHsgZGlyOiByb290RGlyLmdldFBhdGgoKSwgZXJyLCBvcHRzLCB2ZXJzLCBjYXBzIH0pXG4gICAgdGhyb3cgZVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldENhcHMoeyB2ZXJzIH06IHsgdmVyczogbnVtYmVyW10gfSk6IEdIQ01vZENhcHMge1xuICBjb25zdCBjYXBzOiBHSENNb2RDYXBzID0ge1xuICAgIHZlcnNpb246IHZlcnMsXG4gICAgZmlsZU1hcDogZmFsc2UsXG4gICAgcXVvdGVBcmdzOiBmYWxzZSxcbiAgICBvcHRwYXJzZTogZmFsc2UsXG4gICAgdHlwZUNvbnN0cmFpbnRzOiBmYWxzZSxcbiAgICBicm93c2VQYXJlbnRzOiBmYWxzZSxcbiAgICBpbnRlcmFjdGl2ZUNhc2VTcGxpdDogZmFsc2UsXG4gICAgaW1wb3J0ZWRGcm9tOiBmYWxzZSxcbiAgICBicm93c2VNYWluOiBmYWxzZSxcbiAgfVxuXG4gIGNvbnN0IGF0TGVhc3QgPSAoeDogbnVtYmVyW10pID0+IFV0aWwudmVyc0F0TGVhc3QodmVycywgeClcblxuICBjb25zdCBleGFjdCA9IChiOiBudW1iZXJbXSkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdiA9IGJbaV1cbiAgICAgIGlmICh2ZXJzW2ldICE9PSB2KSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKCFhdExlYXN0KFs1LCA0XSkpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoXG4gICAgICBgXFxcbkhhc2tlbGwtZ2hjLW1vZDogZ2hjLW1vZCA8IDUuNCBpcyBub3Qgc3VwcG9ydGVkLiBcXFxuVXNlIGF0IHlvdXIgb3duIHJpc2sgb3IgdXBkYXRlIHlvdXIgZ2hjLW1vZCBpbnN0YWxsYXRpb25gLFxuICAgICAgeyBkaXNtaXNzYWJsZTogdHJ1ZSB9LFxuICAgIClcbiAgfVxuICBpZiAoZXhhY3QoWzUsIDRdKSkge1xuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKFxuICAgICAgYFxcXG5IYXNrZWxsLWdoYy1tb2Q6IGdoYy1tb2QgNS40LiogaXMgZGVwcmVjYXRlZC4gXFxcblVzZSBhdCB5b3VyIG93biByaXNrIG9yIHVwZGF0ZSB5b3VyIGdoYy1tb2QgaW5zdGFsbGF0aW9uYCxcbiAgICAgIHsgZGlzbWlzc2FibGU6IHRydWUgfSxcbiAgICApXG4gIH1cbiAgaWYgKGF0TGVhc3QoWzUsIDRdKSkge1xuICAgIGNhcHMuZmlsZU1hcCA9IHRydWVcbiAgfVxuICBpZiAoYXRMZWFzdChbNSwgNV0pKSB7XG4gICAgY2Fwcy5xdW90ZUFyZ3MgPSB0cnVlXG4gICAgY2Fwcy5vcHRwYXJzZSA9IHRydWVcbiAgfVxuICBpZiAoYXRMZWFzdChbNSwgNl0pKSB7XG4gICAgY2Fwcy50eXBlQ29uc3RyYWludHMgPSB0cnVlXG4gICAgY2Fwcy5icm93c2VQYXJlbnRzID0gdHJ1ZVxuICAgIGNhcHMuaW50ZXJhY3RpdmVDYXNlU3BsaXQgPSB0cnVlXG4gIH1cbiAgaWYgKGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmV4cGVyaW1lbnRhbCcpKSB7XG4gICAgY2Fwcy5pbXBvcnRlZEZyb20gPSB0cnVlXG4gIH1cbiAgVXRpbC5kZWJ1ZyhKU09OLnN0cmluZ2lmeShjYXBzKSlcbiAgcmV0dXJuIGNhcHNcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbihvcHRzOiBVdGlsLkV4ZWNPcHRzKTogUHJvbWlzZTxHSENNb2RWZXJzPiB7XG4gIGNvbnN0IHRpbWVvdXQgPSBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5pbml0VGltZW91dCcpICogMTAwMFxuICBjb25zdCBjbWQgPSBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5naGNNb2RQYXRoJylcbiAgY29uc3QgeyBzdGRvdXQgfSA9IGF3YWl0IFV0aWwuZXhlY1Byb21pc2UoY21kLCBbJ3ZlcnNpb24nXSwge1xuICAgIHRpbWVvdXQsXG4gICAgLi4ub3B0cyxcbiAgfSlcbiAgY29uc3QgdmVyc1JhdyA9IC9eZ2hjLW1vZCB2ZXJzaW9uIChcXGQrKVxcLihcXGQrKVxcLihcXGQrKSg/OlxcLihcXGQrKSk/Ly5leGVjKFxuICAgIHN0ZG91dCxcbiAgKVxuICBpZiAoIXZlcnNSYXcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBnZXQgZ2hjLW1vZCB2ZXJzaW9uXCIpXG4gIH1cbiAgY29uc3QgdmVycyA9IHZlcnNSYXcuc2xpY2UoMSwgNSkubWFwKChpKSA9PiBwYXJzZUludChpLCAxMCkpXG4gIGNvbnN0IGNvbXBSYXcgPSAvR0hDICguKykkLy5leGVjKHN0ZG91dC50cmltKCkpXG4gIGlmICghY29tcFJhdykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGdldCBnaGMgdmVyc2lvblwiKVxuICB9XG4gIGNvbnN0IGNvbXAgPSBjb21wUmF3WzFdXG4gIFV0aWwuZGVidWcoYEdoYy1tb2QgJHt2ZXJzfSBidWlsdCB3aXRoICR7Y29tcH1gKVxuICByZXR1cm4geyB2ZXJzLCBjb21wIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tDb21wKFxuICBvcHRzOiBVdGlsLkV4ZWNPcHRzLFxuICB2ZXJzUDogUHJvbWlzZTxHSENNb2RWZXJzPixcbiAgYnVpbGRlcjogc3RyaW5nIHwgdW5kZWZpbmVkLFxuKSB7XG4gIGNvbnN0IHsgY29tcCB9ID0gYXdhaXQgdmVyc1BcbiAgY29uc3QgdGltZW91dCA9IGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmluaXRUaW1lb3V0JykgKiAxMDAwXG4gIGNvbnN0IHRyeVdhcm4gPSBhc3luYyAoY21kOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoYXdhaXQgVXRpbC5leGVjUHJvbWlzZShjbWQsIGFyZ3MsIHtcbiAgICAgICAgdGltZW91dCxcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgIH0pKS5zdGRvdXQudHJpbSgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIFV0aWwud2FybihlcnJvcilcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH1cbiAgY29uc3QgW3N0YWNrZ2hjLCBwYXRoZ2hjXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICB0cnlXYXJuKCdzdGFjaycsIFsnLS1uby1pbnN0YWxsLWdoYycsICdnaGMnLCAnLS0nLCAnLS1udW1lcmljLXZlcnNpb24nXSksXG4gICAgdHJ5V2FybignZ2hjJywgWyctLW51bWVyaWMtdmVyc2lvbiddKSxcbiAgXSlcbiAgVXRpbC5kZWJ1ZyhgU3RhY2sgR0hDIHZlcnNpb24gJHtzdGFja2doY31gKVxuICBVdGlsLmRlYnVnKGBQYXRoIEdIQyB2ZXJzaW9uICR7cGF0aGdoY31gKVxuICBjb25zdCB3YXJuU3RhY2sgPSBbJ3N0YWNrJywgdW5kZWZpbmVkXS5pbmNsdWRlcyhidWlsZGVyKVxuICBjb25zdCB3YXJuQ2FiYWwgPSBbJ2NhYmFsJywgJ25vbmUnLCB1bmRlZmluZWRdLmluY2x1ZGVzKGJ1aWxkZXIpXG4gIGxldCBzaG91bGRCdWlsZCA9IGZhbHNlXG4gIGlmIChwYXRoZ2hjICYmIHBhdGhnaGMgIT09IGNvbXAgJiYgd2FybkNhYmFsKSB7XG4gICAgc2hvdWxkQnVpbGQgPVxuICAgICAgc2hvdWxkQnVpbGQgfHxcbiAgICAgIChhd2FpdCBhc2tCdWlsZChcbiAgICAgICAgYnVpbGRlcixcbiAgICAgICAgYFxcXG5HSEMgdmVyc2lvbiBpbiB5b3VyIFBBVEggJyR7cGF0aGdoY30nIGRvZXNuJ3QgbWF0Y2ggd2l0aCBcXFxuR0hDIHZlcnNpb24gdXNlZCB0byBidWlsZCBnaGMtbW9kICcke2NvbXB9Jy4gVGhpcyBjYW4gbGVhZCB0byBcXFxucHJvYmxlbXMgd2hlbiB1c2luZyBDYWJhbCBvciBQbGFpbiBwcm9qZWN0c2AsXG4gICAgICApKVxuICB9XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIHN0YWNrIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBpZiAoc3RhY2tnaGMgJiYgc3RhY2tnaGMgIT09IGNvbXAgJiYgd2FyblN0YWNrKSB7XG4gICAgc2hvdWxkQnVpbGQgPVxuICAgICAgc2hvdWxkQnVpbGQgfHxcbiAgICAgIChhd2FpdCBhc2tCdWlsZChcbiAgICAgICAgYnVpbGRlcixcbiAgICAgICAgYFxcXG5HSEMgdmVyc2lvbiBpbiB5b3VyIFN0YWNrICcke3N0YWNrZ2hjfScgZG9lc24ndCBtYXRjaCB3aXRoIFxcXG5HSEMgdmVyc2lvbiB1c2VkIHRvIGJ1aWxkIGdoYy1tb2QgJyR7Y29tcH0nLiBUaGlzIGNhbiBsZWFkIHRvIFxcXG5wcm9ibGVtcyB3aGVuIHVzaW5nIFN0YWNrIHByb2plY3RzLmAsXG4gICAgICApKVxuICB9XG4gIHJldHVybiBzaG91bGRCdWlsZFxufVxuXG5hc3luYyBmdW5jdGlvbiBhc2tCdWlsZChidWlsZGVyOiBzdHJpbmcgfCB1bmRlZmluZWQsIG1zZzogc3RyaW5nKSB7XG4gIGxldCBidXR0b25zOlxuICAgIHwgQXJyYXk8e1xuICAgICAgICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgICAgICAgdGV4dD86IHN0cmluZ1xuICAgICAgICBvbkRpZENsaWNrPyhldmVudDogTW91c2VFdmVudCk6IHZvaWRcbiAgICAgIH0+XG4gICAgfCB1bmRlZmluZWRcblxuICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUpID0+IHtcbiAgICBsZXQgbm90aWY6IE5vdGlmaWNhdGlvblxuICAgIGlmIChidWlsZGVyID09PSAnc3RhY2snKSB7XG4gICAgICAvLyBvZmZlciB0byBidWlsZCBnaGMtbW9kXG4gICAgICBidXR0b25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnaWNvbiBpY29uLXphcCcsXG4gICAgICAgICAgdGV4dDogJ0J1aWxkIGdoYy1tb2QnLFxuICAgICAgICAgIG9uRGlkQ2xpY2soKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpXG4gICAgICAgICAgICBub3RpZiAmJiBub3RpZi5kaXNtaXNzKClcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnaWNvbiBpY29uLXgnLFxuICAgICAgICAgIHRleHQ6ICdObyB0aGFua3MnLFxuICAgICAgICAgIG9uRGlkQ2xpY2soKSB7XG4gICAgICAgICAgICByZXNvbHZlKGZhbHNlKVxuICAgICAgICAgICAgbm90aWYgJiYgbm90aWYuZGlzbWlzcygpXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9XG4gICAgY29uc3Qgd2FybiA9IGAke21zZ30gJHtcbiAgICAgIGJ1dHRvbnMgPyAnV291bGQgeW91IGxpa2UgdG8gYXR0ZW1wdCBidWlsZGluZyBnaGMtbW9kPycgOiAnJ1xuICAgIH1gXG4gICAgbm90aWYgPSBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyh3YXJuLCB7XG4gICAgICBkaXNtaXNzYWJsZTogYnVpbGRlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgYnV0dG9ucyxcbiAgICB9KVxuICAgIFV0aWwud2Fybihtc2cpXG4gICAgaWYgKGJ1dHRvbnMpIHtcbiAgICAgIGNvbnN0IGRpc3AgPSBub3RpZi5vbkRpZERpc21pc3MoKCkgPT4ge1xuICAgICAgICBkaXNwLmRpc3Bvc2UoKVxuICAgICAgICByZXNvbHZlKGZhbHNlKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZShmYWxzZSlcbiAgICB9XG4gIH0pXG59XG4iXX0=
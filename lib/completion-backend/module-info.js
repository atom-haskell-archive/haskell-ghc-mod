"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const Util = require("../util");
class ModuleInfo {
    constructor(name, process, rootDir) {
        this.name = name;
        this.process = process;
        this.rootDir = rootDir;
        this.invalidateInterval = 30 * 60 * 1000;
        this.destroy = () => {
            Util.debug(`${this.name} destroyed`);
            clearTimeout(this.timeout);
            this.emitter.emit('did-destroy');
            this.disposables.dispose();
        };
        Util.debug(`${this.name} created`);
        this.symbols = [];
        this.disposables = new atom_1.CompositeDisposable();
        this.bufferSet = new WeakSet();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.updatePromise = this.update(rootDir);
        this.timeout = setTimeout(this.destroy, this.invalidateInterval);
        this.disposables.add(this.process.onDidDestroy(this.destroy));
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    async setBuffer(bufferInfo) {
        const name = await bufferInfo.getModuleName();
        if (name !== this.name) {
            return;
        }
        if (this.bufferSet.has(bufferInfo.buffer)) {
            return;
        }
        this.bufferSet.add(bufferInfo.buffer);
        Util.debug(`${this.name} buffer is set`);
        const disposables = new atom_1.CompositeDisposable();
        disposables.add(bufferInfo.buffer.onDidSave(() => {
            Util.debug(`${this.name} did-save triggered`);
            this.updatePromise = this.update(this.rootDir);
        }));
        disposables.add(bufferInfo.buffer.onDidDestroy(() => {
            disposables.dispose();
            this.bufferSet.delete(bufferInfo.buffer);
            this.disposables.remove(disposables);
        }));
        this.disposables.add(disposables);
    }
    async select(importDesc, symbolTypes, skipQualified = false) {
        await this.updatePromise;
        clearTimeout(this.timeout);
        this.timeout = setTimeout(this.destroy, this.invalidateInterval);
        let symbols = this.symbols;
        if (importDesc.importList) {
            const il = importDesc.importList;
            symbols = symbols.filter((s) => {
                const inImportList = il.includes(s.name);
                const parentInImportList = il.some((i) => (typeof i !== 'string') && (s.parent === i.parent));
                const shouldShow = inImportList || parentInImportList;
                return importDesc.hiding !== shouldShow;
            });
        }
        const res = [];
        for (const symbol of symbols) {
            if (symbolTypes && !symbolTypes.includes(symbol.symbolType)) {
                continue;
            }
            const specific = {
                name: symbol.name,
                typeSignature: symbol.typeSignature,
                symbolType: symbol.symbolType,
                module: importDesc,
            };
            const qn = (n) => `${importDesc.alias || importDesc.name}.${n}`;
            if (!skipQualified) {
                res.push(Object.assign({}, specific, { qparent: symbol.parent ? qn(symbol.parent) : undefined, qname: qn(symbol.name) }));
            }
            if (!importDesc.qualified) {
                res.push(Object.assign({}, specific, { qparent: symbol.parent, qname: symbol.name }));
            }
        }
        return res;
    }
    async update(rootDir) {
        Util.debug(`${this.name} updating`);
        this.symbols = await this.process.runBrowse(rootDir, [this.name]);
        Util.debug(`${this.name} updated`);
    }
}
exports.ModuleInfo = ModuleInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcGxldGlvbi1iYWNrZW5kL21vZHVsZS1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTBFO0FBQzFFLGdDQUErQjtBQU8vQjtJQVdFLFlBQ21CLElBQVksRUFDWixPQUF1QixFQUN2QixPQUFrQjtRQUZsQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQVRwQix1QkFBa0IsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQTtRQXNCN0MsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLENBQUE7WUFDcEMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtZQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzVCLENBQUMsQ0FBQTtRQWhCQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUE7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFBO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQTtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDaEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQVNNLFlBQVksQ0FBQyxRQUFvQjtRQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2pELENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQXNCO1FBQzNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQTtRQUFDLENBQUM7UUFDbEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQTtRQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFBO1FBQ3hDLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM3QyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUkscUJBQXFCLENBQUMsQ0FBQTtZQUM3QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2hELENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDSCxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRTtZQUNsRCxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7WUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFtQixFQUFFLFdBQTBCLEVBQUUsZ0JBQXlCLEtBQUs7UUFDakcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFBO1FBQ3hCLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUNoRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQzFCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUE7WUFDaEMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDN0IsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ3hDLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7Z0JBQzdGLE1BQU0sVUFBVSxHQUFHLFlBQVksSUFBSSxrQkFBa0IsQ0FBQTtnQkFDckQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFBO1lBQ3pDLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUNELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtRQUNkLEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLFFBQVEsQ0FBQTtZQUFDLENBQUM7WUFDekUsTUFBTSxRQUFRLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUNqQixhQUFhLEVBQUUsTUFBTSxDQUFDLGFBQWE7Z0JBQ25DLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTtnQkFDN0IsTUFBTSxFQUFFLFVBQVU7YUFDbkIsQ0FBQTtZQUNELE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQTtZQUN2RSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLEdBQUcsQ0FBQyxJQUFJLG1CQUNILFFBQVEsSUFDWCxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUN0RCxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFDdEIsQ0FBQTtZQUNKLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixHQUFHLENBQUMsSUFBSSxtQkFDSCxRQUFRLElBQ1gsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQ3RCLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxJQUNsQixDQUFBO1lBQ0osQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUVPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBa0I7UUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUNqRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLENBQUE7SUFDcEMsQ0FBQztDQUNGO0FBeEdELGdDQXdHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIEVtaXR0ZXIsIFRleHRCdWZmZXIsIERpcmVjdG9yeSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBHaGNNb2RpUHJvY2VzcywgU3ltYm9sRGVzYyB9IGZyb20gJy4uL2doYy1tb2QnXG5pbXBvcnQgeyBCdWZmZXJJbmZvLCBJSW1wb3J0IH0gZnJvbSAnLi9idWZmZXItaW5mbydcbmltcG9ydCAqIGFzIENvbXBsZXRpb25CYWNrZW5kIGZyb20gJ2F0b20taGFza2VsbC11cGkvY29tcGxldGlvbi1iYWNrZW5kJ1xuXG5pbXBvcnQgU3ltYm9sVHlwZSA9IENvbXBsZXRpb25CYWNrZW5kLlN5bWJvbFR5cGVcblxuZXhwb3J0IGNsYXNzIE1vZHVsZUluZm8ge1xuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgcmVhZG9ubHkgZW1pdHRlcjogRW1pdHRlcjx7XG4gICAgJ2RpZC1kZXN0cm95JzogdW5kZWZpbmVkXG4gIH0+XG4gIHByaXZhdGUgcmVhZG9ubHkgaW52YWxpZGF0ZUludGVydmFsID0gMzAgKiA2MCAqIDEwMDAgLy8gaWYgbW9kdWxlIHVudXNlZCBmb3IgMzAgbWludXRlcywgcmVtb3ZlIGl0XG4gIHByaXZhdGUgcmVhZG9ubHkgYnVmZmVyU2V0OiBXZWFrU2V0PFRleHRCdWZmZXI+XG4gIHByaXZhdGUgdGltZW91dDogTm9kZUpTLlRpbWVyXG4gIHByaXZhdGUgdXBkYXRlUHJvbWlzZTogUHJvbWlzZTx2b2lkPlxuICBwcml2YXRlIHN5bWJvbHM6IFN5bWJvbERlc2NbXSAvLyBtb2R1bGUgc3ltYm9sc1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvY2VzczogR2hjTW9kaVByb2Nlc3MsXG4gICAgcHJpdmF0ZSByZWFkb25seSByb290RGlyOiBEaXJlY3RvcnksXG4gICkge1xuICAgIFV0aWwuZGVidWcoYCR7dGhpcy5uYW1lfSBjcmVhdGVkYClcbiAgICB0aGlzLnN5bWJvbHMgPSBbXVxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5idWZmZXJTZXQgPSBuZXcgV2Vha1NldCgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcbiAgICB0aGlzLnVwZGF0ZVByb21pc2UgPSB0aGlzLnVwZGF0ZShyb290RGlyKVxuICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5kZXN0cm95LCB0aGlzLmludmFsaWRhdGVJbnRlcnZhbClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZCh0aGlzLnByb2Nlc3Mub25EaWREZXN0cm95KHRoaXMuZGVzdHJveSkpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSA9ICgpID0+IHtcbiAgICBVdGlsLmRlYnVnKGAke3RoaXMubmFtZX0gZGVzdHJveWVkYClcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtZGVzdHJveScpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHB1YmxpYyBvbkRpZERlc3Ryb3koY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtZGVzdHJveScsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldEJ1ZmZlcihidWZmZXJJbmZvOiBCdWZmZXJJbmZvKSB7XG4gICAgY29uc3QgbmFtZSA9IGF3YWl0IGJ1ZmZlckluZm8uZ2V0TW9kdWxlTmFtZSgpXG4gICAgaWYgKG5hbWUgIT09IHRoaXMubmFtZSkgeyByZXR1cm4gfVxuICAgIGlmICh0aGlzLmJ1ZmZlclNldC5oYXMoYnVmZmVySW5mby5idWZmZXIpKSB7IHJldHVybiB9XG4gICAgdGhpcy5idWZmZXJTZXQuYWRkKGJ1ZmZlckluZm8uYnVmZmVyKVxuICAgIFV0aWwuZGVidWcoYCR7dGhpcy5uYW1lfSBidWZmZXIgaXMgc2V0YClcbiAgICBjb25zdCBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICBkaXNwb3NhYmxlcy5hZGQoYnVmZmVySW5mby5idWZmZXIub25EaWRTYXZlKCgpID0+IHtcbiAgICAgIFV0aWwuZGVidWcoYCR7dGhpcy5uYW1lfSBkaWQtc2F2ZSB0cmlnZ2VyZWRgKVxuICAgICAgdGhpcy51cGRhdGVQcm9taXNlID0gdGhpcy51cGRhdGUodGhpcy5yb290RGlyKVxuICAgIH0pKVxuICAgIGRpc3Bvc2FibGVzLmFkZChidWZmZXJJbmZvLmJ1ZmZlci5vbkRpZERlc3Ryb3koKCkgPT4ge1xuICAgICAgZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gICAgICB0aGlzLmJ1ZmZlclNldC5kZWxldGUoYnVmZmVySW5mby5idWZmZXIpXG4gICAgICB0aGlzLmRpc3Bvc2FibGVzLnJlbW92ZShkaXNwb3NhYmxlcylcbiAgICB9KSlcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChkaXNwb3NhYmxlcylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZWxlY3QoaW1wb3J0RGVzYzogSUltcG9ydCwgc3ltYm9sVHlwZXM/OiBTeW1ib2xUeXBlW10sIHNraXBRdWFsaWZpZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlUHJvbWlzZVxuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmRlc3Ryb3ksIHRoaXMuaW52YWxpZGF0ZUludGVydmFsKVxuICAgIGxldCBzeW1ib2xzID0gdGhpcy5zeW1ib2xzXG4gICAgaWYgKGltcG9ydERlc2MuaW1wb3J0TGlzdCkge1xuICAgICAgY29uc3QgaWwgPSBpbXBvcnREZXNjLmltcG9ydExpc3RcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcigocykgPT4ge1xuICAgICAgICBjb25zdCBpbkltcG9ydExpc3QgPSBpbC5pbmNsdWRlcyhzLm5hbWUpXG4gICAgICAgIGNvbnN0IHBhcmVudEluSW1wb3J0TGlzdCA9IGlsLnNvbWUoKGkpID0+ICh0eXBlb2YgaSAhPT0gJ3N0cmluZycpICYmIChzLnBhcmVudCA9PT0gaS5wYXJlbnQpKVxuICAgICAgICBjb25zdCBzaG91bGRTaG93ID0gaW5JbXBvcnRMaXN0IHx8IHBhcmVudEluSW1wb3J0TGlzdFxuICAgICAgICByZXR1cm4gaW1wb3J0RGVzYy5oaWRpbmcgIT09IHNob3VsZFNob3cgLy8gWE9SXG4gICAgICB9KVxuICAgIH1cbiAgICBjb25zdCByZXMgPSBbXVxuICAgIGZvciAoY29uc3Qgc3ltYm9sIG9mIHN5bWJvbHMpIHtcbiAgICAgIGlmIChzeW1ib2xUeXBlcyAmJiAhc3ltYm9sVHlwZXMuaW5jbHVkZXMoc3ltYm9sLnN5bWJvbFR5cGUpKSB7IGNvbnRpbnVlIH1cbiAgICAgIGNvbnN0IHNwZWNpZmljID0ge1xuICAgICAgICBuYW1lOiBzeW1ib2wubmFtZSxcbiAgICAgICAgdHlwZVNpZ25hdHVyZTogc3ltYm9sLnR5cGVTaWduYXR1cmUsXG4gICAgICAgIHN5bWJvbFR5cGU6IHN5bWJvbC5zeW1ib2xUeXBlLFxuICAgICAgICBtb2R1bGU6IGltcG9ydERlc2MsXG4gICAgICB9XG4gICAgICBjb25zdCBxbiA9IChuOiBzdHJpbmcpID0+IGAke2ltcG9ydERlc2MuYWxpYXMgfHwgaW1wb3J0RGVzYy5uYW1lfS4ke259YFxuICAgICAgaWYgKCFza2lwUXVhbGlmaWVkKSB7XG4gICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAuLi5zcGVjaWZpYyxcbiAgICAgICAgICBxcGFyZW50OiBzeW1ib2wucGFyZW50ID8gcW4oc3ltYm9sLnBhcmVudCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgcW5hbWU6IHFuKHN5bWJvbC5uYW1lKSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGlmICghaW1wb3J0RGVzYy5xdWFsaWZpZWQpIHtcbiAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgIC4uLnNwZWNpZmljLFxuICAgICAgICAgIHFwYXJlbnQ6IHN5bWJvbC5wYXJlbnQsXG4gICAgICAgICAgcW5hbWU6IHN5bWJvbC5uYW1lLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVwZGF0ZShyb290RGlyOiBEaXJlY3RvcnkpIHtcbiAgICBVdGlsLmRlYnVnKGAke3RoaXMubmFtZX0gdXBkYXRpbmdgKVxuICAgIHRoaXMuc3ltYm9scyA9IGF3YWl0IHRoaXMucHJvY2Vzcy5ydW5Ccm93c2Uocm9vdERpciwgW3RoaXMubmFtZV0pXG4gICAgVXRpbC5kZWJ1ZyhgJHt0aGlzLm5hbWV9IHVwZGF0ZWRgKVxuICB9XG59XG4iXX0=
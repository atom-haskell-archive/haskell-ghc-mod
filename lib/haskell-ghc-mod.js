"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
let resolveUpiPromise;
let upiPromise;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) {
    upiPromise = new Promise((resolve) => resolveUpiPromise = resolve);
    process = new ghc_mod_1.GhcModiProcess();
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess(),
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
    tempDisposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return undefined;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process, upiPromise);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return undefined;
    }
    tempDisposables && tempDisposables.dispose();
    tempDisposables = undefined;
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    resolveUpiPromise(upiConsumer.upi);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUEwQztBQUMxQywrQkFBMEM7QUFDMUMsNkRBQXdEO0FBQ3hELGlEQUE0QztBQUM1QyxpQ0FBNEM7QUFHNUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUNwRCxJQUFJLGlCQUFnRCxDQUFBO0FBQ3BELElBQUksVUFBcUMsQ0FBQTtBQUV6QyxtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYsa0JBQXlCLE1BQWE7SUFDcEMsVUFBVSxHQUFHLElBQUksT0FBTyxDQUFtQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLENBQUE7SUFDcEYsT0FBTyxHQUFHLElBQUksd0JBQWMsRUFBRSxDQUFBO0lBQzlCLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDdkMsZUFBZSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhDLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsMEJBQW1CLENBQUMsRUFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFO1FBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUM5RCxDQUFDLENBQUMsQ0FDSCxDQUFBO0lBRUQsV0FBVyxDQUFDLEdBQUcsQ0FDYixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNsQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtLQUMzRSxDQUFDLENBQ0gsQ0FBQTtBQUNILENBQUM7QUFuQkQsNEJBbUJDO0FBRUQ7SUFDRSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLE9BQU8sR0FBRyxTQUFTLENBQUE7SUFDbkIsaUJBQWlCLEdBQUcsU0FBUyxDQUFBO0lBQzdCLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDcEMsV0FBVyxHQUFHLFNBQVMsQ0FBQTtJQUN2QixlQUFlLEdBQUcsU0FBUyxDQUFBO0FBQzdCLENBQUM7QUFQRCxnQ0FPQztBQUVEO0lBQ0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQTtJQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDdkIsaUJBQWlCLEdBQUcsSUFBSSxzQ0FBaUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDaEUsQ0FBQztJQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQTtBQUMxQixDQUFDO0FBTkQsNERBTUM7QUFFRCxvQkFBMkIsT0FBNkI7SUFDdEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQTtJQUFDLENBQUM7SUFDbEQsZUFBZSxJQUFJLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QyxlQUFlLEdBQUcsU0FBUyxDQUFBO0lBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDckQsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2xDLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDNUIsTUFBTSxDQUFDLFdBQVcsQ0FBQTtBQUNwQixDQUFDO0FBUkQsZ0NBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaGNNb2RpUHJvY2VzcyB9IGZyb20gJy4vZ2hjLW1vZCdcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgQ29tcGxldGlvbkJhY2tlbmQgfSBmcm9tICcuL2NvbXBsZXRpb24tYmFja2VuZCdcbmltcG9ydCB7IFVQSUNvbnN1bWVyIH0gZnJvbSAnLi91cGktY29uc3VtZXInXG5pbXBvcnQgeyBkZWZhdWx0RXJyb3JIYW5kbGVyIH0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5cbmxldCBwcm9jZXNzOiBHaGNNb2RpUHJvY2VzcyB8IHVuZGVmaW5lZFxubGV0IGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlIHwgdW5kZWZpbmVkXG5sZXQgdGVtcERpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlIHwgdW5kZWZpbmVkXG5sZXQgY29tcGxldGlvbkJhY2tlbmQ6IENvbXBsZXRpb25CYWNrZW5kIHwgdW5kZWZpbmVkXG5sZXQgcmVzb2x2ZVVwaVByb21pc2U6ICh2OiBVUEkuSVVQSUluc3RhbmNlKSA9PiB2b2lkXG5sZXQgdXBpUHJvbWlzZTogUHJvbWlzZTxVUEkuSVVQSUluc3RhbmNlPlxuXG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlKF9zdGF0ZTogbmV2ZXIpIHtcbiAgdXBpUHJvbWlzZSA9IG5ldyBQcm9taXNlPFVQSS5JVVBJSW5zdGFuY2U+KChyZXNvbHZlKSA9PiByZXNvbHZlVXBpUHJvbWlzZSA9IHJlc29sdmUpXG4gIHByb2Nlc3MgPSBuZXcgR2hjTW9kaVByb2Nlc3MoKVxuICBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgdGVtcERpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBkaXNwb3NhYmxlcy5hZGQodGVtcERpc3Bvc2FibGVzKVxuXG4gIHRlbXBEaXNwb3NhYmxlcy5hZGQoXG4gICAgcHJvY2Vzcy5vbkVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIpLFxuICAgIHByb2Nlc3Mub25XYXJuaW5nKChkZXRhaWw6IHN0cmluZykgPT4ge1xuICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoJ2doYy1tb2Qgd2FybmluZycsIHsgZGV0YWlsIH0pXG4gICAgfSksXG4gIClcblxuICBkaXNwb3NhYmxlcy5hZGQoXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgJ2hhc2tlbGwtZ2hjLW1vZDpzaHV0ZG93bi1iYWNrZW5kJzogKCkgPT4gcHJvY2VzcyAmJiBwcm9jZXNzLmtpbGxQcm9jZXNzKCksXG4gICAgfSksXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIHByb2Nlc3MgJiYgcHJvY2Vzcy5kZXN0cm95KClcbiAgcHJvY2VzcyA9IHVuZGVmaW5lZFxuICBjb21wbGV0aW9uQmFja2VuZCA9IHVuZGVmaW5lZFxuICBkaXNwb3NhYmxlcyAmJiBkaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgZGlzcG9zYWJsZXMgPSB1bmRlZmluZWRcbiAgdGVtcERpc3Bvc2FibGVzID0gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQ29tcGxldGlvbkJhY2tlbmQoKSB7XG4gIGlmICghcHJvY2VzcykgeyByZXR1cm4gdW5kZWZpbmVkIH1cbiAgaWYgKCFjb21wbGV0aW9uQmFja2VuZCkge1xuICAgIGNvbXBsZXRpb25CYWNrZW5kID0gbmV3IENvbXBsZXRpb25CYWNrZW5kKHByb2Nlc3MsIHVwaVByb21pc2UpXG4gIH1cbiAgcmV0dXJuIGNvbXBsZXRpb25CYWNrZW5kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lVVBJKHNlcnZpY2U6IFVQSS5JVVBJUmVnaXN0cmF0aW9uKSB7XG4gIGlmICghcHJvY2VzcyB8fCAhZGlzcG9zYWJsZXMpIHsgcmV0dXJuIHVuZGVmaW5lZCB9XG4gIHRlbXBEaXNwb3NhYmxlcyAmJiB0ZW1wRGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIHRlbXBEaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxuICBjb25zdCB1cGlDb25zdW1lciA9IG5ldyBVUElDb25zdW1lcihzZXJ2aWNlLCBwcm9jZXNzKVxuICByZXNvbHZlVXBpUHJvbWlzZSh1cGlDb25zdW1lci51cGkpXG4gIGRpc3Bvc2FibGVzLmFkZCh1cGlDb25zdW1lcilcbiAgcmV0dXJuIHVwaUNvbnN1bWVyXG59XG4iXX0=
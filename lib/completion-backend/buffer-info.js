"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const atom_haskell_utils_1 = require("atom-haskell-utils");
class BufferInfo {
    constructor(buffer) {
        this.buffer = buffer;
        this.oldText = '';
        this.oldImports = { name: 'Main', imports: [] };
        this.destroy = () => {
            this.disposables.dispose();
        };
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(this.buffer.onDidDestroy(this.destroy));
    }
    async getImports() {
        const parsed = await this.parse();
        const imports = parsed ? parsed.imports : [];
        if (!imports.some(({ name }) => name === 'Prelude')) {
            imports.push({
                qualified: false,
                hiding: false,
                name: 'Prelude',
                importList: null,
                alias: null,
            });
        }
        return imports;
    }
    async getModuleName() {
        const parsed = await this.parse();
        return parsed.name;
    }
    async parse() {
        const newText = this.buffer.getText();
        if (this.oldText === newText) {
            return this.oldImports;
        }
        else {
            this.oldText = newText;
            this.oldImports = await atom_haskell_utils_1.parseHsModuleImports(this.buffer.getText());
            return this.oldImports;
        }
    }
}
exports.BufferInfo = BufferInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVmZmVyLWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcGxldGlvbi1iYWNrZW5kL2J1ZmZlci1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXNEO0FBQ3RELDJEQUkyQjtBQUkzQjtJQUtFLFlBQTRCLE1BQWtCO1FBQWxCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFIdEMsWUFBTyxHQUFXLEVBQUUsQ0FBQTtRQUNwQixlQUFVLEdBQW1CLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUE7UUFPM0QsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzVCLENBQUMsQ0FBQTtRQU5DLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQzlELENBQUM7SUFNTSxLQUFLLENBQUMsVUFBVTtRQUNyQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUU1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLE1BQU0sRUFBRSxLQUFLO2dCQUNiLElBQUksRUFBRSxTQUFTO2dCQUNmLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixLQUFLLEVBQUUsSUFBSTthQUNaLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFBO0lBQ2hCLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYTtRQUN4QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQTtJQUNwQixDQUFDO0lBRU8sS0FBSyxDQUFDLEtBQUs7UUFDakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7WUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLHlDQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtZQUNuRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQTtRQUN4QixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBOUNELGdDQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIFRleHRCdWZmZXIgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtcbiAgcGFyc2VIc01vZHVsZUltcG9ydHMsXG4gIElNb2R1bGVJbXBvcnRzLFxuICBJSW1wb3J0LFxufSBmcm9tICdhdG9tLWhhc2tlbGwtdXRpbHMnXG5cbmV4cG9ydCB7IElJbXBvcnQgfVxuXG5leHBvcnQgY2xhc3MgQnVmZmVySW5mbyB7XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHJpdmF0ZSBvbGRUZXh0OiBzdHJpbmcgPSAnJ1xuICBwcml2YXRlIG9sZEltcG9ydHM6IElNb2R1bGVJbXBvcnRzID0geyBuYW1lOiAnTWFpbicsIGltcG9ydHM6IFtdIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgYnVmZmVyOiBUZXh0QnVmZmVyKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZCh0aGlzLmJ1ZmZlci5vbkRpZERlc3Ryb3kodGhpcy5kZXN0cm95KSlcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95ID0gKCkgPT4ge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0SW1wb3J0cygpOiBQcm9taXNlPElJbXBvcnRbXT4ge1xuICAgIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHRoaXMucGFyc2UoKVxuICAgIGNvbnN0IGltcG9ydHMgPSBwYXJzZWQgPyBwYXJzZWQuaW1wb3J0cyA6IFtdXG4gICAgLy8gdHNsaW50OmRpc2FibGU6IG5vLW51bGwta2V5d29yZFxuICAgIGlmICghaW1wb3J0cy5zb21lKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gJ1ByZWx1ZGUnKSkge1xuICAgICAgaW1wb3J0cy5wdXNoKHtcbiAgICAgICAgcXVhbGlmaWVkOiBmYWxzZSxcbiAgICAgICAgaGlkaW5nOiBmYWxzZSxcbiAgICAgICAgbmFtZTogJ1ByZWx1ZGUnLFxuICAgICAgICBpbXBvcnRMaXN0OiBudWxsLFxuICAgICAgICBhbGlhczogbnVsbCxcbiAgICAgIH0pXG4gICAgfVxuICAgIC8vIHRzbGludDplbmFibGU6IG5vLW51bGwta2V5d29yZFxuICAgIHJldHVybiBpbXBvcnRzXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0TW9kdWxlTmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHRoaXMucGFyc2UoKVxuICAgIHJldHVybiBwYXJzZWQubmFtZVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwYXJzZSgpOiBQcm9taXNlPElNb2R1bGVJbXBvcnRzPiB7XG4gICAgY29uc3QgbmV3VGV4dCA9IHRoaXMuYnVmZmVyLmdldFRleHQoKVxuICAgIGlmICh0aGlzLm9sZFRleHQgPT09IG5ld1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLm9sZEltcG9ydHNcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbGRUZXh0ID0gbmV3VGV4dFxuICAgICAgdGhpcy5vbGRJbXBvcnRzID0gYXdhaXQgcGFyc2VIc01vZHVsZUltcG9ydHModGhpcy5idWZmZXIuZ2V0VGV4dCgpKVxuICAgICAgcmV0dXJuIHRoaXMub2xkSW1wb3J0c1xuICAgIH1cbiAgfVxufVxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const path_1 = require("path");
const Temp = require("temp");
const FS = require("fs");
const CP = require("child_process");
const os_1 = require("os");
const atom_haskell_utils_1 = require("atom-haskell-utils");
exports.getRootDirFallback = atom_haskell_utils_1.getRootDirFallback;
exports.getRootDir = atom_haskell_utils_1.getRootDir;
exports.isDirectory = atom_haskell_utils_1.isDirectory;
let debuglog = [];
const logKeep = 30000;
function savelog(...messages) {
    const ts = Date.now();
    debuglog.push({
        timestamp: ts,
        messages,
    });
    let ks = 0;
    for (const v of debuglog) {
        if (ts - v.timestamp >= logKeep) {
            break;
        }
        ks++;
    }
    debuglog.splice(0, ks);
}
function joinPath(ds) {
    const set = new Set(ds);
    return Array.from(set).join(path_1.delimiter);
}
exports.EOT = `${os_1.EOL}\x04${os_1.EOL}`;
function debug(...messages) {
    if (atom.config.get('haskell-ghc-mod.debug')) {
        console.log('haskell-ghc-mod debug:', ...messages);
    }
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.debug = debug;
function warn(...messages) {
    console.warn('haskell-ghc-mod warning:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.warn = warn;
function error(...messages) {
    console.error('haskell-ghc-mod error:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.error = error;
function getDebugLog() {
    const ts = Date.now();
    debuglog = debuglog.filter(({ timestamp }) => ts - timestamp < logKeep);
    return debuglog
        .map(({ timestamp, messages }) => `${(timestamp - ts) / 1000}s: ${messages.join(',')}`)
        .join(os_1.EOL);
}
exports.getDebugLog = getDebugLog;
async function execPromise(cmd, args, opts, stdin) {
    return new Promise((resolve, reject) => {
        debug(`Running ${cmd} ${args} with opts = `, opts);
        const child = CP.execFile(cmd, args, opts, (error, stdout, stderr) => {
            if (stderr.trim().length > 0) {
                warn(stderr);
            }
            if (error) {
                warn(`Running ${cmd} ${args} failed with `, error);
                if (stdout) {
                    warn(stdout);
                }
                error.stack = new Error().stack;
                reject(error);
            }
            else {
                debug(`Got response from ${cmd} ${args}`, { stdout, stderr });
                resolve({ stdout, stderr });
            }
        });
        if (stdin) {
            debug(`sending stdin text to ${cmd} ${args}`);
            child.stdin.write(stdin);
        }
    });
}
exports.execPromise = execPromise;
async function getCabalSandbox(rootPath) {
    debug('Looking for cabal sandbox...');
    const sbc = await parseSandboxConfig(`${rootPath}${path_1.sep}cabal.sandbox.config`);
    if (sbc && sbc['install-dirs'] && sbc['install-dirs']['bindir']) {
        const sandbox = sbc['install-dirs']['bindir'];
        debug('Found cabal sandbox: ', sandbox);
        if (atom_haskell_utils_1.isDirectory(sandbox)) {
            return sandbox;
        }
        else {
            warn('Cabal sandbox ', sandbox, ' is not a directory');
            return undefined;
        }
    }
    else {
        warn('No cabal sandbox found');
        return undefined;
    }
}
exports.getCabalSandbox = getCabalSandbox;
async function getStackSandbox(rootPath, apd, env) {
    debug('Looking for stack sandbox...');
    env.PATH = joinPath(apd);
    debug('Running stack with PATH ', env.PATH);
    try {
        const out = await execPromise('stack', [
            '--no-install-ghc',
            'path',
            '--snapshot-install-root',
            '--local-install-root',
            '--bin-path',
        ], {
            encoding: 'utf8',
            cwd: rootPath,
            env,
            timeout: atom.config.get('haskell-ghc-mod.initTimeout') * 1000,
        });
        const lines = out.stdout.split(os_1.EOL);
        const sir = lines
            .filter((l) => l.startsWith('snapshot-install-root: '))[0]
            .slice(23) + `${path_1.sep}bin`;
        const lir = lines.filter((l) => l.startsWith('local-install-root: '))[0].slice(20) +
            `${path_1.sep}bin`;
        const bp = lines
            .filter((l) => l.startsWith('bin-path: '))[0]
            .slice(10)
            .split(path_1.delimiter)
            .filter((p) => !(p === sir || p === lir || apd.includes(p)));
        debug('Found stack sandbox ', lir, sir, ...bp);
        return [lir, sir, ...bp];
    }
    catch (err) {
        warn('No stack sandbox found because ', err);
        return undefined;
    }
}
exports.getStackSandbox = getStackSandbox;
const processOptionsCache = new Map();
async function getProcessOptions(rootPath) {
    if (!rootPath) {
        rootPath = atom_haskell_utils_1.getRootDirFallback(null).getPath();
    }
    const cached = processOptionsCache.get(rootPath);
    if (cached) {
        return cached;
    }
    debug(`getProcessOptions(${rootPath})`);
    const env = Object.assign({}, process.env);
    if (process.platform === 'win32') {
        const PATH = [];
        const capMask = (str, mask) => {
            const a = str.split('');
            for (let i = 0; i < a.length; i++) {
                if (mask & Math.pow(2, i)) {
                    a[i] = a[i].toUpperCase();
                }
            }
            return a.join('');
        };
        for (let m = 0b1111; m >= 0; m--) {
            const vn = capMask('path', m);
            if (env[vn]) {
                PATH.push(env[vn]);
            }
        }
        env.PATH = PATH.join(path_1.delimiter);
    }
    const PATH = env.PATH || '';
    const apd = atom.config
        .get('haskell-ghc-mod.additionalPathDirectories')
        .concat(PATH.split(path_1.delimiter));
    const cabalSandbox = atom.config.get('haskell-ghc-mod.cabalSandbox')
        ? getCabalSandbox(rootPath)
        : Promise.resolve(undefined);
    const stackSandbox = atom.config.get('haskell-ghc-mod.stackSandbox')
        ? getStackSandbox(rootPath, apd, Object.assign({}, env))
        : Promise.resolve(undefined);
    const [cabalSandboxDir, stackSandboxDirs] = await Promise.all([
        cabalSandbox,
        stackSandbox,
    ]);
    const newp = [];
    if (cabalSandboxDir) {
        newp.push(cabalSandboxDir);
    }
    if (stackSandboxDirs) {
        newp.push(...stackSandboxDirs);
    }
    newp.push(...apd);
    env.PATH = joinPath(newp);
    debug(`PATH = ${env.PATH}`);
    const res = {
        cwd: rootPath,
        env,
        encoding: 'utf8',
        maxBuffer: Infinity,
    };
    processOptionsCache.set(rootPath, res);
    return res;
}
exports.getProcessOptions = getProcessOptions;
function getSymbolAtPoint(editor, point) {
    const [scope] = editor
        .scopeDescriptorForBufferPosition(point)
        .getScopesArray()
        .slice(-1);
    if (scope) {
        const range = editor.bufferRangeForScopeAtPosition(scope, point);
        if (range && !range.isEmpty()) {
            const symbol = editor.getTextInBufferRange(range);
            return { scope, range, symbol };
        }
    }
    return undefined;
}
exports.getSymbolAtPoint = getSymbolAtPoint;
function getSymbolInRange(editor, crange) {
    const buffer = editor.getBuffer();
    if (crange.isEmpty()) {
        return getSymbolAtPoint(editor, crange.start);
    }
    else {
        return {
            symbol: buffer.getTextInRange(crange),
            range: crange,
        };
    }
}
exports.getSymbolInRange = getSymbolInRange;
async function withTempFile(contents, uri, gen) {
    const info = await new Promise((resolve, reject) => Temp.open({ prefix: 'haskell-ghc-mod', suffix: path_1.extname(uri || '.hs') }, (err, info2) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(info2);
        }
    }));
    return new Promise((resolve, reject) => FS.write(info.fd, contents, async (err) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(await gen(info.path));
            FS.close(info.fd, () => FS.unlink(info.path, () => {
            }));
        }
    }));
}
exports.withTempFile = withTempFile;
function mkError(name, message) {
    const err = new Error(message);
    err.name = name;
    return err;
}
exports.mkError = mkError;
async function parseSandboxConfig(file) {
    try {
        const sbc = await new Promise((resolve, reject) => FS.readFile(file, { encoding: 'utf-8' }, (err, sbc2) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(sbc2);
            }
        }));
        const vars = {};
        let scope = vars;
        const rv = (v) => {
            for (const k1 of Object.keys(scope)) {
                const v1 = scope[k1];
                if (typeof v1 === 'string') {
                    v = v.split(`$${k1}`).join(v1);
                }
            }
            return v;
        };
        for (const line of sbc.split(/\r?\n|\r/)) {
            if (!line.match(/^\s*--/) && !line.match(/^\s*$/)) {
                const [l] = line.split(/--/);
                const m = l.match(/^\s*([\w-]+):\s*(.*)\s*$/);
                if (m) {
                    const [, name, val] = m;
                    scope[name] = rv(val);
                }
                else {
                    const newscope = {};
                    scope[line] = newscope;
                    scope = newscope;
                }
            }
        }
        return vars;
    }
    catch (err) {
        warn('Reading cabal sandbox config failed with ', err);
        return undefined;
    }
}
exports.parseSandboxConfig = parseSandboxConfig;
function tabShiftForPoint(buffer, point) {
    const line = buffer.lineForRow(point.row);
    const match = line ? line.slice(0, point.column).match(/\t/g) || [] : [];
    const columnShift = 7 * match.length;
    return new atom_1.Point(point.row, point.column + columnShift);
}
exports.tabShiftForPoint = tabShiftForPoint;
function tabShiftForRange(buffer, range) {
    const start = tabShiftForPoint(buffer, range.start);
    const end = tabShiftForPoint(buffer, range.end);
    return new atom_1.Range(start, end);
}
exports.tabShiftForRange = tabShiftForRange;
function tabUnshiftForPoint(buffer, point) {
    const line = buffer.lineForRow(point.row);
    let columnl = 0;
    let columnr = point.column;
    while (columnl < columnr) {
        if (line === undefined || line[columnl] === undefined) {
            break;
        }
        if (line[columnl] === '\t') {
            columnr -= 7;
        }
        columnl += 1;
    }
    return new atom_1.Point(point.row, columnr);
}
exports.tabUnshiftForPoint = tabUnshiftForPoint;
function tabUnshiftForRange(buffer, range) {
    const start = tabUnshiftForPoint(buffer, range.start);
    const end = tabUnshiftForPoint(buffer, range.end);
    return new atom_1.Range(start, end);
}
exports.tabUnshiftForRange = tabUnshiftForRange;
function isUpperCase(ch) {
    return ch.toUpperCase() === ch;
}
exports.isUpperCase = isUpperCase;
function getErrorDetail({ err, runArgs, caps }) {
    return `caps:
${JSON.stringify(caps, undefined, 2)}
Args:
${JSON.stringify(runArgs, undefined, 2)}
message:
${err.message}
log:
${getDebugLog()}`;
}
exports.getErrorDetail = getErrorDetail;
function formatError({ err, runArgs }) {
    if (err.name === 'InteractiveActionTimeout' && runArgs) {
        return `\
Haskell-ghc-mod: ghc-mod \
${runArgs.interactive ? 'interactive ' : ''}command ${runArgs.command} \
timed out. You can try to fix it by raising 'Interactive Action \
Timeout' setting in haskell-ghc-mod settings.`;
    }
    else if (runArgs) {
        return `\
Haskell-ghc-mod: ghc-mod \
${runArgs.interactive ? 'interactive ' : ''}command ${runArgs.command} \
failed with error ${err.name}`;
    }
    else {
        return `There was an unexpected error ${err.name}`;
    }
}
exports.formatError = formatError;
function defaultErrorHandler(args) {
    const { err, runArgs, caps } = args;
    const suppressErrors = runArgs && runArgs.suppressErrors;
    if (!suppressErrors) {
        atom.notifications.addError(formatError(args), {
            detail: getErrorDetail(args),
            stack: err.stack,
            dismissable: true,
        });
    }
    else {
        error(caps, runArgs, err);
    }
}
exports.defaultErrorHandler = defaultErrorHandler;
function warnGHCPackagePath() {
    atom.notifications.addWarning('haskell-ghc-mod: You have GHC_PACKAGE_PATH environment variable set!', {
        dismissable: true,
        detail: `\
This configuration is not supported, and can break arbitrarily. You can try to band-aid it by adding

delete process.env.GHC_PACKAGE_PATH

to your Atom init script (Edit → Init Script...)

You can suppress this warning in haskell-ghc-mod settings.`,
    });
}
exports.warnGHCPackagePath = warnGHCPackagePath;
function filterEnv(env) {
    const fenv = {};
    for (const evar in env) {
        const evarU = evar.toUpperCase();
        if (evarU === 'PATH' ||
            evarU.startsWith('GHC_') ||
            evarU.startsWith('STACK_') ||
            evarU.startsWith('CABAL_')) {
            fenv[evar] = env[evar];
        }
    }
    return fenv;
}
function notifySpawnFail(args) {
    const debugInfo = Object.assign({}, args);
    if (args.opts) {
        const optsclone = Object.assign({}, args.opts);
        optsclone.env = filterEnv(optsclone.env);
        debugInfo.opts = optsclone;
    }
    atom.notifications.addFatalError(`Haskell-ghc-mod: ghc-mod failed to launch.
It is probably missing or misconfigured. ${args.err.code}`, {
        detail: `\
Error was: ${debugInfo.err.name}
${debugInfo.err.message}
Debug information:
${JSON.stringify(debugInfo, undefined, 2)}
Config:
${JSON.stringify(atom.config.get('haskell-ghc-mod'), undefined, 2)}
Environment (filtered):
${JSON.stringify(filterEnv(process.env), undefined, 2)}
`,
        stack: debugInfo.err.stack,
        dismissable: true,
    });
}
exports.notifySpawnFail = notifySpawnFail;
function handleException(_target, _key, desc) {
    return Object.assign({}, desc, { async value(...args) {
            try {
                return await desc.value.call(this, ...args);
            }
            catch (e) {
                debug(e);
                const upi = await this.upi;
                upi.setStatus({
                    status: 'warning',
                    detail: e.toString(),
                });
                return new Promise(() => {
                });
            }
        } });
}
exports.handleException = handleException;
function versAtLeast(vers, b) {
    for (let i = 0; i < b.length; i++) {
        const v = b[i];
        const t = vers[i];
        const vv = t !== undefined ? t : 0;
        if (vv > v) {
            return true;
        }
        else if (vv < v) {
            return false;
        }
    }
    return true;
}
exports.versAtLeast = versAtLeast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTJEO0FBQzNELCtCQUE4QztBQUM5Qyw2QkFBNEI7QUFDNUIseUJBQXdCO0FBQ3hCLG9DQUFtQztBQUNuQywyQkFBd0I7QUFDeEIsMkRBQWdGO0FBT3ZFLDZCQVBBLHVDQUFrQixDQU9BO0FBQUUscUJBUEEsK0JBQVUsQ0FPQTtBQUFFLHNCQVBBLGdDQUFXLENBT0E7QUFFcEQsSUFBSSxRQUFRLEdBQXFELEVBQUUsQ0FBQTtBQUNuRSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUE7QUFFckIsaUJBQWlCLEdBQUcsUUFBa0I7SUFDcEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDWixTQUFTLEVBQUUsRUFBRTtRQUNiLFFBQVE7S0FDVCxDQUFDLENBQUE7SUFDRixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDVixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFBO1FBQ1AsQ0FBQztRQUNELEVBQUUsRUFBRSxDQUFBO0lBQ04sQ0FBQztJQUNELFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ3hCLENBQUM7QUFFRCxrQkFBa0IsRUFBWTtJQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN2QixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO0FBQ3hDLENBQUM7QUFFWSxRQUFB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QUMsQ0FBQztZQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUE7UUFDYixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUE7UUFDZCxDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUE7QUFDYixDQUFDO0FBZkQsa0NBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYW5nZSwgUG9pbnQsIFRleHRCdWZmZXIsIFRleHRFZGl0b3IgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgZGVsaW1pdGVyLCBzZXAsIGV4dG5hbWUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0ICogYXMgVGVtcCBmcm9tICd0ZW1wJ1xuaW1wb3J0ICogYXMgRlMgZnJvbSAnZnMnXG5pbXBvcnQgKiBhcyBDUCBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQgeyBnZXRSb290RGlyRmFsbGJhY2ssIGdldFJvb3REaXIsIGlzRGlyZWN0b3J5IH0gZnJvbSAnYXRvbS1oYXNrZWxsLXV0aWxzJ1xuaW1wb3J0IHsgUnVuT3B0aW9ucywgSUVycm9yQ2FsbGJhY2tBcmdzIH0gZnJvbSAnLi9naGMtbW9kL2doYy1tb2RpLXByb2Nlc3MtcmVhbCdcbmltcG9ydCB7IEdIQ01vZFZlcnMgfSBmcm9tICcuL2doYy1tb2QvZ2hjLW1vZGktcHJvY2Vzcy1yZWFsLWZhY3RvcnknXG5pbXBvcnQgeyBHSENNb2RDYXBzIH0gZnJvbSAnLi9naGMtbW9kL2ludGVyYWN0aXZlLXByb2Nlc3MnXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcblxudHlwZSBFeGVjT3B0cyA9IENQLkV4ZWNGaWxlT3B0aW9uc1dpdGhTdHJpbmdFbmNvZGluZ1xuZXhwb3J0IHsgZ2V0Um9vdERpckZhbGxiYWNrLCBnZXRSb290RGlyLCBpc0RpcmVjdG9yeSwgRXhlY09wdHMgfVxuXG5sZXQgZGVidWdsb2c6IEFycmF5PHsgdGltZXN0YW1wOiBudW1iZXI7IG1lc3NhZ2VzOiBzdHJpbmdbXSB9PiA9IFtdXG5jb25zdCBsb2dLZWVwID0gMzAwMDAgLy8gbXNcblxuZnVuY3Rpb24gc2F2ZWxvZyguLi5tZXNzYWdlczogc3RyaW5nW10pIHtcbiAgY29uc3QgdHMgPSBEYXRlLm5vdygpXG4gIGRlYnVnbG9nLnB1c2goe1xuICAgIHRpbWVzdGFtcDogdHMsXG4gICAgbWVzc2FnZXMsXG4gIH0pXG4gIGxldCBrcyA9IDBcbiAgZm9yIChjb25zdCB2IG9mIGRlYnVnbG9nKSB7XG4gICAgaWYgKHRzIC0gdi50aW1lc3RhbXAgPj0gbG9nS2VlcCkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAga3MrK1xuICB9XG4gIGRlYnVnbG9nLnNwbGljZSgwLCBrcylcbn1cblxuZnVuY3Rpb24gam9pblBhdGgoZHM6IHN0cmluZ1tdKSB7XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQoZHMpXG4gIHJldHVybiBBcnJheS5mcm9tKHNldCkuam9pbihkZWxpbWl0ZXIpXG59XG5cbmV4cG9ydCBjb25zdCBFT1QgPSBgJHtFT0x9XFx4MDQke0VPTH1gXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1ZyguLi5tZXNzYWdlczogYW55W10pIHtcbiAgaWYgKGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmRlYnVnJykpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnaGFza2VsbC1naGMtbW9kIGRlYnVnOicsIC4uLm1lc3NhZ2VzKVxuICB9XG4gIHNhdmVsb2coLi4ubWVzc2FnZXMubWFwKCh2KSA9PiBKU09OLnN0cmluZ2lmeSh2KSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuKC4uLm1lc3NhZ2VzOiBhbnlbXSkge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKCdoYXNrZWxsLWdoYy1tb2Qgd2FybmluZzonLCAuLi5tZXNzYWdlcylcbiAgc2F2ZWxvZyguLi5tZXNzYWdlcy5tYXAoKHYpID0+IEpTT04uc3RyaW5naWZ5KHYpKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yKC4uLm1lc3NhZ2VzOiBhbnlbXSkge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbnNvbGVcbiAgY29uc29sZS5lcnJvcignaGFza2VsbC1naGMtbW9kIGVycm9yOicsIC4uLm1lc3NhZ2VzKVxuICBzYXZlbG9nKC4uLm1lc3NhZ2VzLm1hcCgodikgPT4gSlNPTi5zdHJpbmdpZnkodikpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVidWdMb2coKSB7XG4gIGNvbnN0IHRzID0gRGF0ZS5ub3coKVxuICBkZWJ1Z2xvZyA9IGRlYnVnbG9nLmZpbHRlcigoeyB0aW1lc3RhbXAgfSkgPT4gdHMgLSB0aW1lc3RhbXAgPCBsb2dLZWVwKVxuICByZXR1cm4gZGVidWdsb2dcbiAgICAubWFwKFxuICAgICAgKHsgdGltZXN0YW1wLCBtZXNzYWdlcyB9KSA9PlxuICAgICAgICBgJHsodGltZXN0YW1wIC0gdHMpIC8gMTAwMH1zOiAke21lc3NhZ2VzLmpvaW4oJywnKX1gLFxuICAgIClcbiAgICAuam9pbihFT0wpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjUHJvbWlzZShcbiAgY21kOiBzdHJpbmcsXG4gIGFyZ3M6IHN0cmluZ1tdLFxuICBvcHRzOiBFeGVjT3B0cyxcbiAgc3RkaW4/OiBzdHJpbmcsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHsgc3Rkb3V0OiBzdHJpbmc7IHN0ZGVycjogc3RyaW5nIH0+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBkZWJ1ZyhgUnVubmluZyAke2NtZH0gJHthcmdzfSB3aXRoIG9wdHMgPSBgLCBvcHRzKVxuICAgIGNvbnN0IGNoaWxkID0gQ1AuZXhlY0ZpbGUoXG4gICAgICBjbWQsXG4gICAgICBhcmdzLFxuICAgICAgb3B0cyxcbiAgICAgIChlcnJvciwgc3Rkb3V0OiBzdHJpbmcsIHN0ZGVycjogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChzdGRlcnIudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3YXJuKHN0ZGVycilcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICB3YXJuKGBSdW5uaW5nICR7Y21kfSAke2FyZ3N9IGZhaWxlZCB3aXRoIGAsIGVycm9yKVxuICAgICAgICAgIGlmIChzdGRvdXQpIHtcbiAgICAgICAgICAgIHdhcm4oc3Rkb3V0KVxuICAgICAgICAgIH1cbiAgICAgICAgICBlcnJvci5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrXG4gICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKGBHb3QgcmVzcG9uc2UgZnJvbSAke2NtZH0gJHthcmdzfWAsIHsgc3Rkb3V0LCBzdGRlcnIgfSlcbiAgICAgICAgICByZXNvbHZlKHsgc3Rkb3V0LCBzdGRlcnIgfSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApXG4gICAgaWYgKHN0ZGluKSB7XG4gICAgICBkZWJ1Zyhgc2VuZGluZyBzdGRpbiB0ZXh0IHRvICR7Y21kfSAke2FyZ3N9YClcbiAgICAgIGNoaWxkLnN0ZGluLndyaXRlKHN0ZGluKVxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhYmFsU2FuZGJveChcbiAgcm9vdFBhdGg6IHN0cmluZyxcbik6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gIGRlYnVnKCdMb29raW5nIGZvciBjYWJhbCBzYW5kYm94Li4uJylcbiAgY29uc3Qgc2JjID0gYXdhaXQgcGFyc2VTYW5kYm94Q29uZmlnKGAke3Jvb3RQYXRofSR7c2VwfWNhYmFsLnNhbmRib3guY29uZmlnYClcbiAgLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXG4gIGlmIChzYmMgJiYgc2JjWydpbnN0YWxsLWRpcnMnXSAmJiBzYmNbJ2luc3RhbGwtZGlycyddWydiaW5kaXInXSkge1xuICAgIGNvbnN0IHNhbmRib3g6IHN0cmluZyA9IHNiY1snaW5zdGFsbC1kaXJzJ11bJ2JpbmRpciddXG4gICAgZGVidWcoJ0ZvdW5kIGNhYmFsIHNhbmRib3g6ICcsIHNhbmRib3gpXG4gICAgaWYgKGlzRGlyZWN0b3J5KHNhbmRib3gpKSB7XG4gICAgICByZXR1cm4gc2FuZGJveFxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKCdDYWJhbCBzYW5kYm94ICcsIHNhbmRib3gsICcgaXMgbm90IGEgZGlyZWN0b3J5JylcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2FybignTm8gY2FiYWwgc2FuZGJveCBmb3VuZCcpXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIC8vIHRzbGludDplbmFibGU6IG5vLXN0cmluZy1saXRlcmFsXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTdGFja1NhbmRib3goXG4gIHJvb3RQYXRoOiBzdHJpbmcsXG4gIGFwZDogc3RyaW5nW10sXG4gIGVudjogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfSxcbikge1xuICBkZWJ1ZygnTG9va2luZyBmb3Igc3RhY2sgc2FuZGJveC4uLicpXG4gIGVudi5QQVRIID0gam9pblBhdGgoYXBkKVxuICBkZWJ1ZygnUnVubmluZyBzdGFjayB3aXRoIFBBVEggJywgZW52LlBBVEgpXG4gIHRyeSB7XG4gICAgY29uc3Qgb3V0ID0gYXdhaXQgZXhlY1Byb21pc2UoXG4gICAgICAnc3RhY2snLFxuICAgICAgW1xuICAgICAgICAnLS1uby1pbnN0YWxsLWdoYycsXG4gICAgICAgICdwYXRoJyxcbiAgICAgICAgJy0tc25hcHNob3QtaW5zdGFsbC1yb290JyxcbiAgICAgICAgJy0tbG9jYWwtaW5zdGFsbC1yb290JyxcbiAgICAgICAgJy0tYmluLXBhdGgnLFxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICAgICAgY3dkOiByb290UGF0aCxcbiAgICAgICAgZW52LFxuICAgICAgICB0aW1lb3V0OiBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5pbml0VGltZW91dCcpICogMTAwMCxcbiAgICAgIH0sXG4gICAgKVxuXG4gICAgY29uc3QgbGluZXMgPSBvdXQuc3Rkb3V0LnNwbGl0KEVPTClcbiAgICBjb25zdCBzaXIgPVxuICAgICAgbGluZXNcbiAgICAgICAgLmZpbHRlcigobCkgPT4gbC5zdGFydHNXaXRoKCdzbmFwc2hvdC1pbnN0YWxsLXJvb3Q6ICcpKVswXVxuICAgICAgICAuc2xpY2UoMjMpICsgYCR7c2VwfWJpbmBcbiAgICBjb25zdCBsaXIgPVxuICAgICAgbGluZXMuZmlsdGVyKChsKSA9PiBsLnN0YXJ0c1dpdGgoJ2xvY2FsLWluc3RhbGwtcm9vdDogJykpWzBdLnNsaWNlKDIwKSArXG4gICAgICBgJHtzZXB9YmluYFxuICAgIGNvbnN0IGJwID0gbGluZXNcbiAgICAgIC5maWx0ZXIoKGwpID0+IGwuc3RhcnRzV2l0aCgnYmluLXBhdGg6ICcpKVswXVxuICAgICAgLnNsaWNlKDEwKVxuICAgICAgLnNwbGl0KGRlbGltaXRlcilcbiAgICAgIC5maWx0ZXIoKHApID0+ICEocCA9PT0gc2lyIHx8IHAgPT09IGxpciB8fCBhcGQuaW5jbHVkZXMocCkpKVxuICAgIGRlYnVnKCdGb3VuZCBzdGFjayBzYW5kYm94ICcsIGxpciwgc2lyLCAuLi5icClcbiAgICByZXR1cm4gW2xpciwgc2lyLCAuLi5icF1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgd2FybignTm8gc3RhY2sgc2FuZGJveCBmb3VuZCBiZWNhdXNlICcsIGVycilcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuY29uc3QgcHJvY2Vzc09wdGlvbnNDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBSdW5PcHRpb25zPigpXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcm9jZXNzT3B0aW9ucyhcbiAgcm9vdFBhdGg/OiBzdHJpbmcsXG4pOiBQcm9taXNlPFJ1bk9wdGlvbnM+IHtcbiAgaWYgKCFyb290UGF0aCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tbnVsbC1rZXl3b3JkXG4gICAgcm9vdFBhdGggPSBnZXRSb290RGlyRmFsbGJhY2sobnVsbCkuZ2V0UGF0aCgpXG4gIH1cbiAgLy8gY2FjaGVcbiAgY29uc3QgY2FjaGVkID0gcHJvY2Vzc09wdGlvbnNDYWNoZS5nZXQocm9vdFBhdGgpXG4gIGlmIChjYWNoZWQpIHtcbiAgICByZXR1cm4gY2FjaGVkXG4gIH1cblxuICBkZWJ1ZyhgZ2V0UHJvY2Vzc09wdGlvbnMoJHtyb290UGF0aH0pYClcbiAgY29uc3QgZW52ID0geyAuLi5wcm9jZXNzLmVudiB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiB0b3RhbGl0eS1jaGVja1xuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgIGNvbnN0IFBBVEggPSBbXVxuICAgIGNvbnN0IGNhcE1hc2sgPSAoc3RyOiBzdHJpbmcsIG1hc2s6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgYSA9IHN0ci5zcGxpdCgnJylcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobWFzayAmIE1hdGgucG93KDIsIGkpKSB7XG4gICAgICAgICAgYVtpXSA9IGFbaV0udG9VcHBlckNhc2UoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYS5qb2luKCcnKVxuICAgIH1cbiAgICBmb3IgKGxldCBtID0gMGIxMTExOyBtID49IDA7IG0tLSkge1xuICAgICAgY29uc3Qgdm4gPSBjYXBNYXNrKCdwYXRoJywgbSlcbiAgICAgIGlmIChlbnZbdm5dKSB7XG4gICAgICAgIFBBVEgucHVzaChlbnZbdm5dKVxuICAgICAgfVxuICAgIH1cbiAgICBlbnYuUEFUSCA9IFBBVEguam9pbihkZWxpbWl0ZXIpXG4gIH1cblxuICBjb25zdCBQQVRIID0gZW52LlBBVEggfHwgJydcblxuICBjb25zdCBhcGQgPSBhdG9tLmNvbmZpZ1xuICAgIC5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5hZGRpdGlvbmFsUGF0aERpcmVjdG9yaWVzJylcbiAgICAuY29uY2F0KFBBVEguc3BsaXQoZGVsaW1pdGVyKSlcbiAgY29uc3QgY2FiYWxTYW5kYm94ID0gYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWdoYy1tb2QuY2FiYWxTYW5kYm94JylcbiAgICA/IGdldENhYmFsU2FuZGJveChyb290UGF0aClcbiAgICA6IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpXG4gIGNvbnN0IHN0YWNrU2FuZGJveCA9IGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLnN0YWNrU2FuZGJveCcpXG4gICAgPyBnZXRTdGFja1NhbmRib3gocm9vdFBhdGgsIGFwZCwgeyAuLi5lbnYgfSlcbiAgICA6IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpXG4gIGNvbnN0IFtjYWJhbFNhbmRib3hEaXIsIHN0YWNrU2FuZGJveERpcnNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGNhYmFsU2FuZGJveCxcbiAgICBzdGFja1NhbmRib3gsXG4gIF0pXG4gIGNvbnN0IG5ld3AgPSBbXVxuICBpZiAoY2FiYWxTYW5kYm94RGlyKSB7XG4gICAgbmV3cC5wdXNoKGNhYmFsU2FuZGJveERpcilcbiAgfVxuICBpZiAoc3RhY2tTYW5kYm94RGlycykge1xuICAgIG5ld3AucHVzaCguLi5zdGFja1NhbmRib3hEaXJzKVxuICB9XG4gIG5ld3AucHVzaCguLi5hcGQpXG4gIGVudi5QQVRIID0gam9pblBhdGgobmV3cClcbiAgZGVidWcoYFBBVEggPSAke2Vudi5QQVRIfWApXG4gIGNvbnN0IHJlczogUnVuT3B0aW9ucyA9IHtcbiAgICBjd2Q6IHJvb3RQYXRoLFxuICAgIGVudixcbiAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgIG1heEJ1ZmZlcjogSW5maW5pdHksXG4gIH1cbiAgcHJvY2Vzc09wdGlvbnNDYWNoZS5zZXQocm9vdFBhdGgsIHJlcylcbiAgcmV0dXJuIHJlc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sQXRQb2ludChlZGl0b3I6IFRleHRFZGl0b3IsIHBvaW50OiBQb2ludCkge1xuICBjb25zdCBbc2NvcGVdID0gZWRpdG9yXG4gICAgLnNjb3BlRGVzY3JpcHRvckZvckJ1ZmZlclBvc2l0aW9uKHBvaW50KVxuICAgIC5nZXRTY29wZXNBcnJheSgpXG4gICAgLnNsaWNlKC0xKVxuICBpZiAoc2NvcGUpIHtcbiAgICBjb25zdCByYW5nZSA9IGVkaXRvci5idWZmZXJSYW5nZUZvclNjb3BlQXRQb3NpdGlvbihzY29wZSwgcG9pbnQpXG4gICAgaWYgKHJhbmdlICYmICFyYW5nZS5pc0VtcHR5KCkpIHtcbiAgICAgIGNvbnN0IHN5bWJvbCA9IGVkaXRvci5nZXRUZXh0SW5CdWZmZXJSYW5nZShyYW5nZSlcbiAgICAgIHJldHVybiB7IHNjb3BlLCByYW5nZSwgc3ltYm9sIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSW5SYW5nZShlZGl0b3I6IFRleHRFZGl0b3IsIGNyYW5nZTogUmFuZ2UpIHtcbiAgY29uc3QgYnVmZmVyID0gZWRpdG9yLmdldEJ1ZmZlcigpXG4gIGlmIChjcmFuZ2UuaXNFbXB0eSgpKSB7XG4gICAgcmV0dXJuIGdldFN5bWJvbEF0UG9pbnQoZWRpdG9yLCBjcmFuZ2Uuc3RhcnQpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN5bWJvbDogYnVmZmVyLmdldFRleHRJblJhbmdlKGNyYW5nZSksXG4gICAgICByYW5nZTogY3JhbmdlLFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2l0aFRlbXBGaWxlPFQ+KFxuICBjb250ZW50czogc3RyaW5nLFxuICB1cmk6IHN0cmluZyxcbiAgZ2VuOiAocGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPFQ+LFxuKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IGluZm8gPSBhd2FpdCBuZXcgUHJvbWlzZTxUZW1wLk9wZW5GaWxlPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgIFRlbXAub3BlbihcbiAgICAgIHsgcHJlZml4OiAnaGFza2VsbC1naGMtbW9kJywgc3VmZml4OiBleHRuYW1lKHVyaSB8fCAnLmhzJykgfSxcbiAgICAgIChlcnIsIGluZm8yKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoaW5mbzIpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKSxcbiAgKVxuICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICBGUy53cml0ZShpbmZvLmZkLCBjb250ZW50cywgYXN5bmMgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShhd2FpdCBnZW4oaW5mby5wYXRoKSlcbiAgICAgICAgRlMuY2xvc2UoaW5mby5mZCwgKCkgPT5cbiAgICAgICAgICBGUy51bmxpbmsoaW5mby5wYXRoLCAoKSA9PiB7XG4gICAgICAgICAgICAvKm5vb3AqL1xuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICB9XG4gICAgfSksXG4gIClcbn1cblxuZXhwb3J0IHR5cGUgS25vd25FcnJvck5hbWUgPVxuICB8ICdHSENNb2RTdGRvdXRFcnJvcidcbiAgfCAnSW50ZXJhY3RpdmVBY3Rpb25UaW1lb3V0J1xuICB8ICdHSENNb2RJbnRlcmFjdGl2ZUNyYXNoJ1xuXG5leHBvcnQgZnVuY3Rpb24gbWtFcnJvcihuYW1lOiBLbm93bkVycm9yTmFtZSwgbWVzc2FnZTogc3RyaW5nKSB7XG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKVxuICBlcnIubmFtZSA9IG5hbWVcbiAgcmV0dXJuIGVyclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNhbmRib3hDb25maWdUcmVlIHtcbiAgW2s6IHN0cmluZ106IFNhbmRib3hDb25maWdUcmVlIHwgc3RyaW5nXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZVNhbmRib3hDb25maWcoZmlsZTogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2JjID0gYXdhaXQgbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgRlMucmVhZEZpbGUoZmlsZSwgeyBlbmNvZGluZzogJ3V0Zi04JyB9LCAoZXJyLCBzYmMyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoc2JjMilcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgKVxuICAgIGNvbnN0IHZhcnM6IFNhbmRib3hDb25maWdUcmVlID0ge31cbiAgICBsZXQgc2NvcGUgPSB2YXJzXG4gICAgY29uc3QgcnYgPSAodjogc3RyaW5nKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGsxIG9mIE9iamVjdC5rZXlzKHNjb3BlKSkge1xuICAgICAgICBjb25zdCB2MSA9IHNjb3BlW2sxXVxuICAgICAgICBpZiAodHlwZW9mIHYxID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHYgPSB2LnNwbGl0KGAkJHtrMX1gKS5qb2luKHYxKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdlxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGxpbmUgb2Ygc2JjLnNwbGl0KC9cXHI/XFxufFxcci8pKSB7XG4gICAgICBpZiAoIWxpbmUubWF0Y2goL15cXHMqLS0vKSAmJiAhbGluZS5tYXRjaCgvXlxccyokLykpIHtcbiAgICAgICAgY29uc3QgW2xdID0gbGluZS5zcGxpdCgvLS0vKVxuICAgICAgICBjb25zdCBtID0gbC5tYXRjaCgvXlxccyooW1xcdy1dKyk6XFxzKiguKilcXHMqJC8pXG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgY29uc3QgWywgbmFtZSwgdmFsXSA9IG1cbiAgICAgICAgICBzY29wZVtuYW1lXSA9IHJ2KHZhbClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBuZXdzY29wZSA9IHt9XG4gICAgICAgICAgc2NvcGVbbGluZV0gPSBuZXdzY29wZVxuICAgICAgICAgIHNjb3BlID0gbmV3c2NvcGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFyc1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB3YXJuKCdSZWFkaW5nIGNhYmFsIHNhbmRib3ggY29uZmlnIGZhaWxlZCB3aXRoICcsIGVycilcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuLy8gQSBkaXJ0eSBoYWNrIHRvIHdvcmsgd2l0aCB0YWJzXG5leHBvcnQgZnVuY3Rpb24gdGFiU2hpZnRGb3JQb2ludChidWZmZXI6IFRleHRCdWZmZXIsIHBvaW50OiBQb2ludCkge1xuICBjb25zdCBsaW5lID0gYnVmZmVyLmxpbmVGb3JSb3cocG9pbnQucm93KVxuICBjb25zdCBtYXRjaCA9IGxpbmUgPyBsaW5lLnNsaWNlKDAsIHBvaW50LmNvbHVtbikubWF0Y2goL1xcdC9nKSB8fCBbXSA6IFtdXG4gIGNvbnN0IGNvbHVtblNoaWZ0ID0gNyAqIG1hdGNoLmxlbmd0aFxuICByZXR1cm4gbmV3IFBvaW50KHBvaW50LnJvdywgcG9pbnQuY29sdW1uICsgY29sdW1uU2hpZnQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWJTaGlmdEZvclJhbmdlKGJ1ZmZlcjogVGV4dEJ1ZmZlciwgcmFuZ2U6IFJhbmdlKSB7XG4gIGNvbnN0IHN0YXJ0ID0gdGFiU2hpZnRGb3JQb2ludChidWZmZXIsIHJhbmdlLnN0YXJ0KVxuICBjb25zdCBlbmQgPSB0YWJTaGlmdEZvclBvaW50KGJ1ZmZlciwgcmFuZ2UuZW5kKVxuICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWJVbnNoaWZ0Rm9yUG9pbnQoYnVmZmVyOiBUZXh0QnVmZmVyLCBwb2ludDogUG9pbnQpIHtcbiAgY29uc3QgbGluZSA9IGJ1ZmZlci5saW5lRm9yUm93KHBvaW50LnJvdylcbiAgbGV0IGNvbHVtbmwgPSAwXG4gIGxldCBjb2x1bW5yID0gcG9pbnQuY29sdW1uXG4gIHdoaWxlIChjb2x1bW5sIDwgY29sdW1ucikge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogc3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuICAgIGlmIChsaW5lID09PSB1bmRlZmluZWQgfHwgbGluZVtjb2x1bW5sXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobGluZVtjb2x1bW5sXSA9PT0gJ1xcdCcpIHtcbiAgICAgIGNvbHVtbnIgLT0gN1xuICAgIH1cbiAgICBjb2x1bW5sICs9IDFcbiAgfVxuICByZXR1cm4gbmV3IFBvaW50KHBvaW50LnJvdywgY29sdW1ucilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhYlVuc2hpZnRGb3JSYW5nZShidWZmZXI6IFRleHRCdWZmZXIsIHJhbmdlOiBSYW5nZSkge1xuICBjb25zdCBzdGFydCA9IHRhYlVuc2hpZnRGb3JQb2ludChidWZmZXIsIHJhbmdlLnN0YXJ0KVxuICBjb25zdCBlbmQgPSB0YWJVbnNoaWZ0Rm9yUG9pbnQoYnVmZmVyLCByYW5nZS5lbmQpXG4gIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQsIGVuZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBwZXJDYXNlKGNoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNoLnRvVXBwZXJDYXNlKCkgPT09IGNoXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvckRldGFpbCh7IGVyciwgcnVuQXJncywgY2FwcyB9OiBJRXJyb3JDYWxsYmFja0FyZ3MpIHtcbiAgcmV0dXJuIGBjYXBzOlxuJHtKU09OLnN0cmluZ2lmeShjYXBzLCB1bmRlZmluZWQsIDIpfVxuQXJnczpcbiR7SlNPTi5zdHJpbmdpZnkocnVuQXJncywgdW5kZWZpbmVkLCAyKX1cbm1lc3NhZ2U6XG4ke2Vyci5tZXNzYWdlfVxubG9nOlxuJHtnZXREZWJ1Z0xvZygpfWBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEVycm9yKHsgZXJyLCBydW5BcmdzIH06IElFcnJvckNhbGxiYWNrQXJncykge1xuICBpZiAoZXJyLm5hbWUgPT09ICdJbnRlcmFjdGl2ZUFjdGlvblRpbWVvdXQnICYmIHJ1bkFyZ3MpIHtcbiAgICByZXR1cm4gYFxcXG5IYXNrZWxsLWdoYy1tb2Q6IGdoYy1tb2QgXFxcbiR7cnVuQXJncy5pbnRlcmFjdGl2ZSA/ICdpbnRlcmFjdGl2ZSAnIDogJyd9Y29tbWFuZCAke3J1bkFyZ3MuY29tbWFuZH0gXFxcbnRpbWVkIG91dC4gWW91IGNhbiB0cnkgdG8gZml4IGl0IGJ5IHJhaXNpbmcgJ0ludGVyYWN0aXZlIEFjdGlvbiBcXFxuVGltZW91dCcgc2V0dGluZyBpbiBoYXNrZWxsLWdoYy1tb2Qgc2V0dGluZ3MuYFxuICB9IGVsc2UgaWYgKHJ1bkFyZ3MpIHtcbiAgICByZXR1cm4gYFxcXG5IYXNrZWxsLWdoYy1tb2Q6IGdoYy1tb2QgXFxcbiR7cnVuQXJncy5pbnRlcmFjdGl2ZSA/ICdpbnRlcmFjdGl2ZSAnIDogJyd9Y29tbWFuZCAke3J1bkFyZ3MuY29tbWFuZH0gXFxcbmZhaWxlZCB3aXRoIGVycm9yICR7ZXJyLm5hbWV9YFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBgVGhlcmUgd2FzIGFuIHVuZXhwZWN0ZWQgZXJyb3IgJHtlcnIubmFtZX1gXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoYXJnczogSUVycm9yQ2FsbGJhY2tBcmdzKSB7XG4gIGNvbnN0IHsgZXJyLCBydW5BcmdzLCBjYXBzIH0gPSBhcmdzXG4gIGNvbnN0IHN1cHByZXNzRXJyb3JzID0gcnVuQXJncyAmJiBydW5BcmdzLnN1cHByZXNzRXJyb3JzXG5cbiAgaWYgKCFzdXBwcmVzc0Vycm9ycykge1xuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihmb3JtYXRFcnJvcihhcmdzKSwge1xuICAgICAgZGV0YWlsOiBnZXRFcnJvckRldGFpbChhcmdzKSxcbiAgICAgIHN0YWNrOiBlcnIuc3RhY2ssXG4gICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGVycm9yKGNhcHMsIHJ1bkFyZ3MsIGVycilcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FybkdIQ1BhY2thZ2VQYXRoKCkge1xuICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyhcbiAgICAnaGFza2VsbC1naGMtbW9kOiBZb3UgaGF2ZSBHSENfUEFDS0FHRV9QQVRIIGVudmlyb25tZW50IHZhcmlhYmxlIHNldCEnLFxuICAgIHtcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgZGV0YWlsOiBgXFxcblRoaXMgY29uZmlndXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkLCBhbmQgY2FuIGJyZWFrIGFyYml0cmFyaWx5LiBZb3UgY2FuIHRyeSB0byBiYW5kLWFpZCBpdCBieSBhZGRpbmdcblxuZGVsZXRlIHByb2Nlc3MuZW52LkdIQ19QQUNLQUdFX1BBVEhcblxudG8geW91ciBBdG9tIGluaXQgc2NyaXB0IChFZGl0IOKGkiBJbml0IFNjcmlwdC4uLilcblxuWW91IGNhbiBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgaW4gaGFza2VsbC1naGMtbW9kIHNldHRpbmdzLmAsXG4gICAgfSxcbiAgKVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJFbnYoZW52OiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfSkge1xuICBjb25zdCBmZW52ID0ge31cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBmb3JpblxuICBmb3IgKGNvbnN0IGV2YXIgaW4gZW52KSB7XG4gICAgY29uc3QgZXZhclUgPSBldmFyLnRvVXBwZXJDYXNlKClcbiAgICBpZiAoXG4gICAgICBldmFyVSA9PT0gJ1BBVEgnIHx8XG4gICAgICBldmFyVS5zdGFydHNXaXRoKCdHSENfJykgfHxcbiAgICAgIGV2YXJVLnN0YXJ0c1dpdGgoJ1NUQUNLXycpIHx8XG4gICAgICBldmFyVS5zdGFydHNXaXRoKCdDQUJBTF8nKVxuICAgICkge1xuICAgICAgZmVudltldmFyXSA9IGVudltldmFyXVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmVudlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwYXduRmFpbEFyZ3Mge1xuICBkaXI6IHN0cmluZ1xuICBlcnI6IEVycm9yICYgeyBjb2RlPzogYW55IH1cbiAgb3B0cz86IFJ1bk9wdGlvbnNcbiAgdmVycz86IEdIQ01vZFZlcnNcbiAgY2Fwcz86IEdIQ01vZENhcHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeVNwYXduRmFpbChhcmdzOiBSZWFkb25seTxTcGF3bkZhaWxBcmdzPikge1xuICBjb25zdCBkZWJ1Z0luZm86IFNwYXduRmFpbEFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKVxuICBpZiAoYXJncy5vcHRzKSB7XG4gICAgY29uc3Qgb3B0c2Nsb25lOiBSdW5PcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgYXJncy5vcHRzKVxuICAgIG9wdHNjbG9uZS5lbnYgPSBmaWx0ZXJFbnYob3B0c2Nsb25lLmVudilcbiAgICBkZWJ1Z0luZm8ub3B0cyA9IG9wdHNjbG9uZVxuICB9XG4gIGF0b20ubm90aWZpY2F0aW9ucy5hZGRGYXRhbEVycm9yKFxuICAgIGBIYXNrZWxsLWdoYy1tb2Q6IGdoYy1tb2QgZmFpbGVkIHRvIGxhdW5jaC5cbkl0IGlzIHByb2JhYmx5IG1pc3Npbmcgb3IgbWlzY29uZmlndXJlZC4gJHthcmdzLmVyci5jb2RlfWAsXG4gICAge1xuICAgICAgZGV0YWlsOiBgXFxcbkVycm9yIHdhczogJHtkZWJ1Z0luZm8uZXJyLm5hbWV9XG4ke2RlYnVnSW5mby5lcnIubWVzc2FnZX1cbkRlYnVnIGluZm9ybWF0aW9uOlxuJHtKU09OLnN0cmluZ2lmeShkZWJ1Z0luZm8sIHVuZGVmaW5lZCwgMil9XG5Db25maWc6XG4ke0pTT04uc3RyaW5naWZ5KGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kJyksIHVuZGVmaW5lZCwgMil9XG5FbnZpcm9ubWVudCAoZmlsdGVyZWQpOlxuJHtKU09OLnN0cmluZ2lmeShmaWx0ZXJFbnYocHJvY2Vzcy5lbnYpLCB1bmRlZmluZWQsIDIpfVxuYCxcbiAgICAgIHN0YWNrOiBkZWJ1Z0luZm8uZXJyLnN0YWNrLFxuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgfSxcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXhjZXB0aW9uPFQ+KFxuICBfdGFyZ2V0OiB7IHVwaTogVVBJLklVUElJbnN0YW5jZSB8IFByb21pc2U8VVBJLklVUElJbnN0YW5jZT4gfSxcbiAgX2tleTogc3RyaW5nLFxuICBkZXNjOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjwoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8VD4+LFxuKTogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPFQ+PiB7XG4gIHJldHVybiB7XG4gICAgLi4uZGVzYyxcbiAgICBhc3luYyB2YWx1ZSguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuIGF3YWl0IGRlc2MudmFsdWUhLmNhbGwodGhpcywgLi4uYXJncylcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZGVidWcoZSlcbiAgICAgICAgY29uc3QgdXBpOiBVUEkuSVVQSUluc3RhbmNlID0gYXdhaXQgKHRoaXMgYXMgYW55KS51cGlcbiAgICAgICAgdXBpLnNldFN0YXR1cyh7XG4gICAgICAgICAgc3RhdHVzOiAnd2FybmluZycsXG4gICAgICAgICAgZGV0YWlsOiBlLnRvU3RyaW5nKCksXG4gICAgICAgIH0pXG4gICAgICAgIC8vIFRPRE86IHJldHVybmluZyBhIHByb21pc2UgdGhhdCBuZXZlciByZXNvbHZlcy4uLiB1Z2x5LCBidXQgd29ya3M/XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7XG4gICAgICAgICAgLyogbm9vcCAqL1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZlcnNBdExlYXN0KFxuICB2ZXJzOiB7IFtrZXk6IG51bWJlcl06IG51bWJlciB8IHVuZGVmaW5lZCB9LFxuICBiOiBudW1iZXJbXSxcbikge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB2ID0gYltpXVxuICAgIGNvbnN0IHQgPSB2ZXJzW2ldXG4gICAgY29uc3QgdnYgPSB0ICE9PSB1bmRlZmluZWQgPyB0IDogMFxuICAgIGlmICh2diA+IHYpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmICh2diA8IHYpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuIl19
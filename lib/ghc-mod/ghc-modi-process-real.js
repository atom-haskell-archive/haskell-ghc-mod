"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const interactive_process_1 = require("./interactive-process");
const Util = require("../util");
const { debug, withTempFile, EOT } = Util;
const os_1 = require("os");
const _ = require("underscore");
class GhcModiProcessReal {
    constructor(caps, rootDir, options) {
        this.caps = caps;
        this.rootDir = rootDir;
        this.options = options;
        this.runModCmd = async ({ ghcModOptions, command, text, uri, args, }) => {
            const modPath = atom.config.get('haskell-ghc-mod.ghcModPath');
            let stdin;
            const cmd = [...ghcModOptions];
            if (text && uri) {
                cmd.push('--map-file', uri);
                stdin = `${text}${EOT}`;
            }
            cmd.push(command);
            if (uri) {
                cmd.push(uri);
            }
            cmd.push(...args);
            const { stdout, stderr } = await Util.execPromise(modPath, cmd, this.options, stdin);
            return {
                stdout: stdout.split(os_1.EOL).slice(0, -1),
                stderr: stderr.split(os_1.EOL),
            };
        };
        this.runModiCmd = async (o) => {
            const { ghcModOptions, command, text, args } = o;
            let { uri } = o;
            debug(`Trying to run ghc-modi in ${this.rootDir.getPath()}`);
            const proc = await this.spawnProcess(ghcModOptions);
            if (!proc) {
                debug('Failed. Falling back to ghc-mod');
                return this.runModCmd(o);
            }
            debug('Success. Resuming...');
            if (uri && !this.caps.quoteArgs) {
                uri = this.rootDir.relativize(uri);
            }
            try {
                if (uri && text) {
                    await proc.interact('map-file', [uri], text);
                }
                const res = await proc.interact(command, uri ? [uri].concat(args) : args);
                if (uri && text) {
                    await proc.interact('unmap-file', [uri]);
                }
                return res;
            }
            finally {
                if (uri && text) {
                    await proc.interact('unmap-file', [uri]);
                }
            }
        };
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
    }
    getCaps() {
        return this.caps;
    }
    async run(runArgs) {
        let { interactive, dashArgs, args, suppressErrors, ghcOptions, ghcModOptions } = runArgs;
        const { command, text, uri } = runArgs;
        if (!args) {
            args = [];
        }
        if (!dashArgs) {
            dashArgs = [];
        }
        if (!suppressErrors) {
            suppressErrors = false;
        }
        if (!ghcOptions) {
            ghcOptions = [];
        }
        if (!ghcModOptions) {
            ghcModOptions = [];
        }
        ghcModOptions = ghcModOptions.concat(...ghcOptions.map((opt) => ['--ghc-option', opt]));
        if (atom.config.get('haskell-ghc-mod.lowMemorySystem')) {
            interactive = atom.config.get('haskell-ghc-mod.enableGhcModi');
        }
        if (this.caps.optparse) {
            args = dashArgs.concat(['--']).concat(args);
        }
        else {
            args = dashArgs.concat(args);
        }
        const fun = interactive ? this.runModiCmd : this.runModCmd;
        try {
            let res;
            if (uri && text && !this.caps.fileMap) {
                const myOpts = { ghcModOptions, command, args };
                res = withTempFile(text, uri, async (tempuri) => {
                    const { stdout, stderr } = await fun(Object.assign({}, myOpts, { uri: tempuri }));
                    return {
                        stdout: stdout.map((line) => line.split(tempuri).join(uri)),
                        stderr: stderr.map((line) => line.split(tempuri).join(uri)),
                    };
                });
            }
            else {
                res = fun({ ghcModOptions, command, text, uri, args });
            }
            const { stdout, stderr } = await res;
            if (stderr.join('').length) {
                this.emitter.emit('warning', stderr.join('\n'));
            }
            return stdout.map((line) => line.replace(/\0/g, '\n'));
        }
        catch (err) {
            debug(err);
            this.emitter.emit('error', { runArgs, err, caps: this.caps });
            return [];
        }
    }
    killProcess() {
        debug(`Killing ghc-modi process for ${this.rootDir.getPath()}`);
        this.proc && this.proc.kill();
    }
    destroy() {
        debug('GhcModiProcessBase destroying');
        this.killProcess();
        this.emitter.emit('did-destroy');
        this.disposables.dispose();
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    onWarning(callback) {
        return this.emitter.on('warning', callback);
    }
    onError(callback) {
        return this.emitter.on('error', callback);
    }
    async spawnProcess(ghcModOptions) {
        if (!atom.config.get('haskell-ghc-mod.enableGhcModi')) {
            return undefined;
        }
        debug(`Checking for ghc-modi in ${this.rootDir.getPath()}`);
        if (this.proc) {
            if (!_.isEqual(this.ghcModOptions, ghcModOptions)) {
                debug(`Found running ghc-modi instance for ${this.rootDir.getPath()}, but ghcModOptions don't match. Old: `, this.ghcModOptions, ' new: ', ghcModOptions);
                await this.proc.kill();
                return this.spawnProcess(ghcModOptions);
            }
            debug(`Found running ghc-modi instance for ${this.rootDir.getPath()}`);
            return this.proc;
        }
        debug(`Spawning new ghc-modi instance for ${this.rootDir.getPath()} with`, this.options);
        const modPath = atom.config.get('haskell-ghc-mod.ghcModPath');
        this.ghcModOptions = ghcModOptions;
        this.proc = new interactive_process_1.InteractiveProcess(modPath, ghcModOptions.concat(['legacy-interactive']), this.options, this.caps);
        this.proc.onceExit((code) => {
            debug(`ghc-modi for ${this.rootDir.getPath()} ended with ${code}`);
            this.proc = undefined;
        });
        return this.proc;
    }
}
exports.GhcModiProcessReal = GhcModiProcessReal;
//# sourceMappingURL=data:application/json;base64,
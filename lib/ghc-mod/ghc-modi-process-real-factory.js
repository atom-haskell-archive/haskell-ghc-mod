"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Util = require("../util");
const ghc_modi_process_real_1 = require("./ghc-modi-process-real");
const build_stack_1 = require("./build-stack");
async function createGhcModiProcessReal(rootDir, upi) {
    let opts;
    let vers;
    let caps;
    let builder;
    try {
        if (upi && atom.config.get('haskell-ghc-mod.builderManagement')) {
            builder = await upi.getOthersConfigParam('ide-haskell-cabal', 'builder');
        }
        const bn = builder && builder.name;
        Util.debug(`Using builder ${bn}`);
        opts = await Util.getProcessOptions(rootDir.getPath());
        const versP = getVersion(opts);
        const bopts = opts;
        const shouldBuild = await checkComp(bopts, versP, bn).catch(async (e) => {
            if (e.code === 'ENOENT') {
                return askBuild(bn, `Atom couldn't find ghc-mod.`);
            }
            else {
                atom.notifications.addError('Failed to check compiler versions', {
                    detail: e.toString(),
                    stack: e.stack,
                    dismissable: true,
                });
                return false;
            }
        });
        if (shouldBuild) {
            const success = await build_stack_1.buildStack(bopts, upi);
            if (success) {
                return createGhcModiProcessReal(rootDir, upi);
            }
            else {
                atom.notifications.addWarning('Building ghc-mod failed, continuing as-is');
            }
        }
        vers = await versP;
        caps = getCaps(vers);
        return new ghc_modi_process_real_1.GhcModiProcessReal(caps, rootDir, opts);
    }
    catch (e) {
        const err = e;
        Util.notifySpawnFail({ dir: rootDir.getPath(), err, opts, vers, caps });
        throw e;
    }
}
exports.createGhcModiProcessReal = createGhcModiProcessReal;
function getCaps({ vers }) {
    const caps = {
        version: vers,
        fileMap: false,
        quoteArgs: false,
        optparse: false,
        typeConstraints: false,
        browseParents: false,
        interactiveCaseSplit: false,
        importedFrom: false,
        browseMain: false,
    };
    const atLeast = (x) => Util.versAtLeast(vers, x);
    const exact = (b) => {
        for (let i = 0; i < b.length; i++) {
            const v = b[i];
            if (vers[i] !== v) {
                return false;
            }
        }
        return true;
    };
    if (!atLeast([5, 4])) {
        atom.notifications.addError(`\
Haskell-ghc-mod: ghc-mod < 5.4 is not supported. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (exact([5, 4])) {
        atom.notifications.addWarning(`\
Haskell-ghc-mod: ghc-mod 5.4.* is deprecated. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (atLeast([5, 4])) {
        caps.fileMap = true;
    }
    if (atLeast([5, 5])) {
        caps.quoteArgs = true;
        caps.optparse = true;
    }
    if (atLeast([5, 6])) {
        caps.typeConstraints = true;
        caps.browseParents = true;
        caps.interactiveCaseSplit = true;
    }
    if (atom.config.get('haskell-ghc-mod.experimental')) {
        caps.importedFrom = true;
    }
    Util.debug(JSON.stringify(caps));
    return caps;
}
async function getVersion(opts) {
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const cmd = atom.config.get('haskell-ghc-mod.ghcModPath');
    const { stdout } = await Util.execPromise(cmd, ['version'], Object.assign({ timeout }, opts));
    const versRaw = /^ghc-mod version (\d+)\.(\d+)\.(\d+)(?:\.(\d+))?/.exec(stdout);
    if (!versRaw) {
        throw new Error("Couldn't get ghc-mod version");
    }
    const vers = versRaw.slice(1, 5).map((i) => parseInt(i, 10));
    const compRaw = /GHC (.+)$/.exec(stdout.trim());
    if (!compRaw) {
        throw new Error("Couldn't get ghc version");
    }
    const comp = compRaw[1];
    Util.debug(`Ghc-mod ${vers} built with ${comp}`);
    return { vers, comp };
}
async function checkComp(opts, versP, builder) {
    const { comp } = await versP;
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const tryWarn = async (cmd, args) => {
        try {
            return (await Util.execPromise(cmd, args, Object.assign({ timeout }, opts))).stdout.trim();
        }
        catch (error) {
            Util.warn(error);
            return undefined;
        }
    };
    const [stackghc, pathghc] = await Promise.all([
        tryWarn('stack', ['--no-install-ghc', 'ghc', '--', '--numeric-version']),
        tryWarn('ghc', ['--numeric-version']),
    ]);
    Util.debug(`Stack GHC version ${stackghc}`);
    Util.debug(`Path GHC version ${pathghc}`);
    const warnStack = ['stack', undefined].includes(builder);
    const warnCabal = ['cabal', 'none', undefined].includes(builder);
    let shouldBuild = false;
    if (pathghc && pathghc !== comp && warnCabal) {
        shouldBuild =
            shouldBuild ||
                (await askBuild(builder, `\
GHC version in your PATH '${pathghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Cabal or Plain projects`));
    }
    if (stackghc && stackghc !== comp && warnStack) {
        shouldBuild =
            shouldBuild ||
                (await askBuild(builder, `\
GHC version in your Stack '${stackghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Stack projects.`));
    }
    return shouldBuild;
}
async function askBuild(builder, msg) {
    let buttons;
    return new Promise((resolve) => {
        let notif;
        if (builder === 'stack') {
            buttons = [
                {
                    className: 'icon icon-zap',
                    text: 'Build ghc-mod',
                    onDidClick() {
                        resolve(true);
                        notif && notif.dismiss();
                    },
                },
                {
                    className: 'icon icon-x',
                    text: 'No thanks',
                    onDidClick() {
                        resolve(false);
                        notif && notif.dismiss();
                    },
                },
            ];
        }
        const warn = `${msg} ${buttons ? 'Would you like to attempt building ghc-mod?' : ''}`;
        notif = atom.notifications.addWarning(warn, {
            dismissable: builder !== undefined,
            buttons,
        });
        Util.warn(msg);
        if (buttons) {
            const disp = notif.onDidDismiss(() => {
                disp.dispose();
                resolve(false);
            });
        }
        else {
            resolve(false);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjLW1vZGktcHJvY2Vzcy1yZWFsLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2hjLW1vZC9naGMtbW9kaS1wcm9jZXNzLXJlYWwtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdDQUErQjtBQUMvQixtRUFBd0U7QUFHeEUsK0NBQTBDO0FBSW5DLEtBQUssVUFBVSx3QkFBd0IsQ0FDNUMsT0FBa0IsRUFDbEIsR0FBNkI7SUFFN0IsSUFBSSxJQUE0QixDQUFBO0lBQ2hDLElBQUksSUFBNEIsQ0FBQTtJQUNoQyxJQUFJLElBQTRCLENBQUE7SUFDaEMsSUFBSSxPQUFxQyxDQUFBO0lBQ3pDLElBQUk7UUFDRixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxFQUFFO1lBRS9ELE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxvQkFBb0IsQ0FDdEMsbUJBQW1CLEVBQ25CLFNBQVMsQ0FDVixDQUFBO1NBQ0Y7UUFDRCxNQUFNLEVBQUUsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQTtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRWpDLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUN0RCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBRWxCLE1BQU0sV0FBVyxHQUFHLE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUN6RCxLQUFLLEVBQUUsQ0FBTSxFQUFFLEVBQUU7WUFDZixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUN2QixPQUFP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LEtBQUssQ0FBQyxDQUFBO1lBQ2hCLENBQUMsQ0FBQyxDQUFBO1NBQ0g7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNmO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR0hDTW9kQ2FwcyB9IGZyb20gJy4vaW50ZXJhY3RpdmUtcHJvY2VzcydcbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi4vdXRpbCdcbmltcG9ydCB7IEdoY01vZGlQcm9jZXNzUmVhbCwgUnVuT3B0aW9ucyB9IGZyb20gJy4vZ2hjLW1vZGktcHJvY2Vzcy1yZWFsJ1xuaW1wb3J0IHsgRGlyZWN0b3J5LCBOb3RpZmljYXRpb24gfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgSVVQSUluc3RhbmNlIH0gZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCB7IGJ1aWxkU3RhY2sgfSBmcm9tICcuL2J1aWxkLXN0YWNrJ1xuXG5leHBvcnQgdHlwZSBHSENNb2RWZXJzID0geyB2ZXJzOiBudW1iZXJbXTsgY29tcDogc3RyaW5nIH1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUdoY01vZGlQcm9jZXNzUmVhbChcbiAgcm9vdERpcjogRGlyZWN0b3J5LFxuICB1cGk6IElVUElJbnN0YW5jZSB8IHVuZGVmaW5lZCxcbik6IFByb21pc2U8R2hjTW9kaVByb2Nlc3NSZWFsPiB7XG4gIGxldCBvcHRzOiBSdW5PcHRpb25zIHwgdW5kZWZpbmVkXG4gIGxldCB2ZXJzOiBHSENNb2RWZXJzIHwgdW5kZWZpbmVkXG4gIGxldCBjYXBzOiBHSENNb2RDYXBzIHwgdW5kZWZpbmVkXG4gIGxldCBidWlsZGVyOiB7IG5hbWU6IHN0cmluZyB9IHwgdW5kZWZpbmVkXG4gIHRyeSB7XG4gICAgaWYgKHVwaSAmJiBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5idWlsZGVyTWFuYWdlbWVudCcpKSB7XG4gICAgICAvLyBUT0RPOiB0aGlzIGlzIHVzZWQgdHdpY2UsIHRoZSBzZWNvbmQgdGltZSBpbiBnaGMtbW9kL2luZGV4LnRzLCBzaG91bGQgcHJvYmFibHkgZml4IHRoYXRcbiAgICAgIGJ1aWxkZXIgPSBhd2FpdCB1cGkuZ2V0T3RoZXJzQ29uZmlnUGFyYW08eyBuYW1lOiBzdHJpbmcgfT4oXG4gICAgICAgICdpZGUtaGFza2VsbC1jYWJhbCcsXG4gICAgICAgICdidWlsZGVyJyxcbiAgICAgIClcbiAgICB9XG4gICAgY29uc3QgYm4gPSBidWlsZGVyICYmIGJ1aWxkZXIubmFtZVxuICAgIFV0aWwuZGVidWcoYFVzaW5nIGJ1aWxkZXIgJHtibn1gKVxuICAgIC8vIFRPRE86IFNob3VsZCBwcmVmZXIgc3RhY2sgc2FuZGJveCB3aGVuIHVzaW5nIHN0YWNrIGFuZCBjYWJhbCBzYW5iZG94IHdoZW4gdXNpbmcgY2FiYWwhXG4gICAgb3B0cyA9IGF3YWl0IFV0aWwuZ2V0UHJvY2Vzc09wdGlvbnMocm9vdERpci5nZXRQYXRoKCkpXG4gICAgY29uc3QgdmVyc1AgPSBnZXRWZXJzaW9uKG9wdHMpXG4gICAgY29uc3QgYm9wdHMgPSBvcHRzXG4gICAgLy8gVE9ETzogdGhpcyBnZXRzIGNoZWNrZWQgb25seSBvbmNlLCBzaG91bGQgY2hlY2sgb24gZ2hjLW1vZCByZXN0YXJ0P1xuICAgIGNvbnN0IHNob3VsZEJ1aWxkID0gYXdhaXQgY2hlY2tDb21wKGJvcHRzLCB2ZXJzUCwgYm4pLmNhdGNoKFxuICAgICAgYXN5bmMgKGU6IGFueSkgPT4ge1xuICAgICAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICAgIHJldHVybiBhc2tCdWlsZChibiwgYEF0b20gY291bGRuJ3QgZmluZCBnaGMtbW9kLmApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKCdGYWlsZWQgdG8gY2hlY2sgY29tcGlsZXIgdmVyc2lvbnMnLCB7XG4gICAgICAgICAgICBkZXRhaWw6IGUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHN0YWNrOiBlLnN0YWNrLFxuICAgICAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgICAgfSlcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApXG4gICAgaWYgKHNob3VsZEJ1aWxkKSB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgYnVpbGRTdGFjayhib3B0cywgdXBpKVxuICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUdoY01vZGlQcm9jZXNzUmVhbChyb290RGlyLCB1cGkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyhcbiAgICAgICAgICAnQnVpbGRpbmcgZ2hjLW1vZCBmYWlsZWQsIGNvbnRpbnVpbmcgYXMtaXMnLFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICAgIHZlcnMgPSBhd2FpdCB2ZXJzUFxuICAgIGNhcHMgPSBnZXRDYXBzKHZlcnMpXG4gICAgcmV0dXJuIG5ldyBHaGNNb2RpUHJvY2Vzc1JlYWwoY2Fwcywgcm9vdERpciwgb3B0cylcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnN0IGVycjogRXJyb3IgJiB7IGNvZGU6IGFueSB9ID0gZVxuICAgIFV0aWwubm90aWZ5U3Bhd25GYWlsKHsgZGlyOiByb290RGlyLmdldFBhdGgoKSwgZXJyLCBvcHRzLCB2ZXJzLCBjYXBzIH0pXG4gICAgdGhyb3cgZVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldENhcHMoeyB2ZXJzIH06IHsgdmVyczogbnVtYmVyW10gfSk6IEdIQ01vZENhcHMge1xuICBjb25zdCBjYXBzOiBHSENNb2RDYXBzID0ge1xuICAgIHZlcnNpb246IHZlcnMsXG4gICAgZmlsZU1hcDogZmFsc2UsXG4gICAgcXVvdGVBcmdzOiBmYWxzZSxcbiAgICBvcHRwYXJzZTogZmFsc2UsXG4gICAgdHlwZUNvbnN0cmFpbnRzOiBmYWxzZSxcbiAgICBicm93c2VQYXJlbnRzOiBmYWxzZSxcbiAgICBpbnRlcmFjdGl2ZUNhc2VTcGxpdDogZmFsc2UsXG4gICAgaW1wb3J0ZWRGcm9tOiBmYWxzZSxcbiAgICBicm93c2VNYWluOiBmYWxzZSxcbiAgfVxuXG4gIGNvbnN0IGF0TGVhc3QgPSAoeDogbnVtYmVyW10pID0+IFV0aWwudmVyc0F0TGVhc3QodmVycywgeClcblxuICBjb25zdCBleGFjdCA9IChiOiBudW1iZXJbXSkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdiA9IGJbaV1cbiAgICAgIGlmICh2ZXJzW2ldICE9PSB2KSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKCFhdExlYXN0KFs1LCA0XSkpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoXG4gICAgICBgXFxcbkhhc2tlbGwtZ2hjLW1vZDogZ2hjLW1vZCA8IDUuNCBpcyBub3Qgc3VwcG9ydGVkLiBcXFxuVXNlIGF0IHlvdXIgb3duIHJpc2sgb3IgdXBkYXRlIHlvdXIgZ2hjLW1vZCBpbnN0YWxsYXRpb25gLFxuICAgICAgeyBkaXNtaXNzYWJsZTogdHJ1ZSB9LFxuICAgIClcbiAgfVxuICBpZiAoZXhhY3QoWzUsIDRdKSkge1xuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKFxuICAgICAgYFxcXG5IYXNrZWxsLWdoYy1tb2Q6IGdoYy1tb2QgNS40LiogaXMgZGVwcmVjYXRlZC4gXFxcblVzZSBhdCB5b3VyIG93biByaXNrIG9yIHVwZGF0ZSB5b3VyIGdoYy1tb2QgaW5zdGFsbGF0aW9uYCxcbiAgICAgIHsgZGlzbWlzc2FibGU6IHRydWUgfSxcbiAgICApXG4gIH1cbiAgaWYgKGF0TGVhc3QoWzUsIDRdKSkge1xuICAgIGNhcHMuZmlsZU1hcCA9IHRydWVcbiAgfVxuICBpZiAoYXRMZWFzdChbNSwgNV0pKSB7XG4gICAgY2Fwcy5xdW90ZUFyZ3MgPSB0cnVlXG4gICAgY2Fwcy5vcHRwYXJzZSA9IHRydWVcbiAgfVxuICBpZiAoYXRMZWFzdChbNSwgNl0pKSB7XG4gICAgY2Fwcy50eXBlQ29uc3RyYWludHMgPSB0cnVlXG4gICAgY2Fwcy5icm93c2VQYXJlbnRzID0gdHJ1ZVxuICAgIGNhcHMuaW50ZXJhY3RpdmVDYXNlU3BsaXQgPSB0cnVlXG4gIH1cbiAgaWYgKGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmV4cGVyaW1lbnRhbCcpKSB7XG4gICAgY2Fwcy5pbXBvcnRlZEZyb20gPSB0cnVlXG4gIH1cbiAgVXRpbC5kZWJ1ZyhKU09OLnN0cmluZ2lmeShjYXBzKSlcbiAgcmV0dXJuIGNhcHNcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbihvcHRzOiBVdGlsLkV4ZWNPcHRzKTogUHJvbWlzZTxHSENNb2RWZXJzPiB7XG4gIGNvbnN0IHRpbWVvdXQgPSBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5pbml0VGltZW91dCcpICogMTAwMFxuICBjb25zdCBjbWQgPSBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5naGNNb2RQYXRoJylcbiAgY29uc3QgeyBzdGRvdXQgfSA9IGF3YWl0IFV0aWwuZXhlY1Byb21pc2UoY21kLCBbJ3ZlcnNpb24nXSwge1xuICAgIHRpbWVvdXQsXG4gICAgLi4ub3B0cyxcbiAgfSlcbiAgY29uc3QgdmVyc1JhdyA9IC9eZ2hjLW1vZCB2ZXJzaW9uIChcXGQrKVxcLihcXGQrKVxcLihcXGQrKSg/OlxcLihcXGQrKSk/Ly5leGVjKFxuICAgIHN0ZG91dCxcbiAgKVxuICBpZiAoIXZlcnNSYXcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBnZXQgZ2hjLW1vZCB2ZXJzaW9uXCIpXG4gIH1cbiAgY29uc3QgdmVycyA9IHZlcnNSYXcuc2xpY2UoMSwgNSkubWFwKChpKSA9PiBwYXJzZUludChpLCAxMCkpXG4gIGNvbnN0IGNvbXBSYXcgPSAvR0hDICguKykkLy5leGVjKHN0ZG91dC50cmltKCkpXG4gIGlmICghY29tcFJhdykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGdldCBnaGMgdmVyc2lvblwiKVxuICB9XG4gIGNvbnN0IGNvbXAgPSBjb21wUmF3WzFdXG4gIFV0aWwuZGVidWcoYEdoYy1tb2QgJHt2ZXJzfSBidWlsdCB3aXRoICR7Y29tcH1gKVxuICByZXR1cm4geyB2ZXJzLCBjb21wIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tDb21wKFxuICBvcHRzOiBVdGlsLkV4ZWNPcHRzLFxuICB2ZXJzUDogUHJvbWlzZTxHSENNb2RWZXJzPixcbiAgYnVpbGRlcjogc3RyaW5nIHwgdW5kZWZpbmVkLFxuKSB7XG4gIGNvbnN0IHsgY29tcCB9ID0gYXdhaXQgdmVyc1BcbiAgY29uc3QgdGltZW91dCA9IGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmluaXRUaW1lb3V0JykgKiAxMDAwXG4gIGNvbnN0IHRyeVdhcm4gPSBhc3luYyAoY21kOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoYXdhaXQgVXRpbC5leGVjUHJvbWlzZShjbWQsIGFyZ3MsIHtcbiAgICAgICAgdGltZW91dCxcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgIH0pKS5zdGRvdXQudHJpbSgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIFV0aWwud2FybihlcnJvcilcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH1cbiAgY29uc3QgW3N0YWNrZ2hjLCBwYXRoZ2hjXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICB0cnlXYXJuKCdzdGFjaycsIFsnLS1uby1pbnN0YWxsLWdoYycsICdnaGMnLCAnLS0nLCAnLS1udW1lcmljLXZlcnNpb24nXSksXG4gICAgdHJ5V2FybignZ2hjJywgWyctLW51bWVyaWMtdmVyc2lvbiddKSxcbiAgXSlcbiAgVXRpbC5kZWJ1ZyhgU3RhY2sgR0hDIHZlcnNpb24gJHtzdGFja2doY31gKVxuICBVdGlsLmRlYnVnKGBQYXRoIEdIQyB2ZXJzaW9uICR7cGF0aGdoY31gKVxuICBjb25zdCB3YXJuU3RhY2sgPSBbJ3N0YWNrJywgdW5kZWZpbmVkXS5pbmNsdWRlcyhidWlsZGVyKVxuICBjb25zdCB3YXJuQ2FiYWwgPSBbJ2NhYmFsJywgJ25vbmUnLCB1bmRlZmluZWRdLmluY2x1ZGVzKGJ1aWxkZXIpXG4gIGxldCBzaG91bGRCdWlsZCA9IGZhbHNlXG4gIGlmIChwYXRoZ2hjICYmIHBhdGhnaGMgIT09IGNvbXAgJiYgd2FybkNhYmFsKSB7XG4gICAgc2hvdWxkQnVpbGQgPVxuICAgICAgc2hvdWxkQnVpbGQgfHxcbiAgICAgIChhd2FpdCBhc2tCdWlsZChcbiAgICAgICAgYnVpbGRlcixcbiAgICAgICAgYFxcXG5HSEMgdmVyc2lvbiBpbiB5b3VyIFBBVEggJyR7cGF0aGdoY30nIGRvZXNuJ3QgbWF0Y2ggd2l0aCBcXFxuR0hDIHZlcnNpb24gdXNlZCB0byBidWlsZCBnaGMtbW9kICcke2NvbXB9Jy4gVGhpcyBjYW4gbGVhZCB0byBcXFxucHJvYmxlbXMgd2hlbiB1c2luZyBDYWJhbCBvciBQbGFpbiBwcm9qZWN0c2AsXG4gICAgICApKVxuICB9XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIHN0YWNrIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBpZiAoc3RhY2tnaGMgJiYgc3RhY2tnaGMgIT09IGNvbXAgJiYgd2FyblN0YWNrKSB7XG4gICAgc2hvdWxkQnVpbGQgPVxuICAgICAgc2hvdWxkQnVpbGQgfHxcbiAgICAgIChhd2FpdCBhc2tCdWlsZChcbiAgICAgICAgYnVpbGRlcixcbiAgICAgICAgYFxcXG5HSEMgdmVyc2lvbiBpbiB5b3VyIFN0YWNrICcke3N0YWNrZ2hjfScgZG9lc24ndCBtYXRjaCB3aXRoIFxcXG5HSEMgdmVyc2lvbiB1c2VkIHRvIGJ1aWxkIGdoYy1tb2QgJyR7Y29tcH0nLiBUaGlzIGNhbiBsZWFkIHRvIFxcXG5wcm9ibGVtcyB3aGVuIHVzaW5nIFN0YWNrIHByb2plY3RzLmAsXG4gICAgICApKVxuICB9XG4gIHJldHVybiBzaG91bGRCdWlsZFxufVxuXG5hc3luYyBmdW5jdGlvbiBhc2tCdWlsZChidWlsZGVyOiBzdHJpbmcgfCB1bmRlZmluZWQsIG1zZzogc3RyaW5nKSB7XG4gIGxldCBidXR0b25zOlxuICAgIHwgQXJyYXk8e1xuICAgICAgICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgICAgICAgdGV4dD86IHN0cmluZ1xuICAgICAgICBvbkRpZENsaWNrPyhldmVudDogTW91c2VFdmVudCk6IHZvaWRcbiAgICAgIH0+XG4gICAgfCB1bmRlZmluZWRcblxuICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUpID0+IHtcbiAgICBsZXQgbm90aWY6IE5vdGlmaWNhdGlvblxuICAgIGlmIChidWlsZGVyID09PSAnc3RhY2snKSB7XG4gICAgICAvLyBvZmZlciB0byBidWlsZCBnaGMtbW9kXG4gICAgICBidXR0b25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnaWNvbiBpY29uLXphcCcsXG4gICAgICAgICAgdGV4dDogJ0J1aWxkIGdoYy1tb2QnLFxuICAgICAgICAgIG9uRGlkQ2xpY2soKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpXG4gICAgICAgICAgICBub3RpZiAmJiBub3RpZi5kaXNtaXNzKClcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnaWNvbiBpY29uLXgnLFxuICAgICAgICAgIHRleHQ6ICdObyB0aGFua3MnLFxuICAgICAgICAgIG9uRGlkQ2xpY2soKSB7XG4gICAgICAgICAgICByZXNvbHZlKGZhbHNlKVxuICAgICAgICAgICAgbm90aWYgJiYgbm90aWYuZGlzbWlzcygpXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9XG4gICAgY29uc3Qgd2FybiA9IGAke21zZ30gJHtcbiAgICAgIGJ1dHRvbnMgPyAnV291bGQgeW91IGxpa2UgdG8gYXR0ZW1wdCBidWlsZGluZyBnaGMtbW9kPycgOiAnJ1xuICAgIH1gXG4gICAgbm90aWYgPSBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyh3YXJuLCB7XG4gICAgICBkaXNtaXNzYWJsZTogYnVpbGRlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgYnV0dG9ucyxcbiAgICB9KVxuICAgIFV0aWwud2Fybihtc2cpXG4gICAgaWYgKGJ1dHRvbnMpIHtcbiAgICAgIGNvbnN0IGRpc3AgPSBub3RpZi5vbkRpZERpc21pc3MoKCkgPT4ge1xuICAgICAgICBkaXNwLmRpc3Bvc2UoKVxuICAgICAgICByZXNvbHZlKGZhbHNlKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZShmYWxzZSlcbiAgICB9XG4gIH0pXG59XG4iXX0=
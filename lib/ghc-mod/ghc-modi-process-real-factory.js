"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Util = require("../util");
const ghc_modi_process_real_1 = require("./ghc-modi-process-real");
const build_stack_1 = require("./build-stack");
async function createGhcModiProcessReal(rootDir, upi) {
    let opts;
    let vers;
    let caps;
    let builder;
    try {
        if (upi && atom.config.get('haskell-ghc-mod.builderManagement')) {
            builder = await upi.getOthersConfigParam('ide-haskell-cabal', 'builder');
        }
        const bn = builder && builder.name;
        Util.debug(`Using builder ${bn}`);
        opts = await Util.getProcessOptions(rootDir.getPath());
        const versP = getVersion(opts);
        const bopts = opts;
        const shouldBuild = await checkComp(bopts, versP, bn).catch(async (e) => {
            if (e.code === 'ENOENT') {
                return askBuild(bn, `Atom couldn't find ghc-mod.`);
            }
            else {
                atom.notifications.addError('Failed to check compiler versions', {
                    detail: e.toString(),
                    stack: e.stack,
                    dismissable: true,
                });
                return false;
            }
        });
        if (shouldBuild) {
            const success = await build_stack_1.buildStack(bopts, upi);
            if (success) {
                return createGhcModiProcessReal(rootDir, upi);
            }
            else {
                atom.notifications.addWarning('Building ghc-mod failed, continuing as-is');
            }
        }
        vers = await versP;
        caps = getCaps(vers);
        return new ghc_modi_process_real_1.GhcModiProcessReal(caps, rootDir, opts);
    }
    catch (e) {
        const err = e;
        Util.notifySpawnFail({ dir: rootDir.getPath(), err, opts, vers, caps });
        throw e;
    }
}
exports.createGhcModiProcessReal = createGhcModiProcessReal;
function getCaps({ vers }) {
    const caps = {
        version: vers,
        fileMap: false,
        quoteArgs: false,
        optparse: false,
        typeConstraints: false,
        browseParents: false,
        interactiveCaseSplit: false,
        importedFrom: false,
        browseMain: false,
    };
    const atLeast = (x) => Util.versAtLeast(vers, x);
    const exact = (b) => {
        for (let i = 0; i < b.length; i++) {
            const v = b[i];
            if (vers[i] !== v) {
                return false;
            }
        }
        return true;
    };
    if (!atLeast([5, 4])) {
        atom.notifications.addError(`\
Haskell-ghc-mod: ghc-mod < 5.4 is not supported. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (exact([5, 4])) {
        atom.notifications.addWarning(`\
Haskell-ghc-mod: ghc-mod 5.4.* is deprecated. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (atLeast([5, 4])) {
        caps.fileMap = true;
    }
    if (atLeast([5, 5])) {
        caps.quoteArgs = true;
        caps.optparse = true;
    }
    if (atLeast([5, 6])) {
        caps.typeConstraints = true;
        caps.browseParents = true;
        caps.interactiveCaseSplit = true;
    }
    if (atom.config.get('haskell-ghc-mod.experimental')) {
        caps.importedFrom = true;
    }
    Util.debug(JSON.stringify(caps));
    return caps;
}
async function getVersion(opts) {
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const cmd = atom.config.get('haskell-ghc-mod.ghcModPath');
    const { stdout } = await Util.execPromise(cmd, ['version'], Object.assign({ timeout }, opts));
    const versRaw = /^ghc-mod version (\d+)\.(\d+)\.(\d+)(?:\.(\d+))?/.exec(stdout);
    if (!versRaw) {
        throw new Error("Couldn't get ghc-mod version");
    }
    const vers = versRaw.slice(1, 5).map((i) => parseInt(i, 10));
    const compRaw = /GHC (.+)$/.exec(stdout.trim());
    if (!compRaw) {
        throw new Error("Couldn't get ghc version");
    }
    const comp = compRaw[1];
    Util.debug(`Ghc-mod ${vers} built with ${comp}`);
    return { vers, comp };
}
async function checkComp(opts, versP, builder) {
    const { comp } = await versP;
    const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
    const tryWarn = async (cmd, args) => {
        try {
            return (await Util.execPromise(cmd, args, Object.assign({ timeout }, opts))).stdout.trim();
        }
        catch (error) {
            Util.warn(error);
            return undefined;
        }
    };
    const [stackghc, pathghc] = await Promise.all([
        tryWarn('stack', ['ghc', '--', '--numeric-version']),
        tryWarn('ghc', ['--numeric-version']),
    ]);
    Util.debug(`Stack GHC version ${stackghc}`);
    Util.debug(`Path GHC version ${pathghc}`);
    const warnStack = ['stack', undefined].includes(builder);
    const warnCabal = ['cabal', 'none', undefined].includes(builder);
    let shouldBuild = false;
    if (pathghc && (pathghc !== comp) && warnCabal) {
        shouldBuild = shouldBuild || await askBuild(builder, `\
GHC version in your PATH '${pathghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Cabal or Plain projects`);
    }
    if (stackghc && (stackghc !== comp) && warnStack) {
        shouldBuild = shouldBuild || await askBuild(builder, `\
GHC version in your Stack '${stackghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Stack projects.`);
    }
    return shouldBuild;
}
async function askBuild(builder, msg) {
    let buttons;
    return new Promise((resolve) => {
        let notif;
        if (builder === 'stack') {
            buttons = [{
                    className: 'icon icon-zap',
                    text: 'Build ghc-mod',
                    onDidClick() {
                        resolve(true);
                        notif && notif.dismiss();
                    },
                }, {
                    className: 'icon icon-x',
                    text: 'No thanks',
                    onDidClick() {
                        resolve(false);
                        notif && notif.dismiss();
                    },
                }];
        }
        const warn = `${msg} ${buttons ? 'Would you like to attempt building ghc-mod?' : ''}`;
        notif = atom.notifications.addWarning(warn, {
            dismissable: builder !== undefined,
            buttons,
        });
        Util.warn(msg);
        if (buttons) {
            const disp = notif.onDidDismiss(() => {
                disp.dispose();
                resolve(false);
            });
        }
        else {
            resolve(false);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,
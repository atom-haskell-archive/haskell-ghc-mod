"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
let resolveUpiPromise;
const upiPromise = new Promise((resolve) => resolveUpiPromise = resolve);
var config_1 = require("./config");
exports.config = config_1.config;
function activate(state) {
    process = new ghc_mod_1.GhcModiProcess();
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess(),
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return undefined;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process, upiPromise);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return undefined;
    }
    tempDisposables && tempDisposables.dispose();
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    resolveUpiPromise(upiConsumer.upi);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUEwQztBQUMxQywrQkFBMEM7QUFDMUMsNkRBQXdEO0FBQ3hELGlEQUE0QztBQUM1QyxpQ0FBNEM7QUFFNUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUNwRCxJQUFJLGlCQUFnRCxDQUFBO0FBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxDQUFtQixDQUFDLE9BQU8sS0FBSyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsQ0FBQTtBQUUxRixtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYsa0JBQXlCLEtBQVk7SUFDbkMsT0FBTyxHQUFHLElBQUksd0JBQWMsRUFBRSxDQUFBO0lBQzlCLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDdkMsZUFBZSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhDLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsMEJBQW1CLENBQUMsRUFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQWM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzlELENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLGtDQUFrQyxFQUFFLE1BQU0sT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7S0FDM0UsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBbEJELDRCQWtCQztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ25CLGlCQUFpQixHQUFHLFNBQVMsQ0FBQTtJQUM3QixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7QUFDekIsQ0FBQztBQU5ELGdDQU1DO0FBRUQ7SUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsU0FBUyxDQUFBO0lBQUMsQ0FBQztJQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUN2QixpQkFBaUIsR0FBRyxJQUFJLHNDQUFpQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFBO0FBQzFCLENBQUM7QUFORCw0REFNQztBQUVELG9CQUEyQixPQUE2QjtJQUN0RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsU0FBUyxDQUFBO0lBQUMsQ0FBQztJQUNsRCxlQUFlLElBQUksZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVDLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDckQsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2xDLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDNUIsTUFBTSxDQUFDLFdBQVcsQ0FBQTtBQUNwQixDQUFDO0FBUEQsZ0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaGNNb2RpUHJvY2VzcyB9IGZyb20gJy4vZ2hjLW1vZCdcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgQ29tcGxldGlvbkJhY2tlbmQgfSBmcm9tICcuL2NvbXBsZXRpb24tYmFja2VuZCdcbmltcG9ydCB7IFVQSUNvbnN1bWVyIH0gZnJvbSAnLi91cGktY29uc3VtZXInXG5pbXBvcnQgeyBkZWZhdWx0RXJyb3JIYW5kbGVyIH0gZnJvbSAnLi91dGlsJ1xuXG5sZXQgcHJvY2VzczogR2hjTW9kaVByb2Nlc3MgfCB1bmRlZmluZWRcbmxldCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHRlbXBEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IGNvbXBsZXRpb25CYWNrZW5kOiBDb21wbGV0aW9uQmFja2VuZCB8IHVuZGVmaW5lZFxubGV0IHJlc29sdmVVcGlQcm9taXNlOiAodjogVVBJLklVUElJbnN0YW5jZSkgPT4gdm9pZFxuY29uc3QgdXBpUHJvbWlzZSA9IG5ldyBQcm9taXNlPFVQSS5JVVBJSW5zdGFuY2U+KChyZXNvbHZlKSA9PiByZXNvbHZlVXBpUHJvbWlzZSA9IHJlc29sdmUpXG5cbmV4cG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoc3RhdGU6IG5ldmVyKSB7XG4gIHByb2Nlc3MgPSBuZXcgR2hjTW9kaVByb2Nlc3MoKVxuICBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgdGVtcERpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBkaXNwb3NhYmxlcy5hZGQodGVtcERpc3Bvc2FibGVzKVxuXG4gIHRlbXBEaXNwb3NhYmxlcy5hZGQoXG4gICAgcHJvY2Vzcy5vbkVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIpLFxuICAgIHByb2Nlc3Mub25XYXJuaW5nKChkZXRhaWw6IHN0cmluZykgPT4ge1xuICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoJ2doYy1tb2Qgd2FybmluZycsIHsgZGV0YWlsIH0pXG4gICAgfSksXG4gIClcblxuICBkaXNwb3NhYmxlcy5hZGQoXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgJ2hhc2tlbGwtZ2hjLW1vZDpzaHV0ZG93bi1iYWNrZW5kJzogKCkgPT4gcHJvY2VzcyAmJiBwcm9jZXNzLmtpbGxQcm9jZXNzKCksXG4gICAgfSksXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIHByb2Nlc3MgJiYgcHJvY2Vzcy5kZXN0cm95KClcbiAgcHJvY2VzcyA9IHVuZGVmaW5lZFxuICBjb21wbGV0aW9uQmFja2VuZCA9IHVuZGVmaW5lZFxuICBkaXNwb3NhYmxlcyAmJiBkaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgZGlzcG9zYWJsZXMgPSB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVDb21wbGV0aW9uQmFja2VuZCgpIHtcbiAgaWYgKCFwcm9jZXNzKSB7IHJldHVybiB1bmRlZmluZWQgfVxuICBpZiAoIWNvbXBsZXRpb25CYWNrZW5kKSB7XG4gICAgY29tcGxldGlvbkJhY2tlbmQgPSBuZXcgQ29tcGxldGlvbkJhY2tlbmQocHJvY2VzcywgdXBpUHJvbWlzZSlcbiAgfVxuICByZXR1cm4gY29tcGxldGlvbkJhY2tlbmRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVVUEkoc2VydmljZTogVVBJLklVUElSZWdpc3RyYXRpb24pIHtcbiAgaWYgKCFwcm9jZXNzIHx8ICFkaXNwb3NhYmxlcykgeyByZXR1cm4gdW5kZWZpbmVkIH1cbiAgdGVtcERpc3Bvc2FibGVzICYmIHRlbXBEaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgY29uc3QgdXBpQ29uc3VtZXIgPSBuZXcgVVBJQ29uc3VtZXIoc2VydmljZSwgcHJvY2VzcylcbiAgcmVzb2x2ZVVwaVByb21pc2UodXBpQ29uc3VtZXIudXBpKVxuICBkaXNwb3NhYmxlcy5hZGQodXBpQ29uc3VtZXIpXG4gIHJldHVybiB1cGlDb25zdW1lclxufVxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
let resolveUpiPromise;
const upiPromise = new Promise((resolve) => resolveUpiPromise = resolve);
var config_1 = require("./config");
exports.config = config_1.config;
function activate(state) {
    process = new ghc_mod_1.GhcModiProcess();
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess()
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process, upiPromise);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return;
    }
    tempDisposables && tempDisposables.dispose();
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    resolveUpiPromise(upiConsumer.upi);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF3QztBQUN4QywrQkFBd0M7QUFDeEMsNkRBQXNEO0FBQ3RELGlEQUEwQztBQUMxQyxpQ0FBMEM7QUFFMUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUNwRCxJQUFJLGlCQUFnRCxDQUFBO0FBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxDQUFtQixDQUFDLE9BQU8sS0FBSyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsQ0FBQTtBQUUxRixtQ0FBK0I7QUFBdkIsMEJBQUEsTUFBTSxDQUFBO0FBRWQsa0JBQTBCLEtBQVk7SUFDcEMsT0FBTyxHQUFHLElBQUksd0JBQWMsRUFBRSxDQUFBO0lBQzlCLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDdkMsZUFBZSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhDLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsMEJBQW1CLENBQUMsRUFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQWM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFBO0lBQzVELENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLGtDQUFrQyxFQUFFLE1BQU0sT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7S0FDM0UsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBbEJELDRCQWtCQztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ25CLGlCQUFpQixHQUFHLFNBQVMsQ0FBQTtJQUM3QixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7QUFDekIsQ0FBQztBQU5ELGdDQU1DO0FBRUQ7SUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLGlCQUFpQixHQUFHLElBQUksc0NBQWlCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUE7QUFDMUIsQ0FBQztBQU5ELDREQU1DO0FBRUQsb0JBQTRCLE9BQTZCO0lBQ3ZELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUFDLE1BQU0sQ0FBQTtJQUFDLENBQUM7SUFDeEMsZUFBZSxJQUFJLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QyxNQUFNLFdBQVcsR0FBRyxJQUFJLDBCQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3JELGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUE7QUFDcEIsQ0FBQztBQVBELGdDQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHaGNNb2RpUHJvY2Vzc30gZnJvbSAnLi9naGMtbW9kJ1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtDb21wbGV0aW9uQmFja2VuZH0gZnJvbSAnLi9jb21wbGV0aW9uLWJhY2tlbmQnXG5pbXBvcnQge1VQSUNvbnN1bWVyfSBmcm9tICcuL3VwaS1jb25zdW1lcidcbmltcG9ydCB7ZGVmYXVsdEVycm9ySGFuZGxlcn0gZnJvbSAnLi91dGlsJ1xuXG5sZXQgcHJvY2VzczogR2hjTW9kaVByb2Nlc3MgfCB1bmRlZmluZWRcbmxldCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHRlbXBEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IGNvbXBsZXRpb25CYWNrZW5kOiBDb21wbGV0aW9uQmFja2VuZCB8IHVuZGVmaW5lZFxubGV0IHJlc29sdmVVcGlQcm9taXNlOiAodjogVVBJLklVUElJbnN0YW5jZSkgPT4gdm9pZFxuY29uc3QgdXBpUHJvbWlzZSA9IG5ldyBQcm9taXNlPFVQSS5JVVBJSW5zdGFuY2U+KChyZXNvbHZlKSA9PiByZXNvbHZlVXBpUHJvbWlzZSA9IHJlc29sdmUpXG5cbmV4cG9ydCB7Y29uZmlnfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlIChzdGF0ZTogbmV2ZXIpIHtcbiAgcHJvY2VzcyA9IG5ldyBHaGNNb2RpUHJvY2VzcygpXG4gIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICB0ZW1wRGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIGRpc3Bvc2FibGVzLmFkZCh0ZW1wRGlzcG9zYWJsZXMpXG5cbiAgdGVtcERpc3Bvc2FibGVzLmFkZChcbiAgICBwcm9jZXNzLm9uRXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlciksXG4gICAgcHJvY2Vzcy5vbldhcm5pbmcoKGRldGFpbDogc3RyaW5nKSA9PiB7XG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZygnZ2hjLW1vZCB3YXJuaW5nJywge2RldGFpbH0pXG4gICAgfSksXG4gIClcblxuICBkaXNwb3NhYmxlcy5hZGQoXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgJ2hhc2tlbGwtZ2hjLW1vZDpzaHV0ZG93bi1iYWNrZW5kJzogKCkgPT4gcHJvY2VzcyAmJiBwcm9jZXNzLmtpbGxQcm9jZXNzKClcbiAgICB9KVxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlICgpIHtcbiAgcHJvY2VzcyAmJiBwcm9jZXNzLmRlc3Ryb3koKVxuICBwcm9jZXNzID0gdW5kZWZpbmVkXG4gIGNvbXBsZXRpb25CYWNrZW5kID0gdW5kZWZpbmVkXG4gIGRpc3Bvc2FibGVzICYmIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICBkaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUNvbXBsZXRpb25CYWNrZW5kICgpIHtcbiAgaWYgKCEgcHJvY2VzcykgeyByZXR1cm4gfVxuICBpZiAoISBjb21wbGV0aW9uQmFja2VuZCkge1xuICAgIGNvbXBsZXRpb25CYWNrZW5kID0gbmV3IENvbXBsZXRpb25CYWNrZW5kKHByb2Nlc3MsIHVwaVByb21pc2UpXG4gIH1cbiAgcmV0dXJuIGNvbXBsZXRpb25CYWNrZW5kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lVVBJIChzZXJ2aWNlOiBVUEkuSVVQSVJlZ2lzdHJhdGlvbikge1xuICBpZiAoIXByb2Nlc3MgfHwgIWRpc3Bvc2FibGVzKSB7IHJldHVybiB9XG4gIHRlbXBEaXNwb3NhYmxlcyAmJiB0ZW1wRGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIGNvbnN0IHVwaUNvbnN1bWVyID0gbmV3IFVQSUNvbnN1bWVyKHNlcnZpY2UsIHByb2Nlc3MpXG4gIHJlc29sdmVVcGlQcm9taXNlKHVwaUNvbnN1bWVyLnVwaSlcbiAgZGlzcG9zYWJsZXMuYWRkKHVwaUNvbnN1bWVyKVxuICByZXR1cm4gdXBpQ29uc3VtZXJcbn1cbiJdfQ==
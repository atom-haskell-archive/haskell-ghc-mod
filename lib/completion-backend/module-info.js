"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const Util = require("../util");
class ModuleInfo {
    constructor(name, process, rootDir) {
        this.name = name;
        this.process = process;
        this.rootDir = rootDir;
        this.invalidateInterval = 30 * 60 * 1000;
        this.destroy = () => {
            Util.debug(`${this.name} destroyed`);
            clearTimeout(this.timeout);
            this.emitter.emit('did-destroy');
            this.disposables.dispose();
        };
        Util.debug(`${this.name} created`);
        this.symbols = [];
        this.disposables = new atom_1.CompositeDisposable();
        this.bufferSet = new WeakSet();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.updatePromise = this.update(rootDir);
        this.timeout = setTimeout(this.destroy, this.invalidateInterval);
        this.disposables.add(this.process.onDidDestroy(this.destroy));
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    async setBuffer(bufferInfo) {
        const name = await bufferInfo.getModuleName();
        if (name !== this.name) {
            return;
        }
        if (this.bufferSet.has(bufferInfo.buffer)) {
            return;
        }
        this.bufferSet.add(bufferInfo.buffer);
        Util.debug(`${this.name} buffer is set`);
        const disposables = new atom_1.CompositeDisposable();
        disposables.add(bufferInfo.buffer.onDidSave(() => {
            Util.debug(`${this.name} did-save triggered`);
            this.updatePromise = this.update(this.rootDir);
        }));
        disposables.add(bufferInfo.buffer.onDidDestroy(() => {
            disposables.dispose();
            this.bufferSet.delete(bufferInfo.buffer);
            this.disposables.remove(disposables);
        }));
        this.disposables.add(disposables);
    }
    async select(importDesc, symbolTypes, skipQualified = false) {
        await this.updatePromise;
        clearTimeout(this.timeout);
        this.timeout = setTimeout(this.destroy, this.invalidateInterval);
        let symbols = this.symbols;
        if (importDesc.importList) {
            const il = importDesc.importList;
            symbols = symbols.filter((s) => {
                const inImportList = il.includes(s.name);
                const parentInImportList = il.some((i) => typeof i !== 'string' && s.parent === i.parent);
                const shouldShow = inImportList || parentInImportList;
                return importDesc.hiding !== shouldShow;
            });
        }
        const res = [];
        for (const symbol of symbols) {
            if (symbolTypes && !symbolTypes.includes(symbol.symbolType)) {
                continue;
            }
            const specific = {
                name: symbol.name,
                typeSignature: symbol.typeSignature,
                symbolType: symbol.symbolType,
                module: importDesc,
            };
            const qn = (n) => `${importDesc.alias || importDesc.name}.${n}`;
            if (!skipQualified) {
                res.push(Object.assign({}, specific, { qparent: symbol.parent ? qn(symbol.parent) : undefined, qname: qn(symbol.name) }));
            }
            if (!importDesc.qualified) {
                res.push(Object.assign({}, specific, { qparent: symbol.parent, qname: symbol.name }));
            }
        }
        return res;
    }
    async update(rootDir) {
        Util.debug(`${this.name} updating`);
        this.symbols = await this.process.runBrowse(rootDir, [this.name]);
        Util.debug(`${this.name} updated`);
    }
}
exports.ModuleInfo = ModuleInfo;
//# sourceMappingURL=data:application/json;base64,
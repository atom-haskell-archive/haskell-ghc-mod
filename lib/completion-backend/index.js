"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const FZ = require("fuzzaldrin");
const atom_1 = require("atom");
const buffer_info_1 = require("./buffer-info");
const module_info_1 = require("./module-info");
const Util = require("../util");
const { handleException } = Util;
class CompletionBackend {
    constructor(process, upi) {
        this.process = process;
        this.upi = upi;
        this.bufferMap = new WeakMap();
        this.dirMap = new WeakMap();
        this.modListMap = new WeakMap();
        this.languagePragmas = new WeakMap();
        this.compilerOptions = new WeakMap();
        this.name = this.name.bind(this);
        this.onDidDestroy = this.onDidDestroy.bind(this);
        this.registerCompletionBuffer = this.registerCompletionBuffer.bind(this);
        this.unregisterCompletionBuffer = this.unregisterCompletionBuffer.bind(this);
        this.getCompletionsForSymbol = this.getCompletionsForSymbol.bind(this);
        this.getCompletionsForType = this.getCompletionsForType.bind(this);
        this.getCompletionsForClass = this.getCompletionsForClass.bind(this);
        this.getCompletionsForModule = this.getCompletionsForModule.bind(this);
        this.getCompletionsForSymbolInModule = this.getCompletionsForSymbolInModule.bind(this);
        this.getCompletionsForLanguagePragmas = this.getCompletionsForLanguagePragmas.bind(this);
        this.getCompletionsForCompilerOptions = this.getCompletionsForCompilerOptions.bind(this);
        this.getCompletionsForHole = this.getCompletionsForHole.bind(this);
        this.process = process;
        this.isActive = true;
        this.process.onDidDestroy(() => {
            this.isActive = false;
        });
    }
    name() {
        return 'haskell-ghc-mod';
    }
    onDidDestroy(callback) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        return this.process.onDidDestroy(callback);
    }
    registerCompletionBuffer(buffer) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        if (this.bufferMap.has(buffer)) {
            return new atom_1.Disposable(() => {
            });
        }
        const { bufferInfo } = this.getBufferInfo({ buffer });
        setImmediate(async () => {
            const { rootDir, moduleMap } = await this.getModuleMap({ bufferInfo });
            this.getModuleInfo({ bufferInfo, rootDir, moduleMap });
            const imports = await bufferInfo.getImports();
            for (const imprt of imports) {
                this.getModuleInfo({
                    moduleName: imprt.name,
                    bufferInfo,
                    rootDir,
                    moduleMap,
                });
            }
        });
        return new atom_1.Disposable(() => this.unregisterCompletionBuffer(buffer));
    }
    unregisterCompletionBuffer(buffer) {
        const x = this.bufferMap.get(buffer);
        if (x) {
            x.destroy();
        }
    }
    async getCompletionsForSymbol(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const symbols = await this.getSymbolsForBuffer(buffer);
        return this.filter(symbols, prefix, ['qname', 'qparent']);
    }
    async getCompletionsForType(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const symbols = await this.getSymbolsForBuffer(buffer, ['type', 'class']);
        return FZ.filter(symbols, prefix, { key: 'qname' });
    }
    async getCompletionsForClass(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const symbols = await this.getSymbolsForBuffer(buffer, ['class']);
        return FZ.filter(symbols, prefix, { key: 'qname' });
    }
    async getCompletionsForModule(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const rootDir = await this.process.getRootDir(buffer);
        let modules = this.modListMap.get(rootDir);
        if (!modules) {
            modules = await this.process.runList(buffer);
            this.modListMap.set(rootDir, modules);
            setTimeout(() => this.modListMap.delete(rootDir), 60 * 1000);
        }
        return FZ.filter(modules, prefix);
    }
    async getCompletionsForSymbolInModule(buffer, prefix, position, opts) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        let moduleName = opts ? opts.module : undefined;
        if (!moduleName) {
            const lineRange = new atom_1.Range([0, position.row], position);
            buffer.backwardsScanInRange(/^import\s+([\w.]+)/, lineRange, ({ match }) => (moduleName = match[1]));
        }
        const { bufferInfo } = this.getBufferInfo({ buffer });
        const mis = await this.getModuleInfo({ bufferInfo, moduleName });
        const symbols = await mis.moduleInfo.select({
            qualified: false,
            hiding: false,
            name: moduleName || mis.moduleName,
            importList: null,
            alias: null,
        }, undefined, true);
        return FZ.filter(symbols, prefix, { key: 'name' });
    }
    async getCompletionsForLanguagePragmas(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const dir = await this.process.getRootDir(buffer);
        let ps = this.languagePragmas.get(dir);
        if (!ps) {
            ps = await this.process.runLang(dir);
            ps && this.languagePragmas.set(dir, ps);
        }
        return FZ.filter(ps, prefix);
    }
    async getCompletionsForCompilerOptions(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const dir = await this.process.getRootDir(buffer);
        let co = this.compilerOptions.get(dir);
        if (!co) {
            co = await this.process.runFlag(dir);
            this.compilerOptions.set(dir, co);
        }
        return FZ.filter(co, prefix);
    }
    async getCompletionsForHole(buffer, prefix, position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const range = new atom_1.Range(position, position);
        if (prefix.startsWith('_')) {
            prefix = prefix.slice(1);
        }
        const { type } = await this.process.getTypeInBuffer(buffer, range);
        const symbols = await this.getSymbolsForBuffer(buffer);
        const ts = symbols.filter((s) => {
            if (!s.typeSignature) {
                return false;
            }
            const tl = s.typeSignature.split(' -> ').slice(-1)[0];
            if (tl.match(/^[a-z]$/)) {
                return false;
            }
            const ts2 = tl.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
            const rx = RegExp(ts2.replace(/\b[a-z]\b/g, '.+'), '');
            return rx.test(type);
        });
        if (prefix.length === 0) {
            return ts.sort((a, b) => FZ.score(b.typeSignature, type) - FZ.score(a.typeSignature, type));
        }
        else {
            return FZ.filter(ts, prefix, { key: 'qname' });
        }
    }
    async getSymbolsForBuffer(buffer, symbolTypes) {
        const { bufferInfo } = this.getBufferInfo({ buffer });
        const { rootDir, moduleMap } = await this.getModuleMap({ bufferInfo });
        if (bufferInfo && moduleMap) {
            const imports = await bufferInfo.getImports();
            const promises = await Promise.all(imports.map(async (imp) => {
                const res = await this.getModuleInfo({
                    bufferInfo,
                    moduleName: imp.name,
                    rootDir,
                    moduleMap,
                });
                if (!res) {
                    return [];
                }
                return res.moduleInfo.select(imp, symbolTypes);
            }));
            return [].concat(...promises);
        }
        else {
            return [];
        }
    }
    getBufferInfo({ buffer, }) {
        let bi = this.bufferMap.get(buffer);
        if (!bi) {
            bi = new buffer_info_1.BufferInfo(buffer);
            this.bufferMap.set(buffer, bi);
        }
        return { bufferInfo: bi };
    }
    async getModuleMap({ bufferInfo, rootDir, }) {
        if (!rootDir) {
            rootDir = await this.process.getRootDir(bufferInfo.buffer);
        }
        let mm = this.dirMap.get(rootDir);
        if (!mm) {
            mm = new Map();
            this.dirMap.set(rootDir, mm);
        }
        return {
            rootDir,
            moduleMap: mm,
        };
    }
    async getModuleInfo(arg) {
        const { bufferInfo } = arg;
        let dat;
        if (arg.rootDir && arg.moduleMap) {
            dat = { rootDir: arg.rootDir, moduleMap: arg.moduleMap };
        }
        else {
            dat = await this.getModuleMap({ bufferInfo });
        }
        const { moduleMap, rootDir } = dat;
        let moduleName = arg.moduleName;
        if (!moduleName) {
            moduleName = await bufferInfo.getModuleName();
        }
        if (!moduleName) {
            throw new Error(`Nameless module in ${bufferInfo.buffer.getUri()}`);
        }
        let moduleInfo = moduleMap.get(moduleName);
        if (!moduleInfo) {
            moduleInfo = new module_info_1.ModuleInfo(moduleName, this.process, rootDir);
            moduleMap.set(moduleName, moduleInfo);
            const mn = moduleName;
            moduleInfo.onDidDestroy(() => {
                moduleMap.delete(mn);
                Util.debug(`${moduleName} removed from map`);
            });
        }
        await moduleInfo.setBuffer(bufferInfo);
        return { bufferInfo, rootDir, moduleMap, moduleInfo, moduleName };
    }
    filter(candidates, prefix, keys) {
        if (!prefix) {
            return candidates;
        }
        const list = [];
        for (const candidate of candidates) {
            const scores = keys.map((key) => {
                const ck = candidate[key];
                if (ck) {
                    return FZ.score(ck.toString(), prefix);
                }
                else {
                    return 0;
                }
            });
            const score = Math.max(...scores);
            if (score > 0) {
                list.push({
                    score,
                    scoreN: scores.indexOf(score),
                    data: candidate,
                });
            }
        }
        return list
            .sort((a, b) => {
            const s = b.score - a.score;
            if (s === 0) {
                return a.scoreN - b.scoreN;
            }
            return s;
        })
            .map(({ data }) => data);
    }
}
tslib_1.__decorate([
    handleException,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [atom_1.TextBuffer, String, atom_1.Point]),
    tslib_1.__metadata("design:returntype", Promise)
], CompletionBackend.prototype, "getCompletionsForSymbol", null);
tslib_1.__decorate([
    handleException,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [atom_1.TextBuffer, String, atom_1.Point]),
    tslib_1.__metadata("design:returntype", Promise)
], CompletionBackend.prototype, "getCompletionsForType", null);
tslib_1.__decorate([
    handleException,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [atom_1.TextBuffer, String, atom_1.Point]),
    tslib_1.__metadata("design:returntype", Promise)
], CompletionBackend.prototype, "getCompletionsForHole", null);
exports.CompletionBackend = CompletionBackend;
//# sourceMappingURL=data:application/json;base64,
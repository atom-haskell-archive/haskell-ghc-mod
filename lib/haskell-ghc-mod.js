"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
let resolveUpiPromise;
let upiPromise;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) {
    upiPromise = new Promise((resolve) => resolveUpiPromise = resolve);
    process = new ghc_mod_1.GhcModiProcess(upiPromise);
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess(),
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
    tempDisposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return undefined;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process, upiPromise);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return undefined;
    }
    tempDisposables && tempDisposables.dispose();
    tempDisposables = undefined;
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    resolveUpiPromise(upiConsumer.upi);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUEwQztBQUMxQywrQkFBMEM7QUFDMUMsNkRBQXdEO0FBQ3hELGlEQUE0QztBQUM1QyxpQ0FBNEM7QUFHNUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUNwRCxJQUFJLGlCQUFnRCxDQUFBO0FBQ3BELElBQUksVUFBcUMsQ0FBQTtBQUV6QyxtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYsa0JBQXlCLE1BQWE7SUFDcEMsVUFBVSxHQUFHLElBQUksT0FBTyxDQUFtQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLENBQUE7SUFDcEYsT0FBTyxHQUFHLElBQUksd0JBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN4QyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0lBQ3ZDLGVBQWUsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDM0MsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUVoQyxlQUFlLENBQUMsR0FBRyxDQUNqQixPQUFPLENBQUMsT0FBTyxDQUFDLDBCQUFtQixDQUFDLEVBQ3BDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7SUFDOUQsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtJQUVELFdBQVcsQ0FBQyxHQUFHLENBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7UUFDbEMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7S0FDM0UsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBbkJELDRCQW1CQztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ25CLGlCQUFpQixHQUFHLFNBQVMsQ0FBQTtJQUM3QixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7SUFDdkIsZUFBZSxHQUFHLFNBQVMsQ0FBQTtBQUM3QixDQUFDO0FBUEQsZ0NBT0M7QUFFRDtJQUNFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUE7SUFBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLGlCQUFpQixHQUFHLElBQUksc0NBQWlCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUE7QUFDMUIsQ0FBQztBQU5ELDREQU1DO0FBRUQsb0JBQTJCLE9BQTZCO0lBQ3RELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUE7SUFBQyxDQUFDO0lBQ2xELGVBQWUsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUMsZUFBZSxHQUFHLFNBQVMsQ0FBQTtJQUMzQixNQUFNLFdBQVcsR0FBRyxJQUFJLDBCQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3JELGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUE7QUFDcEIsQ0FBQztBQVJELGdDQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2hjTW9kaVByb2Nlc3MgfSBmcm9tICcuL2doYy1tb2QnXG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IENvbXBsZXRpb25CYWNrZW5kIH0gZnJvbSAnLi9jb21wbGV0aW9uLWJhY2tlbmQnXG5pbXBvcnQgeyBVUElDb25zdW1lciB9IGZyb20gJy4vdXBpLWNvbnN1bWVyJ1xuaW1wb3J0IHsgZGVmYXVsdEVycm9ySGFuZGxlciB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuXG5sZXQgcHJvY2VzczogR2hjTW9kaVByb2Nlc3MgfCB1bmRlZmluZWRcbmxldCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHRlbXBEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IGNvbXBsZXRpb25CYWNrZW5kOiBDb21wbGV0aW9uQmFja2VuZCB8IHVuZGVmaW5lZFxubGV0IHJlc29sdmVVcGlQcm9taXNlOiAodjogVVBJLklVUElJbnN0YW5jZSkgPT4gdm9pZFxubGV0IHVwaVByb21pc2U6IFByb21pc2U8VVBJLklVUElJbnN0YW5jZT5cblxuZXhwb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZShfc3RhdGU6IG5ldmVyKSB7XG4gIHVwaVByb21pc2UgPSBuZXcgUHJvbWlzZTxVUEkuSVVQSUluc3RhbmNlPigocmVzb2x2ZSkgPT4gcmVzb2x2ZVVwaVByb21pc2UgPSByZXNvbHZlKVxuICBwcm9jZXNzID0gbmV3IEdoY01vZGlQcm9jZXNzKHVwaVByb21pc2UpXG4gIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICB0ZW1wRGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIGRpc3Bvc2FibGVzLmFkZCh0ZW1wRGlzcG9zYWJsZXMpXG5cbiAgdGVtcERpc3Bvc2FibGVzLmFkZChcbiAgICBwcm9jZXNzLm9uRXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlciksXG4gICAgcHJvY2Vzcy5vbldhcm5pbmcoKGRldGFpbDogc3RyaW5nKSA9PiB7XG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZygnZ2hjLW1vZCB3YXJuaW5nJywgeyBkZXRhaWwgfSlcbiAgICB9KSxcbiAgKVxuXG4gIGRpc3Bvc2FibGVzLmFkZChcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCB7XG4gICAgICAnaGFza2VsbC1naGMtbW9kOnNodXRkb3duLWJhY2tlbmQnOiAoKSA9PiBwcm9jZXNzICYmIHByb2Nlc3Mua2lsbFByb2Nlc3MoKSxcbiAgICB9KSxcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcbiAgcHJvY2VzcyAmJiBwcm9jZXNzLmRlc3Ryb3koKVxuICBwcm9jZXNzID0gdW5kZWZpbmVkXG4gIGNvbXBsZXRpb25CYWNrZW5kID0gdW5kZWZpbmVkXG4gIGRpc3Bvc2FibGVzICYmIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICBkaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxuICB0ZW1wRGlzcG9zYWJsZXMgPSB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVDb21wbGV0aW9uQmFja2VuZCgpIHtcbiAgaWYgKCFwcm9jZXNzKSB7IHJldHVybiB1bmRlZmluZWQgfVxuICBpZiAoIWNvbXBsZXRpb25CYWNrZW5kKSB7XG4gICAgY29tcGxldGlvbkJhY2tlbmQgPSBuZXcgQ29tcGxldGlvbkJhY2tlbmQocHJvY2VzcywgdXBpUHJvbWlzZSlcbiAgfVxuICByZXR1cm4gY29tcGxldGlvbkJhY2tlbmRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVVUEkoc2VydmljZTogVVBJLklVUElSZWdpc3RyYXRpb24pIHtcbiAgaWYgKCFwcm9jZXNzIHx8ICFkaXNwb3NhYmxlcykgeyByZXR1cm4gdW5kZWZpbmVkIH1cbiAgdGVtcERpc3Bvc2FibGVzICYmIHRlbXBEaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgdGVtcERpc3Bvc2FibGVzID0gdW5kZWZpbmVkXG4gIGNvbnN0IHVwaUNvbnN1bWVyID0gbmV3IFVQSUNvbnN1bWVyKHNlcnZpY2UsIHByb2Nlc3MpXG4gIHJlc29sdmVVcGlQcm9taXNlKHVwaUNvbnN1bWVyLnVwaSlcbiAgZGlzcG9zYWJsZXMuYWRkKHVwaUNvbnN1bWVyKVxuICByZXR1cm4gdXBpQ29uc3VtZXJcbn1cbiJdfQ==
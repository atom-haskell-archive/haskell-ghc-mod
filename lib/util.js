"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const path_1 = require("path");
const Temp = require("temp");
const FS = require("fs");
const CP = require("child_process");
const os_1 = require("os");
const atom_haskell_utils_1 = require("atom-haskell-utils");
exports.getRootDirFallback = atom_haskell_utils_1.getRootDirFallback;
exports.getRootDir = atom_haskell_utils_1.getRootDir;
exports.isDirectory = atom_haskell_utils_1.isDirectory;
let debuglog = [];
const logKeep = 30000;
function savelog(...messages) {
    const ts = Date.now();
    debuglog.push({
        timestamp: ts,
        messages,
    });
    let ks = 0;
    for (const v of debuglog) {
        if ((ts - v.timestamp) >= logKeep) {
            break;
        }
        ks++;
    }
    debuglog.splice(0, ks);
}
function joinPath(ds) {
    const set = new Set(ds);
    return Array.from(set).join(path_1.delimiter);
}
exports.EOT = `${os_1.EOL}\x04${os_1.EOL}`;
function debug(...messages) {
    if (atom.config.get('haskell-ghc-mod.debug')) {
        console.log('haskell-ghc-mod debug:', ...messages);
    }
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.debug = debug;
function warn(...messages) {
    console.warn('haskell-ghc-mod warning:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.warn = warn;
function error(...messages) {
    console.error('haskell-ghc-mod error:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.error = error;
function getDebugLog() {
    const ts = Date.now();
    debuglog = debuglog.filter(({ timestamp }) => (ts - timestamp) < logKeep);
    return debuglog.map(({ timestamp, messages }) => `${(timestamp - ts) / 1000}s: ${messages.join(',')}`).join(os_1.EOL);
}
exports.getDebugLog = getDebugLog;
async function execPromise(cmd, args, opts, stdin) {
    return new Promise((resolve, reject) => {
        debug(`Running ${cmd} ${args} with opts = `, opts);
        const child = CP.execFile(cmd, args, opts, (error, stdout, stderr) => {
            if (stderr.trim().length > 0) {
                warn(stderr);
            }
            if (error) {
                warn(`Running ${cmd} ${args} failed with `, error);
                if (stdout) {
                    warn(stdout);
                }
                error.stack = (new Error()).stack;
                reject(error);
            }
            else {
                debug(`Got response from ${cmd} ${args}`, { stdout, stderr });
                resolve({ stdout, stderr });
            }
        });
        if (stdin) {
            debug(`sending stdin text to ${cmd} ${args}`);
            child.stdin.write(stdin);
        }
    });
}
exports.execPromise = execPromise;
async function getCabalSandbox(rootPath) {
    debug('Looking for cabal sandbox...');
    const sbc = await parseSandboxConfig(`${rootPath}${path_1.sep}cabal.sandbox.config`);
    if (sbc && sbc['install-dirs'] && sbc['install-dirs']['bindir']) {
        const sandbox = sbc['install-dirs']['bindir'];
        debug('Found cabal sandbox: ', sandbox);
        if (atom_haskell_utils_1.isDirectory(sandbox)) {
            return sandbox;
        }
        else {
            warn('Cabal sandbox ', sandbox, ' is not a directory');
            return undefined;
        }
    }
    else {
        warn('No cabal sandbox found');
        return undefined;
    }
}
exports.getCabalSandbox = getCabalSandbox;
async function getStackSandbox(rootPath, apd, env) {
    debug('Looking for stack sandbox...');
    env.PATH = joinPath(apd);
    debug('Running stack with PATH ', env.PATH);
    try {
        const out = await execPromise('stack', ['path', '--snapshot-install-root', '--local-install-root', '--bin-path'], {
            encoding: 'utf8',
            cwd: rootPath,
            env,
            timeout: atom.config.get('haskell-ghc-mod.initTimeout') * 1000,
        });
        const lines = out.stdout.split(os_1.EOL);
        const sir = lines.filter((l) => l.startsWith('snapshot-install-root: '))[0].slice(23) + `${path_1.sep}bin`;
        const lir = lines.filter((l) => l.startsWith('local-install-root: '))[0].slice(20) + `${path_1.sep}bin`;
        const bp = lines.filter((l) => l.startsWith('bin-path: '))[0].slice(10).split(path_1.delimiter).filter((p) => !((p === sir) || (p === lir) || (apd.includes(p))));
        debug('Found stack sandbox ', lir, sir, ...bp);
        return [lir, sir, ...bp];
    }
    catch (err) {
        warn('No stack sandbox found because ', err);
        return undefined;
    }
}
exports.getStackSandbox = getStackSandbox;
const processOptionsCache = new Map();
async function getProcessOptions(rootPath) {
    if (!rootPath) {
        rootPath = atom_haskell_utils_1.getRootDirFallback(null).getPath();
    }
    const cached = processOptionsCache.get(rootPath);
    if (cached) {
        return cached;
    }
    debug(`getProcessOptions(${rootPath})`);
    const env = Object.assign({}, process.env);
    if (process.platform === 'win32') {
        const PATH = [];
        const capMask = (str, mask) => {
            const a = str.split('');
            for (let i = 0; i < a.length; i++) {
                if (mask & Math.pow(2, i)) {
                    a[i] = a[i].toUpperCase();
                }
            }
            return a.join('');
        };
        for (let m = 0b1111; m >= 0; m--) {
            const vn = capMask('path', m);
            if (env[vn]) {
                PATH.push(env[vn]);
            }
        }
        env.PATH = PATH.join(path_1.delimiter);
    }
    const PATH = env.PATH || '';
    const apd = atom.config.get('haskell-ghc-mod.additionalPathDirectories').concat(PATH.split(path_1.delimiter));
    const cabalSandbox = atom.config.get('haskell-ghc-mod.cabalSandbox')
        ? getCabalSandbox(rootPath) : Promise.resolve(undefined);
    const stackSandbox = atom.config.get('haskell-ghc-mod.stackSandbox')
        ? getStackSandbox(rootPath, apd, Object.assign({}, env)) : Promise.resolve(undefined);
    const [cabalSandboxDir, stackSandboxDirs] = await Promise.all([cabalSandbox, stackSandbox]);
    const newp = [];
    if (cabalSandboxDir) {
        newp.push(cabalSandboxDir);
    }
    if (stackSandboxDirs) {
        newp.push(...stackSandboxDirs);
    }
    newp.push(...apd);
    env.PATH = joinPath(newp);
    debug(`PATH = ${env.PATH}`);
    const res = {
        cwd: rootPath,
        env,
        encoding: 'utf8',
        maxBuffer: Infinity,
    };
    processOptionsCache.set(rootPath, res);
    return res;
}
exports.getProcessOptions = getProcessOptions;
function getSymbolAtPoint(editor, point) {
    const [scope] = editor.scopeDescriptorForBufferPosition(point).getScopesArray().slice(-1);
    if (scope) {
        const range = editor.bufferRangeForScopeAtPosition(scope, point);
        if (range && !range.isEmpty()) {
            const symbol = editor.getTextInBufferRange(range);
            return { scope, range, symbol };
        }
    }
    return undefined;
}
exports.getSymbolAtPoint = getSymbolAtPoint;
function getSymbolInRange(editor, crange) {
    const buffer = editor.getBuffer();
    if (crange.isEmpty()) {
        return getSymbolAtPoint(editor, crange.start);
    }
    else {
        return {
            symbol: buffer.getTextInRange(crange),
            range: crange,
        };
    }
}
exports.getSymbolInRange = getSymbolInRange;
async function withTempFile(contents, uri, gen) {
    const info = await new Promise((resolve, reject) => Temp.open({ prefix: 'haskell-ghc-mod', suffix: path_1.extname(uri || '.hs') }, (err, info2) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(info2);
        }
    }));
    return new Promise((resolve, reject) => FS.write(info.fd, contents, async (err) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(await gen(info.path));
            FS.close(info.fd, () => FS.unlink(info.path, () => { }));
        }
    }));
}
exports.withTempFile = withTempFile;
function mkError(name, message) {
    const err = new Error(message);
    err.name = name;
    return err;
}
exports.mkError = mkError;
async function parseSandboxConfig(file) {
    try {
        const sbc = await new Promise((resolve, reject) => FS.readFile(file, { encoding: 'utf-8' }, (err, sbc2) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(sbc2);
            }
        }));
        const vars = {};
        let scope = vars;
        const rv = (v) => {
            for (const k1 of Object.keys(scope)) {
                const v1 = scope[k1];
                if (typeof v1 === 'string') {
                    v = v.split(`$${k1}`).join(v1);
                }
            }
            return v;
        };
        for (const line of sbc.split(/\r?\n|\r/)) {
            if (!line.match(/^\s*--/) && !line.match(/^\s*$/)) {
                const [l] = line.split(/--/);
                const m = l.match(/^\s*([\w-]+):\s*(.*)\s*$/);
                if (m) {
                    const [, name, val] = m;
                    scope[name] = rv(val);
                }
                else {
                    const newscope = {};
                    scope[line] = newscope;
                    scope = newscope;
                }
            }
        }
        return vars;
    }
    catch (err) {
        warn('Reading cabal sandbox config failed with ', err);
        return undefined;
    }
}
exports.parseSandboxConfig = parseSandboxConfig;
function tabShiftForPoint(buffer, point) {
    const line = buffer.lineForRow(point.row);
    const match = line ? (line.slice(0, point.column).match(/\t/g) || []) : [];
    const columnShift = 7 * match.length;
    return new atom_1.Point(point.row, point.column + columnShift);
}
exports.tabShiftForPoint = tabShiftForPoint;
function tabShiftForRange(buffer, range) {
    const start = tabShiftForPoint(buffer, range.start);
    const end = tabShiftForPoint(buffer, range.end);
    return new atom_1.Range(start, end);
}
exports.tabShiftForRange = tabShiftForRange;
function tabUnshiftForPoint(buffer, point) {
    const line = buffer.lineForRow(point.row);
    let columnl = 0;
    let columnr = point.column;
    while (columnl < columnr) {
        if ((line === undefined) || (line[columnl] === undefined)) {
            break;
        }
        if (line[columnl] === '\t') {
            columnr -= 7;
        }
        columnl += 1;
    }
    return new atom_1.Point(point.row, columnr);
}
exports.tabUnshiftForPoint = tabUnshiftForPoint;
function tabUnshiftForRange(buffer, range) {
    const start = tabUnshiftForPoint(buffer, range.start);
    const end = tabUnshiftForPoint(buffer, range.end);
    return new atom_1.Range(start, end);
}
exports.tabUnshiftForRange = tabUnshiftForRange;
function isUpperCase(ch) {
    return ch.toUpperCase() === ch;
}
exports.isUpperCase = isUpperCase;
function getErrorDetail({ err, runArgs, caps }) {
    return `caps:
${JSON.stringify(caps, undefined, 2)}
Args:
${JSON.stringify(runArgs, undefined, 2)}
message:
${err.message}
log:
${getDebugLog()}`;
}
exports.getErrorDetail = getErrorDetail;
function formatError({ err, runArgs }) {
    if (err.name === 'InteractiveActionTimeout' && runArgs) {
        return `\
Haskell-ghc-mod: ghc-mod \
${runArgs.interactive ? 'interactive ' : ''}command ${runArgs.command} \
timed out. You can try to fix it by raising 'Interactive Action \
Timeout' setting in haskell-ghc-mod settings.`;
    }
    else if (runArgs) {
        return `\
Haskell-ghc-mod: ghc-mod \
${runArgs.interactive ? 'interactive ' : ''}command ${runArgs.command} \
failed with error ${err.name}`;
    }
    else {
        return `There was an unexpected error ${err.name}`;
    }
}
exports.formatError = formatError;
function defaultErrorHandler(args) {
    const { err, runArgs, caps } = args;
    const suppressErrors = runArgs && runArgs.suppressErrors;
    if (!suppressErrors) {
        atom.notifications.addError(formatError(args), {
            detail: getErrorDetail(args),
            stack: err.stack,
            dismissable: true,
        });
    }
    else {
        error(caps, runArgs, err);
    }
}
exports.defaultErrorHandler = defaultErrorHandler;
function warnGHCPackagePath() {
    atom.notifications.addWarning('haskell-ghc-mod: You have GHC_PACKAGE_PATH environment variable set!', {
        dismissable: true,
        detail: `\
This configuration is not supported, and can break arbitrarily. You can try to band-aid it by adding

delete process.env.GHC_PACKAGE_PATH

to your Atom init script (Edit → Init Script...)

You can suppress this warning in haskell-ghc-mod settings.`,
    });
}
exports.warnGHCPackagePath = warnGHCPackagePath;
function filterEnv(env) {
    const fenv = {};
    for (const evar in env) {
        const evarU = evar.toUpperCase();
        if (evarU === 'PATH'
            || evarU.startsWith('GHC_')
            || evarU.startsWith('STACK_')
            || evarU.startsWith('CABAL_')) {
            fenv[evar] = env[evar];
        }
    }
    return fenv;
}
function notifySpawnFail(args) {
    const debugInfo = Object.assign({}, args);
    if (args.opts) {
        const optsclone = Object.assign({}, args.opts);
        optsclone.env = filterEnv(optsclone.env);
        debugInfo.opts = optsclone;
    }
    atom.notifications.addFatalError(`Haskell-ghc-mod: ghc-mod failed to launch.
It is probably missing or misconfigured. ${args.err.code}`, {
        detail: `\
Error was: ${debugInfo.err.name}
${debugInfo.err.message}
Debug information:
${JSON.stringify(debugInfo, undefined, 2)}
Config:
${JSON.stringify(atom.config.get('haskell-ghc-mod'), undefined, 2)}
Environment (filtered):
${JSON.stringify(filterEnv(process.env), undefined, 2)}
`,
        stack: debugInfo.err.stack,
        dismissable: true,
    });
}
exports.notifySpawnFail = notifySpawnFail;
function handleException(_target, _key, desc) {
    return Object.assign({}, desc, { async value(...args) {
            try {
                return await desc.value.call(this, ...args);
            }
            catch (e) {
                debug(e);
                const upi = await this.upi;
                upi.setStatus({
                    status: 'warning',
                    detail: e.toString(),
                });
                return new Promise(() => { });
            }
        } });
}
exports.handleException = handleException;
function versAtLeast(vers, b) {
    for (let i = 0; i < b.length; i++) {
        const v = b[i];
        const t = vers[i];
        const vv = t !== undefined ? t : 0;
        if (vv > v) {
            return true;
        }
        else if (vv < v) {
            return false;
        }
    }
    return true;
}
exports.versAtLeast = versAtLeast;
//# sourceMappingURL=data:application/json;base64,
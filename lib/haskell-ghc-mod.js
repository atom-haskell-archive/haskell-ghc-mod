"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(state) {
    process = new ghc_mod_1.GhcModiProcess();
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess()
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return;
    }
    tempDisposables && tempDisposables.dispose();
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    const upiConsumerDisp = new atom_1.Disposable(() => upiConsumer.destroy());
    disposables.add(upiConsumerDisp);
    return upiConsumerDisp;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF3QztBQUN4QywrQkFBb0Q7QUFDcEQsNkRBQXNEO0FBQ3RELGlEQUEwQztBQUMxQyxpQ0FBMEM7QUFFMUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUVwRCxtQ0FBK0I7QUFBdkIsMEJBQUEsTUFBTSxDQUFBO0FBRWQsa0JBQTBCLEtBQVk7SUFDcEMsT0FBTyxHQUFHLElBQUksd0JBQWMsRUFBRSxDQUFBO0lBQzlCLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDdkMsZUFBZSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhDLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsMEJBQW1CLENBQUMsRUFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQWM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFBO0lBQzVELENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLGtDQUFrQyxFQUFFLE1BQU0sT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7S0FDM0UsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBbEJELDRCQWtCQztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ25CLGlCQUFpQixHQUFHLFNBQVMsQ0FBQTtJQUM3QixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7QUFDekIsQ0FBQztBQU5ELGdDQU1DO0FBRUQ7SUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQUMsaUJBQWlCLEdBQUcsSUFBSSxzQ0FBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUFDLENBQUM7SUFDL0UsTUFBTSxDQUFDLGlCQUFpQixDQUFBO0FBQzFCLENBQUM7QUFKRCw0REFJQztBQUVELG9CQUE0QixPQUE2QjtJQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3hDLGVBQWUsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUMsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyRCxNQUFNLGVBQWUsR0FDbkIsSUFBSSxpQkFBVSxDQUFDLE1BQU0sV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDN0MsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNoQyxNQUFNLENBQUMsZUFBZSxDQUFBO0FBQ3hCLENBQUM7QUFSRCxnQ0FRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R2hjTW9kaVByb2Nlc3N9IGZyb20gJy4vZ2hjLW1vZCdcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSdcbmltcG9ydCB7Q29tcGxldGlvbkJhY2tlbmR9IGZyb20gJy4vY29tcGxldGlvbi1iYWNrZW5kJ1xuaW1wb3J0IHtVUElDb25zdW1lcn0gZnJvbSAnLi91cGktY29uc3VtZXInXG5pbXBvcnQge2RlZmF1bHRFcnJvckhhbmRsZXJ9IGZyb20gJy4vdXRpbCdcblxubGV0IHByb2Nlc3M6IEdoY01vZGlQcm9jZXNzIHwgdW5kZWZpbmVkXG5sZXQgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgfCB1bmRlZmluZWRcbmxldCB0ZW1wRGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgfCB1bmRlZmluZWRcbmxldCBjb21wbGV0aW9uQmFja2VuZDogQ29tcGxldGlvbkJhY2tlbmQgfCB1bmRlZmluZWRcblxuZXhwb3J0IHtjb25maWd9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUgKHN0YXRlOiBuZXZlcikge1xuICBwcm9jZXNzID0gbmV3IEdoY01vZGlQcm9jZXNzKClcbiAgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIHRlbXBEaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgZGlzcG9zYWJsZXMuYWRkKHRlbXBEaXNwb3NhYmxlcylcblxuICB0ZW1wRGlzcG9zYWJsZXMuYWRkKFxuICAgIHByb2Nlc3Mub25FcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKSxcbiAgICBwcm9jZXNzLm9uV2FybmluZygoZGV0YWlsOiBzdHJpbmcpID0+IHtcbiAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKCdnaGMtbW9kIHdhcm5pbmcnLCB7ZGV0YWlsfSlcbiAgICB9KSxcbiAgKVxuXG4gIGRpc3Bvc2FibGVzLmFkZChcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCB7XG4gICAgICAnaGFza2VsbC1naGMtbW9kOnNodXRkb3duLWJhY2tlbmQnOiAoKSA9PiBwcm9jZXNzICYmIHByb2Nlc3Mua2lsbFByb2Nlc3MoKVxuICAgIH0pXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUgKCkge1xuICBwcm9jZXNzICYmIHByb2Nlc3MuZGVzdHJveSgpXG4gIHByb2Nlc3MgPSB1bmRlZmluZWRcbiAgY29tcGxldGlvbkJhY2tlbmQgPSB1bmRlZmluZWRcbiAgZGlzcG9zYWJsZXMgJiYgZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIGRpc3Bvc2FibGVzID0gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQ29tcGxldGlvbkJhY2tlbmQgKCkge1xuICBpZiAoISBwcm9jZXNzKSB7IHJldHVybiB9XG4gIGlmICghIGNvbXBsZXRpb25CYWNrZW5kKSB7IGNvbXBsZXRpb25CYWNrZW5kID0gbmV3IENvbXBsZXRpb25CYWNrZW5kKHByb2Nlc3MpIH1cbiAgcmV0dXJuIGNvbXBsZXRpb25CYWNrZW5kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lVVBJIChzZXJ2aWNlOiBVUEkuSVVQSVJlZ2lzdHJhdGlvbikge1xuICBpZiAoIXByb2Nlc3MgfHwgIWRpc3Bvc2FibGVzKSB7IHJldHVybiB9XG4gIHRlbXBEaXNwb3NhYmxlcyAmJiB0ZW1wRGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIGNvbnN0IHVwaUNvbnN1bWVyID0gbmV3IFVQSUNvbnN1bWVyKHNlcnZpY2UsIHByb2Nlc3MpXG4gIGNvbnN0IHVwaUNvbnN1bWVyRGlzcCA9XG4gICAgbmV3IERpc3Bvc2FibGUoKCkgPT4gdXBpQ29uc3VtZXIuZGVzdHJveSgpKVxuICBkaXNwb3NhYmxlcy5hZGQodXBpQ29uc3VtZXJEaXNwKVxuICByZXR1cm4gdXBpQ29uc3VtZXJEaXNwXG59XG4iXX0=
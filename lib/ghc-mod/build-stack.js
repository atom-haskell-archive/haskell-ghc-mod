"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const CP = require("child_process");
const os_1 = require("os");
const Util = require("../util");
async function buildStack(opts, upi) {
    const messages = [];
    const disp = new atom_1.CompositeDisposable();
    try {
        return await new Promise((resolve, reject) => {
            const proc = CP.spawn('stack', ['--copy-compiler-tool', 'build', 'ghc-mod'], opts);
            const buffered = () => {
                let buffer = '';
                return (data) => {
                    const output = data.toString('utf8');
                    const [first, ...tail] = output.split(os_1.EOL);
                    buffer += first;
                    if (tail.length > 0) {
                        const lines = [buffer, ...(tail.slice(0, -1))];
                        buffer = tail.slice(-1)[0];
                        messages.push(...lines.map(message => ({ message, severity: 'build' })));
                        if (upi) {
                            upi.setMessages(messages);
                        }
                        else {
                            atom.notifications.addInfo(lines.join('\n'));
                        }
                        console.log(lines.join('\n'));
                    }
                };
            };
            proc.stdout.on('data', buffered());
            proc.stderr.on('data', buffered());
            if (upi) {
                disp.add(upi.addPanelControl({
                    element: 'ide-haskell-button',
                    opts: {
                        classes: ['cancel'],
                        events: {
                            click: () => {
                                proc.kill('SIGTERM');
                                proc.kill('SIGKILL');
                            },
                        },
                    },
                }));
            }
            proc.once('exit', (code, signal) => {
                if (code === 0) {
                    resolve(true);
                }
                else {
                    reject(new Error(`Stack build exited with nonzero exit status ${code} due to ${signal}`));
                    Util.warn(messages.map(m => m.message).join('\n'));
                }
            });
        });
    }
    catch (e) {
        Util.warn(e);
        atom.notifications.addError(e.toString(), {
            dismissable: true,
            detail: messages.map(m => m.message).join('\n'),
        });
        return false;
    }
    finally {
        upi && upi.setMessages([]);
        disp.dispose();
    }
}
exports.buildStack = buildStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2hjLW1vZC9idWlsZC1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUEwQztBQUUxQyxvQ0FBbUM7QUFDbkMsMkJBQXdCO0FBQ3hCLGdDQUErQjtBQUd4QixLQUFLLHFCQUFxQixJQUFnQixFQUFFLEdBQTZCO0lBQzlFLE1BQU0sUUFBUSxHQUFrQixFQUFFLENBQUE7SUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0lBQ3RDLElBQUksQ0FBQztRQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3BELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ2xGLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtnQkFDcEIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO2dCQUNmLE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO29CQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO29CQUNwQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFHLENBQUMsQ0FBQTtvQkFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQTtvQkFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3BCLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTt3QkFDOUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTt3QkFDMUIsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTt3QkFDeEUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFDUixHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO3dCQUMzQixDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTt3QkFDOUMsQ0FBQzt3QkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtvQkFDL0IsQ0FBQztnQkFDSCxDQUFDLENBQUE7WUFDSCxDQUFDLENBQUE7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtZQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtZQUNsQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNSLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQztvQkFDM0IsT0FBTyxFQUFFLG9CQUFvQjtvQkFDN0IsSUFBSSxFQUFFO3dCQUNKLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzt3QkFDbkIsTUFBTSxFQUFFOzRCQUNOLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0NBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtnQ0FDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTs0QkFDdEIsQ0FBQzt5QkFDRjtxQkFDRjtpQkFDRixDQUFDLENBQUMsQ0FBQTtZQUNMLENBQUM7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNmLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLCtDQUErQyxJQUFJLFdBQVcsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO29CQUN6RixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7Z0JBQ3BELENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3hDLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE1BQU0sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDaEQsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUNkLENBQUM7WUFBUyxDQUFDO1FBQ1QsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDMUIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2hCLENBQUM7QUFDSCxDQUFDO0FBN0RELGdDQTZEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgSVVQSUluc3RhbmNlLCBJUmVzdWx0SXRlbSB9IGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgKiBhcyBDUCBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBSdW5PcHRpb25zIH0gZnJvbSAnLi9naGMtbW9kaS1wcm9jZXNzLXJlYWwnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBidWlsZFN0YWNrKG9wdHM6IFJ1bk9wdGlvbnMsIHVwaTogSVVQSUluc3RhbmNlIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IG1lc3NhZ2VzOiBJUmVzdWx0SXRlbVtdID0gW11cbiAgY29uc3QgZGlzcCA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcHJvYyA9IENQLnNwYXduKCdzdGFjaycsIFsnLS1jb3B5LWNvbXBpbGVyLXRvb2wnLCAnYnVpbGQnLCAnZ2hjLW1vZCddLCBvcHRzKVxuICAgICAgY29uc3QgYnVmZmVyZWQgPSAoKSA9PiB7XG4gICAgICAgIGxldCBidWZmZXIgPSAnJ1xuICAgICAgICByZXR1cm4gKGRhdGE6IEJ1ZmZlcikgPT4ge1xuICAgICAgICAgIGNvbnN0IG91dHB1dCA9IGRhdGEudG9TdHJpbmcoJ3V0ZjgnKVxuICAgICAgICAgIGNvbnN0IFtmaXJzdCwgLi4udGFpbF0gPSBvdXRwdXQuc3BsaXQoRU9MKVxuICAgICAgICAgIGJ1ZmZlciArPSBmaXJzdFxuICAgICAgICAgIGlmICh0YWlsLmxlbmd0aCA+IDApIHsgLy8gaXQgbWVhbnMgdGhlcmUncyBhdCBsZWFzdCBvbmUgbmV3bGluZVxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBbYnVmZmVyLCAuLi4odGFpbC5zbGljZSgwLCAtMSkpXVxuICAgICAgICAgICAgYnVmZmVyID0gdGFpbC5zbGljZSgtMSlbMF1cbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goLi4ubGluZXMubWFwKG1lc3NhZ2UgPT4gKHsgbWVzc2FnZSwgc2V2ZXJpdHk6ICdidWlsZCcgfSkpKVxuICAgICAgICAgICAgaWYgKHVwaSkge1xuICAgICAgICAgICAgICB1cGkuc2V0TWVzc2FnZXMobWVzc2FnZXMpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbyhsaW5lcy5qb2luKCdcXG4nKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxpbmVzLmpvaW4oJ1xcbicpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCBidWZmZXJlZCgpKVxuICAgICAgcHJvYy5zdGRlcnIub24oJ2RhdGEnLCBidWZmZXJlZCgpKVxuICAgICAgaWYgKHVwaSkge1xuICAgICAgICBkaXNwLmFkZCh1cGkuYWRkUGFuZWxDb250cm9sKHtcbiAgICAgICAgICBlbGVtZW50OiAnaWRlLWhhc2tlbGwtYnV0dG9uJyxcbiAgICAgICAgICBvcHRzOiB7XG4gICAgICAgICAgICBjbGFzc2VzOiBbJ2NhbmNlbCddLFxuICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvYy5raWxsKCdTSUdURVJNJylcbiAgICAgICAgICAgICAgICBwcm9jLmtpbGwoJ1NJR0tJTEwnKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICAgIHByb2Mub25jZSgnZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKHRydWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU3RhY2sgYnVpbGQgZXhpdGVkIHdpdGggbm9uemVybyBleGl0IHN0YXR1cyAke2NvZGV9IGR1ZSB0byAke3NpZ25hbH1gKSlcbiAgICAgICAgICBVdGlsLndhcm4obWVzc2FnZXMubWFwKG0gPT4gbS5tZXNzYWdlKS5qb2luKCdcXG4nKSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgVXRpbC53YXJuKGUpXG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKGUudG9TdHJpbmcoKSwge1xuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICBkZXRhaWw6IG1lc3NhZ2VzLm1hcChtID0+IG0ubWVzc2FnZSkuam9pbignXFxuJyksXG4gICAgfSlcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBmaW5hbGx5IHtcbiAgICB1cGkgJiYgdXBpLnNldE1lc3NhZ2VzKFtdKVxuICAgIGRpc3AuZGlzcG9zZSgpXG4gIH1cbn1cbiJdfQ==
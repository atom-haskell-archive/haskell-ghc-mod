"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const CP = require("child_process");
const os_1 = require("os");
const Util = require("../util");
async function buildStack(opts, upi) {
    const messages = [];
    const disp = new atom_1.CompositeDisposable();
    try {
        const vers = await Util.execPromise('stack', ['--numeric-version'], opts)
            .then(({ stdout }) => stdout.split('.').map((n) => parseInt(n, 10)))
            .catch(() => undefined);
        const hasCopyCompiler = vers ? Util.versAtLeast(vers, [1, 6, 1]) : false;
        return await new Promise((resolve, reject) => {
            const args = ['build'];
            if (hasCopyCompiler)
                args.push('--copy-compiler-tool');
            args.push('ghc-mod');
            Util.warn(`Running stack ${args.join(' ')}`);
            const proc = CP.spawn('stack', args, opts);
            const buffered = () => {
                let buffer = '';
                return (data) => {
                    const output = data.toString('utf8');
                    const [first, ...tail] = output.split(os_1.EOL);
                    buffer += first;
                    if (tail.length > 0) {
                        const lines = [buffer, ...tail.slice(0, -1)];
                        buffer = tail.slice(-1)[0];
                        messages.push(...lines.map((message) => ({ message, severity: 'build' })));
                        if (upi) {
                            upi.setMessages(messages);
                        }
                        else {
                            atom.notifications.addInfo(lines.join('\n'));
                        }
                        console.log(lines.join('\n'));
                    }
                };
            };
            proc.stdout.on('data', buffered());
            proc.stderr.on('data', buffered());
            if (upi) {
                disp.add(upi.addPanelControl({
                    element: 'ide-haskell-button',
                    opts: {
                        classes: ['cancel'],
                        events: {
                            click: () => {
                                proc.kill('SIGTERM');
                                proc.kill('SIGKILL');
                            },
                        },
                    },
                }));
            }
            proc.once('exit', (code, signal) => {
                if (code === 0) {
                    resolve(true);
                }
                else {
                    reject(new Error(`Stack build exited with nonzero exit status ${code} due to ${signal}`));
                    Util.warn(messages.map((m) => m.message).join('\n'));
                }
            });
        });
    }
    catch (e) {
        Util.warn(e);
        atom.notifications.addError(e.toString(), {
            dismissable: true,
            detail: messages.map((m) => m.message).join('\n'),
        });
        return false;
    }
    finally {
        upi && upi.setMessages([]);
        disp.dispose();
    }
}
exports.buildStack = buildStack;
//# sourceMappingURL=data:application/json;base64,
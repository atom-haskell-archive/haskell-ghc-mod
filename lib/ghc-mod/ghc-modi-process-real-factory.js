"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Util = require("../util");
const ghc_modi_process_real_1 = require("./ghc-modi-process-real");
function createGhcModiProcessReal(rootDir) {
    return __awaiter(this, void 0, void 0, function* () {
        let opts;
        let vers;
        let caps;
        try {
            opts = yield Util.getProcessOptions(rootDir.getPath());
            const versP = getVersion(opts);
            const bopts = opts;
            versP.then((v) => { checkComp(bopts, v); });
            vers = yield versP;
            caps = getCaps(vers);
            return new ghc_modi_process_real_1.GhcModiProcessReal(caps, rootDir, opts);
        }
        catch (err) {
            Util.notifySpawnFail({ dir: rootDir.getPath(), err, opts, vers, caps });
            throw err;
        }
    });
}
exports.createGhcModiProcessReal = createGhcModiProcessReal;
function getCaps({ vers }) {
    const caps = {
        version: vers,
        fileMap: false,
        quoteArgs: false,
        optparse: false,
        typeConstraints: false,
        browseParents: false,
        interactiveCaseSplit: false,
        importedFrom: false,
        browseMain: false,
    };
    const atLeast = (b) => {
        for (let i = 0; i < b.length; i++) {
            const v = b[i];
            if (vers[i] > v) {
                return true;
            }
            else if (vers[i] < v) {
                return false;
            }
        }
        return true;
    };
    const exact = (b) => {
        for (let i = 0; i < b.length; i++) {
            const v = b[i];
            if (vers[i] !== v) {
                return false;
            }
        }
        return true;
    };
    if (!atLeast([5, 4])) {
        atom.notifications.addError(`\
Haskell-ghc-mod: ghc-mod < 5.4 is not supported. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (exact([5, 4])) {
        atom.notifications.addWarning(`\
Haskell-ghc-mod: ghc-mod 5.4.* is deprecated. \
Use at your own risk or update your ghc-mod installation`, { dismissable: true });
    }
    if (atLeast([5, 4])) {
        caps.fileMap = true;
    }
    if (atLeast([5, 5])) {
        caps.quoteArgs = true;
        caps.optparse = true;
    }
    if (atLeast([5, 6])) {
        caps.typeConstraints = true;
        caps.browseParents = true;
        caps.interactiveCaseSplit = true;
    }
    if (atom.config.get('haskell-ghc-mod.experimental')) {
        caps.importedFrom = true;
    }
    Util.debug(JSON.stringify(caps));
    return caps;
}
function getVersion(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
        const cmd = atom.config.get('haskell-ghc-mod.ghcModPath');
        const { stdout } = yield Util.execPromise(cmd, ['version'], Object.assign({ timeout }, opts));
        const versRaw = /^ghc-mod version (\d+)\.(\d+)\.(\d+)(?:\.(\d+))?/.exec(stdout);
        if (!versRaw) {
            throw new Error("Couldn't get ghc-mod version");
        }
        const vers = versRaw.slice(1, 5).map((i) => parseInt(i, 10));
        const compRaw = /GHC (.+)$/.exec(stdout.trim());
        if (!compRaw) {
            throw new Error("Couldn't get ghc version");
        }
        const comp = compRaw[1];
        Util.debug(`Ghc-mod ${vers} built with ${comp}`);
        return { vers, comp };
    });
}
function checkComp(opts, { comp }) {
    return __awaiter(this, void 0, void 0, function* () {
        const timeout = atom.config.get('haskell-ghc-mod.initTimeout') * 1000;
        const tryWarn = (cmd, args) => __awaiter(this, void 0, void 0, function* () {
            try {
                return (yield Util.execPromise(cmd, args, Object.assign({ timeout }, opts))).stdout.trim();
            }
            catch (error) {
                Util.warn(error);
            }
        });
        const [stackghc, pathghc] = yield Promise.all([
            tryWarn('stack', ['ghc', '--', '--numeric-version']),
            tryWarn('ghc', ['--numeric-version']),
        ]);
        Util.debug(`Stack GHC version ${stackghc}`);
        Util.debug(`Path GHC version ${pathghc}`);
        if (stackghc && (stackghc !== comp)) {
            const warn = `\
GHC version in your Stack '${stackghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Stack projects`;
            atom.notifications.addWarning(warn);
            Util.warn(warn);
        }
        if (pathghc && (pathghc !== comp)) {
            const warn = `\
GHC version in your PATH '${pathghc}' doesn't match with \
GHC version used to build ghc-mod '${comp}'. This can lead to \
problems when using Cabal or Plain projects`;
            atom.notifications.addWarning(warn);
            Util.warn(warn);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,
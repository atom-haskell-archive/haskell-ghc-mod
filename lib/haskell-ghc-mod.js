"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(state) {
    process = new ghc_mod_1.GhcModiProcess();
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess()
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return;
    }
    tempDisposables && tempDisposables.dispose();
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF3QztBQUN4QywrQkFBd0M7QUFDeEMsNkRBQXNEO0FBQ3RELGlEQUEwQztBQUMxQyxpQ0FBMEM7QUFFMUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUVwRCxtQ0FBK0I7QUFBdkIsMEJBQUEsTUFBTSxDQUFBO0FBRWQsa0JBQTBCLEtBQVk7SUFDcEMsT0FBTyxHQUFHLElBQUksd0JBQWMsRUFBRSxDQUFBO0lBQzlCLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDdkMsZUFBZSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUMzQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhDLGVBQWUsQ0FBQyxHQUFHLENBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsMEJBQW1CLENBQUMsRUFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQWM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFBO0lBQzVELENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLGtDQUFrQyxFQUFFLE1BQU0sT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7S0FDM0UsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBbEJELDRCQWtCQztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ25CLGlCQUFpQixHQUFHLFNBQVMsQ0FBQTtJQUM3QixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7QUFDekIsQ0FBQztBQU5ELGdDQU1DO0FBRUQ7SUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQUMsaUJBQWlCLEdBQUcsSUFBSSxzQ0FBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUFDLENBQUM7SUFDL0UsTUFBTSxDQUFDLGlCQUFpQixDQUFBO0FBQzFCLENBQUM7QUFKRCw0REFJQztBQUVELG9CQUE0QixPQUE2QjtJQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3hDLGVBQWUsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUMsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyRCxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUE7QUFDcEIsQ0FBQztBQU5ELGdDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHaGNNb2RpUHJvY2Vzc30gZnJvbSAnLi9naGMtbW9kJ1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtDb21wbGV0aW9uQmFja2VuZH0gZnJvbSAnLi9jb21wbGV0aW9uLWJhY2tlbmQnXG5pbXBvcnQge1VQSUNvbnN1bWVyfSBmcm9tICcuL3VwaS1jb25zdW1lcidcbmltcG9ydCB7ZGVmYXVsdEVycm9ySGFuZGxlcn0gZnJvbSAnLi91dGlsJ1xuXG5sZXQgcHJvY2VzczogR2hjTW9kaVByb2Nlc3MgfCB1bmRlZmluZWRcbmxldCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHRlbXBEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IGNvbXBsZXRpb25CYWNrZW5kOiBDb21wbGV0aW9uQmFja2VuZCB8IHVuZGVmaW5lZFxuXG5leHBvcnQge2NvbmZpZ30gZnJvbSAnLi9jb25maWcnXG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZSAoc3RhdGU6IG5ldmVyKSB7XG4gIHByb2Nlc3MgPSBuZXcgR2hjTW9kaVByb2Nlc3MoKVxuICBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgdGVtcERpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBkaXNwb3NhYmxlcy5hZGQodGVtcERpc3Bvc2FibGVzKVxuXG4gIHRlbXBEaXNwb3NhYmxlcy5hZGQoXG4gICAgcHJvY2Vzcy5vbkVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIpLFxuICAgIHByb2Nlc3Mub25XYXJuaW5nKChkZXRhaWw6IHN0cmluZykgPT4ge1xuICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoJ2doYy1tb2Qgd2FybmluZycsIHtkZXRhaWx9KVxuICAgIH0pLFxuICApXG5cbiAgZGlzcG9zYWJsZXMuYWRkKFxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAgICdoYXNrZWxsLWdoYy1tb2Q6c2h1dGRvd24tYmFja2VuZCc6ICgpID0+IHByb2Nlc3MgJiYgcHJvY2Vzcy5raWxsUHJvY2VzcygpXG4gICAgfSlcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZSAoKSB7XG4gIHByb2Nlc3MgJiYgcHJvY2Vzcy5kZXN0cm95KClcbiAgcHJvY2VzcyA9IHVuZGVmaW5lZFxuICBjb21wbGV0aW9uQmFja2VuZCA9IHVuZGVmaW5lZFxuICBkaXNwb3NhYmxlcyAmJiBkaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgZGlzcG9zYWJsZXMgPSB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVDb21wbGV0aW9uQmFja2VuZCAoKSB7XG4gIGlmICghIHByb2Nlc3MpIHsgcmV0dXJuIH1cbiAgaWYgKCEgY29tcGxldGlvbkJhY2tlbmQpIHsgY29tcGxldGlvbkJhY2tlbmQgPSBuZXcgQ29tcGxldGlvbkJhY2tlbmQocHJvY2VzcykgfVxuICByZXR1cm4gY29tcGxldGlvbkJhY2tlbmRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVVUEkgKHNlcnZpY2U6IFVQSS5JVVBJUmVnaXN0cmF0aW9uKSB7XG4gIGlmICghcHJvY2VzcyB8fCAhZGlzcG9zYWJsZXMpIHsgcmV0dXJuIH1cbiAgdGVtcERpc3Bvc2FibGVzICYmIHRlbXBEaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgY29uc3QgdXBpQ29uc3VtZXIgPSBuZXcgVVBJQ29uc3VtZXIoc2VydmljZSwgcHJvY2VzcylcbiAgZGlzcG9zYWJsZXMuYWRkKHVwaUNvbnN1bWVyKVxuICByZXR1cm4gdXBpQ29uc3VtZXJcbn1cbiJdfQ==
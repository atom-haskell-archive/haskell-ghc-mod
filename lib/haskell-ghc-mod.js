"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_modi_process_1 = require("./ghc-mod/ghc-modi-process");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend/completion-backend");
const upi_consumer_1 = require("./upi-consumer");
let process;
let disposables;
let completionBackend;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(state) {
    process = new ghc_modi_process_1.GhcModiProcess();
    disposables = new atom_1.CompositeDisposable();
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess()
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return;
    }
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    const upiConsumerDisp = new atom_1.Disposable(() => upiConsumer.destroy());
    disposables.add(upiConsumerDisp);
    return upiConsumerDisp;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BLGlFQUF5RDtBQUN6RCwrQkFBb0Q7QUFDcEQsZ0ZBQXlFO0FBQ3pFLGlEQUEwQztBQUUxQyxJQUFJLE9BQW1DLENBQUE7QUFDdkMsSUFBSSxXQUE0QyxDQUFBO0FBQ2hELElBQUksaUJBQWdELENBQUE7QUFFcEQsbUNBQStCO0FBQXZCLDBCQUFBLE1BQU0sQ0FBQTtBQUVkLGtCQUEwQixLQUFZO0lBQ3BDLE9BQU8sR0FBRyxJQUFJLGlDQUFjLEVBQUUsQ0FBQTtJQUM5QixXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0lBRXZDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7UUFDbEQsa0NBQWtDLEVBQUUsTUFBTSxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtLQUMzRSxDQUFDLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFQRCw0QkFPQztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixPQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ25CLGlCQUFpQixHQUFHLFNBQVMsQ0FBQTtJQUM3QixXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLFdBQVcsR0FBRyxTQUFTLENBQUE7QUFDekIsQ0FBQztBQU5ELGdDQU1DO0FBRUQ7SUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQUMsaUJBQWlCLEdBQUcsSUFBSSxzQ0FBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUFDLENBQUM7SUFDL0UsTUFBTSxDQUFDLGlCQUFpQixDQUFBO0FBQzFCLENBQUM7QUFKRCw0REFJQztBQUVELG9CQUE0QixPQUE2QjtJQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUE7SUFBQyxDQUFDO0lBQ3hDLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDckQsTUFBTSxlQUFlLEdBQ25CLElBQUksaUJBQVUsQ0FBQyxNQUFNLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBQzdDLFdBQVcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDaEMsTUFBTSxDQUFDLGVBQWUsQ0FBQTtBQUN4QixDQUFDO0FBUEQsZ0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogZGVjYWZmZWluYXRlIHN1Z2dlc3Rpb25zOlxuICogRFMxMDI6IFJlbW92ZSB1bm5lY2Vzc2FyeSBjb2RlIGNyZWF0ZWQgYmVjYXVzZSBvZiBpbXBsaWNpdCByZXR1cm5zXG4gKiBEUzEwMzogUmV3cml0ZSBjb2RlIHRvIG5vIGxvbmdlciB1c2UgX19ndWFyZF9fXG4gKiBEUzIwNzogQ29uc2lkZXIgc2hvcnRlciB2YXJpYXRpb25zIG9mIG51bGwgY2hlY2tzXG4gKiBGdWxsIGRvY3M6IGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNhZmZlaW5hdGUvZGVjYWZmZWluYXRlL2Jsb2IvbWFzdGVyL2RvY3Mvc3VnZ2VzdGlvbnMubWRcbiAqL1xuaW1wb3J0IHtHaGNNb2RpUHJvY2Vzc30gZnJvbSAnLi9naGMtbW9kL2doYy1tb2RpLXByb2Nlc3MnXG5pbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGV9IGZyb20gJ2F0b20nXG5pbXBvcnQge0NvbXBsZXRpb25CYWNrZW5kfSBmcm9tICcuL2NvbXBsZXRpb24tYmFja2VuZC9jb21wbGV0aW9uLWJhY2tlbmQnXG5pbXBvcnQge1VQSUNvbnN1bWVyfSBmcm9tICcuL3VwaS1jb25zdW1lcidcblxubGV0IHByb2Nlc3M6IEdoY01vZGlQcm9jZXNzIHwgdW5kZWZpbmVkXG5sZXQgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgfCB1bmRlZmluZWRcbmxldCBjb21wbGV0aW9uQmFja2VuZDogQ29tcGxldGlvbkJhY2tlbmQgfCB1bmRlZmluZWRcblxuZXhwb3J0IHtjb25maWd9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUgKHN0YXRlOiBuZXZlcikge1xuICBwcm9jZXNzID0gbmV3IEdoY01vZGlQcm9jZXNzKClcbiAgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgZGlzcG9zYWJsZXMuYWRkKGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAnaGFza2VsbC1naGMtbW9kOnNodXRkb3duLWJhY2tlbmQnOiAoKSA9PiBwcm9jZXNzICYmIHByb2Nlc3Mua2lsbFByb2Nlc3MoKVxuICB9KSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUgKCkge1xuICBwcm9jZXNzICYmIHByb2Nlc3MuZGVzdHJveSgpXG4gIHByb2Nlc3MgPSB1bmRlZmluZWRcbiAgY29tcGxldGlvbkJhY2tlbmQgPSB1bmRlZmluZWRcbiAgZGlzcG9zYWJsZXMgJiYgZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIGRpc3Bvc2FibGVzID0gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQ29tcGxldGlvbkJhY2tlbmQgKCkge1xuICBpZiAoISBwcm9jZXNzKSB7IHJldHVybiB9XG4gIGlmICghIGNvbXBsZXRpb25CYWNrZW5kKSB7IGNvbXBsZXRpb25CYWNrZW5kID0gbmV3IENvbXBsZXRpb25CYWNrZW5kKHByb2Nlc3MpIH1cbiAgcmV0dXJuIGNvbXBsZXRpb25CYWNrZW5kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lVVBJIChzZXJ2aWNlOiBVUEkuSVVQSVJlZ2lzdHJhdGlvbikge1xuICBpZiAoIXByb2Nlc3MgfHwgIWRpc3Bvc2FibGVzKSB7IHJldHVybiB9XG4gIGNvbnN0IHVwaUNvbnN1bWVyID0gbmV3IFVQSUNvbnN1bWVyKHNlcnZpY2UsIHByb2Nlc3MpXG4gIGNvbnN0IHVwaUNvbnN1bWVyRGlzcCA9XG4gICAgbmV3IERpc3Bvc2FibGUoKCkgPT4gdXBpQ29uc3VtZXIuZGVzdHJveSgpKVxuICBkaXNwb3NhYmxlcy5hZGQodXBpQ29uc3VtZXJEaXNwKVxuICByZXR1cm4gdXBpQ29uc3VtZXJEaXNwXG59XG4iXX0=
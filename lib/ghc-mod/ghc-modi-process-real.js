"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const interactive_process_1 = require("./interactive-process");
const Util = require("../util");
const { debug, withTempFile, EOT } = Util;
const os_1 = require("os");
const _ = require("underscore");
class GhcModiProcessReal {
    constructor(caps, rootDir, options) {
        this.caps = caps;
        this.rootDir = rootDir;
        this.options = options;
        this.runModCmd = async ({ ghcModOptions, command, text, uri, args, }) => {
            const modPath = atom.config.get('haskell-ghc-mod.ghcModPath');
            let stdin;
            const cmd = [...ghcModOptions];
            if (text && uri) {
                cmd.push('--map-file', uri);
                stdin = `${text}${EOT}`;
            }
            cmd.push(command);
            if (uri) {
                cmd.push(uri);
            }
            cmd.push(...args);
            const { stdout, stderr } = await Util.execPromise(modPath, cmd, this.options, stdin);
            return {
                stdout: stdout.split(os_1.EOL).slice(0, -1),
                stderr: stderr.split(os_1.EOL),
            };
        };
        this.runModiCmd = async (o) => {
            const { ghcModOptions, command, text, args } = o;
            let { uri } = o;
            debug(`Trying to run ghc-modi in ${this.rootDir.getPath()}`);
            const proc = await this.spawnProcess(ghcModOptions);
            if (!proc) {
                debug('Failed. Falling back to ghc-mod');
                return this.runModCmd(o);
            }
            debug('Success. Resuming...');
            if (uri && !this.caps.quoteArgs) {
                uri = this.rootDir.relativize(uri);
            }
            try {
                if (uri && text) {
                    await proc.interact('map-file', [uri], text);
                }
                const res = await proc.interact(command, uri ? [uri].concat(args) : args);
                if (uri && text) {
                    await proc.interact('unmap-file', [uri]);
                }
                return res;
            }
            finally {
                if (uri && text) {
                    await proc.interact('unmap-file', [uri]);
                }
            }
        };
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
    }
    getCaps() {
        return this.caps;
    }
    async run(runArgs) {
        let { interactive, dashArgs, args, suppressErrors, ghcOptions, ghcModOptions, } = runArgs;
        const { command, text, uri, builder } = runArgs;
        if (!args) {
            args = [];
        }
        if (!dashArgs) {
            dashArgs = [];
        }
        if (!suppressErrors) {
            suppressErrors = false;
        }
        if (!ghcOptions) {
            ghcOptions = [];
        }
        if (!ghcModOptions) {
            ghcModOptions = [];
        }
        ghcModOptions = ghcModOptions.concat(...ghcOptions.map((opt) => ['--ghc-option', opt]));
        if (atom.config.get('haskell-ghc-mod.lowMemorySystem')) {
            interactive = atom.config.get('haskell-ghc-mod.enableGhcModi');
        }
        if (builder) {
            switch (builder) {
                case 'cabal':
                    ghcModOptions.push('--with-stack', '');
                    break;
                case 'stack':
                    ghcModOptions.push('--with-cabal', '');
                    break;
                case 'none':
                    ghcModOptions.push('--with-stack', '');
                    ghcModOptions.push('--with-cabal', '');
                    break;
                default:
                    atom.notifications.addWarning(`Haskell-ghc-mod: unknown builder ${builder}, falling back to autodetection`);
            }
        }
        if (this.caps.optparse) {
            args = dashArgs.concat(['--']).concat(args);
        }
        else {
            args = dashArgs.concat(args);
        }
        const fun = interactive ? this.runModiCmd : this.runModCmd;
        try {
            let res;
            if (uri && text && !this.caps.fileMap) {
                const myOpts = { ghcModOptions, command, args };
                res = withTempFile(text, uri, async (tempuri) => {
                    const { stdout, stderr } = await fun(Object.assign({}, myOpts, { uri: tempuri }));
                    return {
                        stdout: stdout.map((line) => line.split(tempuri).join(uri)),
                        stderr: stderr.map((line) => line.split(tempuri).join(uri)),
                    };
                });
            }
            else {
                res = fun({ ghcModOptions, command, text, uri, args });
            }
            const { stdout, stderr } = await res;
            if (stderr.join('').length) {
                this.emitter.emit('warning', stderr.join('\n'));
            }
            return stdout.map((line) => line.replace(/\0/g, '\n'));
        }
        catch (err) {
            debug(err);
            this.emitter.emit('error', { runArgs, err, caps: this.caps });
            return [];
        }
    }
    killProcess() {
        debug(`Killing ghc-modi process for ${this.rootDir.getPath()}`);
        this.proc && this.proc.kill();
    }
    destroy() {
        debug('GhcModiProcessBase destroying');
        this.killProcess();
        this.emitter.emit('did-destroy');
        this.disposables.dispose();
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    onWarning(callback) {
        return this.emitter.on('warning', callback);
    }
    onError(callback) {
        return this.emitter.on('error', callback);
    }
    async spawnProcess(ghcModOptions) {
        if (!atom.config.get('haskell-ghc-mod.enableGhcModi')) {
            return undefined;
        }
        debug(`Checking for ghc-modi in ${this.rootDir.getPath()}`);
        if (this.proc) {
            if (!_.isEqual(this.ghcModOptions, ghcModOptions)) {
                debug(`Found running ghc-modi instance for ${this.rootDir.getPath()}, but ghcModOptions don't match. Old: `, this.ghcModOptions, ' new: ', ghcModOptions);
                await this.proc.kill();
                return this.spawnProcess(ghcModOptions);
            }
            debug(`Found running ghc-modi instance for ${this.rootDir.getPath()}`);
            return this.proc;
        }
        debug(`Spawning new ghc-modi instance for ${this.rootDir.getPath()} with`, this.options);
        const modPath = atom.config.get('haskell-ghc-mod.ghcModPath');
        this.ghcModOptions = ghcModOptions;
        this.proc = new interactive_process_1.InteractiveProcess(modPath, ghcModOptions.concat(['legacy-interactive']), this.options, this.caps);
        this.proc.onceExit((code) => {
            debug(`ghc-modi for ${this.rootDir.getPath()} ended with ${code}`);
            this.proc = undefined;
        });
        return this.proc;
    }
}
exports.GhcModiProcessReal = GhcModiProcessReal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hjLW1vZGktcHJvY2Vzcy1yZWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2doYy1tb2QvZ2hjLW1vZGktcHJvY2Vzcy1yZWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThEO0FBQzlELCtEQUFzRTtBQUN0RSxnQ0FBK0I7QUFDL0IsTUFBTSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFBO0FBQ3pDLDJCQUF3QjtBQUN4QixnQ0FBK0I7QUE4Qi9CO0lBY0UsWUFDVSxJQUFnQixFQUNoQixPQUFrQixFQUNsQixPQUFtQjtRQUZuQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFlBQU8sR0FBUCxPQUFPLENBQVc7UUFDbEIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQWdLckIsY0FBUyxHQUFHLEtBQUssRUFBRSxFQUN6QixhQUFhLEVBQ2IsT0FBTyxFQUNQLElBQUksRUFDSixHQUFHLEVBQ0gsSUFBSSxHQU9MLEVBQUUsRUFBRTtZQUNILE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUE7WUFDN0QsSUFBSSxLQUFLLENBQUE7WUFDVCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUE7WUFDOUIsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUMzQixLQUFLLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUE7WUFDekIsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDakIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDUixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxD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Q0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtRQUM3RCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQTtRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksd0NBQWtCLENBQ2hDLE9BQU8sRUFDUCxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUM1QyxJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxJQUFJLENBQ1YsQ0FBQTtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDMUIsS0FBSyxDQUFDLGdCQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxlQUFlLElBQUksRUFBRSxDQUFDLENBQUE7WUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUE7UUFDdkIsQ0FBQyxDQUFDLENBQUE7UUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQTtJQUNsQixDQUFDO0NBeUVGO0FBeFBELGdEQXdQQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdG9yeSwgRW1pdHRlciwgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBJbnRlcmFjdGl2ZVByb2Nlc3MsIEdIQ01vZENhcHMgfSBmcm9tICcuL2ludGVyYWN0aXZlLXByb2Nlc3MnXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnXG5jb25zdCB7IGRlYnVnLCB3aXRoVGVtcEZpbGUsIEVPVCB9ID0gVXRpbFxuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnXG5cbmV4cG9ydCB7IEdIQ01vZENhcHMgfVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bkFyZ3Mge1xuICBpbnRlcmFjdGl2ZT86IGJvb2xlYW5cbiAgY29tbWFuZDogc3RyaW5nXG4gIHRleHQ/OiBzdHJpbmdcbiAgdXJpPzogc3RyaW5nXG4gIGRhc2hBcmdzPzogc3RyaW5nW11cbiAgYXJncz86IHN0cmluZ1tdXG4gIHN1cHByZXNzRXJyb3JzPzogYm9vbGVhblxuICBnaGNPcHRpb25zPzogc3RyaW5nW11cbiAgZ2hjTW9kT3B0aW9ucz86IHN0cmluZ1tdXG4gIGJ1aWxkZXI6IHN0cmluZyB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bk9wdGlvbnMge1xuICBjd2Q6IHN0cmluZ1xuICBlbmNvZGluZzogJ3V0ZjgnXG4gIGVudjogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfVxuICBtYXhCdWZmZXI6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFcnJvckNhbGxiYWNrQXJncyB7XG4gIHJ1bkFyZ3M/OiBSdW5BcmdzXG4gIGVycjogRXJyb3JcbiAgY2FwczogR0hDTW9kQ2Fwc1xufVxuXG5leHBvcnQgY2xhc3MgR2hjTW9kaVByb2Nlc3NSZWFsIHtcbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXI8XG4gICAge1xuICAgICAgJ2RpZC1kZXN0cm95Jzogdm9pZFxuICAgIH0sXG4gICAge1xuICAgICAgd2FybmluZzogc3RyaW5nXG4gICAgICBlcnJvcjogSUVycm9yQ2FsbGJhY2tBcmdzXG4gICAgfVxuICA+XG4gIHByaXZhdGUgZ2hjTW9kT3B0aW9uczogc3RyaW5nW10gfCB1bmRlZmluZWRcbiAgcHJpdmF0ZSBwcm9jOiBJbnRlcmFjdGl2ZVByb2Nlc3MgfCB1bmRlZmluZWRcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNhcHM6IEdIQ01vZENhcHMsXG4gICAgcHJpdmF0ZSByb290RGlyOiBEaXJlY3RvcnksXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBSdW5PcHRpb25zLFxuICApIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZCh0aGlzLmVtaXR0ZXIpXG4gIH1cblxuICBwdWJsaWMgZ2V0Q2FwcygpOiBHSENNb2RDYXBzIHtcbiAgICByZXR1cm4gdGhpcy5jYXBzXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcnVuKHJ1bkFyZ3M6IFJ1bkFyZ3MpIHtcbiAgICBsZXQge1xuICAgICAgaW50ZXJhY3RpdmUsXG4gICAgICBkYXNoQXJncyxcbiAgICAgIGFyZ3MsXG4gICAgICBzdXBwcmVzc0Vycm9ycyxcbiAgICAgIGdoY09wdGlvbnMsXG4gICAgICBnaGNNb2RPcHRpb25zLFxuICAgIH0gPSBydW5BcmdzXG4gICAgY29uc3QgeyBjb21tYW5kLCB0ZXh0LCB1cmksIGJ1aWxkZXIgfSA9IHJ1bkFyZ3NcbiAgICBpZiAoIWFyZ3MpIHtcbiAgICAgIGFyZ3MgPSBbXVxuICAgIH1cbiAgICBpZiAoIWRhc2hBcmdzKSB7XG4gICAgICBkYXNoQXJncyA9IFtdXG4gICAgfVxuICAgIGlmICghc3VwcHJlc3NFcnJvcnMpIHtcbiAgICAgIHN1cHByZXNzRXJyb3JzID0gZmFsc2VcbiAgICB9XG4gICAgaWYgKCFnaGNPcHRpb25zKSB7XG4gICAgICBnaGNPcHRpb25zID0gW11cbiAgICB9XG4gICAgaWYgKCFnaGNNb2RPcHRpb25zKSB7XG4gICAgICBnaGNNb2RPcHRpb25zID0gW11cbiAgICB9XG4gICAgZ2hjTW9kT3B0aW9ucyA9IGdoY01vZE9wdGlvbnMuY29uY2F0KFxuICAgICAgLi4uZ2hjT3B0aW9ucy5tYXAoKG9wdCkgPT4gWyctLWdoYy1vcHRpb24nLCBvcHRdKSxcbiAgICApXG4gICAgaWYgKGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmxvd01lbW9yeVN5c3RlbScpKSB7XG4gICAgICBpbnRlcmFjdGl2ZSA9IGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmVuYWJsZUdoY01vZGknKVxuICAgIH1cbiAgICBpZiAoYnVpbGRlcikge1xuICAgICAgc3dpdGNoIChidWlsZGVyKSB7XG4gICAgICAgIGNhc2UgJ2NhYmFsJzpcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoaXMgbG9va3Mgd3JvbmcsIHJlbWVtYmVyLCB3ZSB3YW50IHRvIGRpc2FibGUgc3RhY2tcbiAgICAgICAgICAvLyBhbmQgdXNlIGNhYmFsLCBzbyB3ZSdyZSBzZXR0aW5nIHN0YWNrIHBhdGggdG8gZW1wdHlzdHJpbmdcbiAgICAgICAgICBnaGNNb2RPcHRpb25zLnB1c2goJy0td2l0aC1zdGFjaycsICcnKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3N0YWNrJzpcbiAgICAgICAgICAvLyBzYW1lLCBpZiB0aGlzIGxvb2tzIHN0cmFuZ2UsIGl0J3Mgbm90XG4gICAgICAgICAgZ2hjTW9kT3B0aW9ucy5wdXNoKCctLXdpdGgtY2FiYWwnLCAnJylcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAvLyBoZXJlIHdlIHdhbnQgdG8gdXNlIG5laXRoZXI/XG4gICAgICAgICAgZ2hjTW9kT3B0aW9ucy5wdXNoKCctLXdpdGgtc3RhY2snLCAnJylcbiAgICAgICAgICBnaGNNb2RPcHRpb25zLnB1c2goJy0td2l0aC1jYWJhbCcsICcnKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoXG4gICAgICAgICAgICBgSGFza2VsbC1naGMtbW9kOiB1bmtub3duIGJ1aWxkZXIgJHtidWlsZGVyfSwgZmFsbGluZyBiYWNrIHRvIGF1dG9kZXRlY3Rpb25gLFxuICAgICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuY2Fwcy5vcHRwYXJzZSkge1xuICAgICAgYXJncyA9IGRhc2hBcmdzLmNvbmNhdChbJy0tJ10pLmNvbmNhdChhcmdzKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcmdzID0gZGFzaEFyZ3MuY29uY2F0KGFyZ3MpXG4gICAgfVxuICAgIGNvbnN0IGZ1biA9IGludGVyYWN0aXZlID8gdGhpcy5ydW5Nb2RpQ21kIDogdGhpcy5ydW5Nb2RDbWRcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc1xuICAgICAgaWYgKHVyaSAmJiB0ZXh0ICYmICF0aGlzLmNhcHMuZmlsZU1hcCkge1xuICAgICAgICBjb25zdCBteU9wdHMgPSB7IGdoY01vZE9wdGlvbnMsIGNvbW1hbmQsIGFyZ3MgfVxuICAgICAgICByZXMgPSB3aXRoVGVtcEZpbGUodGV4dCwgdXJpLCBhc3luYyAodGVtcHVyaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgc3Rkb3V0LCBzdGRlcnIgfSA9IGF3YWl0IGZ1bih7IC4uLm15T3B0cywgdXJpOiB0ZW1wdXJpIH0pXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0ZG91dDogc3Rkb3V0Lm1hcCgobGluZSkgPT4gbGluZS5zcGxpdCh0ZW1wdXJpKS5qb2luKHVyaSkpLFxuICAgICAgICAgICAgc3RkZXJyOiBzdGRlcnIubWFwKChsaW5lKSA9PiBsaW5lLnNwbGl0KHRlbXB1cmkpLmpvaW4odXJpKSksXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzID0gZnVuKHsgZ2hjTW9kT3B0aW9ucywgY29tbWFuZCwgdGV4dCwgdXJpLCBhcmdzIH0pXG4gICAgICB9XG4gICAgICBjb25zdCB7IHN0ZG91dCwgc3RkZXJyIH0gPSBhd2FpdCByZXNcbiAgICAgIGlmIChzdGRlcnIuam9pbignJykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCd3YXJuaW5nJywgc3RkZXJyLmpvaW4oJ1xcbicpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0ZG91dC5tYXAoKGxpbmUpID0+IGxpbmUucmVwbGFjZSgvXFwwL2csICdcXG4nKSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGRlYnVnKGVycilcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlcnJvcicsIHsgcnVuQXJncywgZXJyLCBjYXBzOiB0aGlzLmNhcHMgfSlcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBraWxsUHJvY2VzcygpIHtcbiAgICBkZWJ1ZyhgS2lsbGluZyBnaGMtbW9kaSBwcm9jZXNzIGZvciAke3RoaXMucm9vdERpci5nZXRQYXRoKCl9YClcbiAgICB0aGlzLnByb2MgJiYgdGhpcy5wcm9jLmtpbGwoKVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgZGVidWcoJ0doY01vZGlQcm9jZXNzQmFzZSBkZXN0cm95aW5nJylcbiAgICB0aGlzLmtpbGxQcm9jZXNzKClcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWRlc3Ryb3knKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIH1cblxuICBwdWJsaWMgb25EaWREZXN0cm95KGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLWRlc3Ryb3knLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBvbldhcm5pbmcoY2FsbGJhY2s6ICh3YXJuaW5nOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCd3YXJuaW5nJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgb25FcnJvcihjYWxsYmFjazogKGVycm9yOiBJRXJyb3JDYWxsYmFja0FyZ3MpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdlcnJvcicsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzcGF3blByb2Nlc3MoXG4gICAgZ2hjTW9kT3B0aW9uczogc3RyaW5nW10sXG4gICk6IFByb21pc2U8SW50ZXJhY3RpdmVQcm9jZXNzIHwgdW5kZWZpbmVkPiB7XG4gICAgaWYgKCFhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZ2hjLW1vZC5lbmFibGVHaGNNb2RpJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgZGVidWcoYENoZWNraW5nIGZvciBnaGMtbW9kaSBpbiAke3RoaXMucm9vdERpci5nZXRQYXRoKCl9YClcbiAgICBpZiAodGhpcy5wcm9jKSB7XG4gICAgICBpZiAoIV8uaXNFcXVhbCh0aGlzLmdoY01vZE9wdGlvbnMsIGdoY01vZE9wdGlvbnMpKSB7XG4gICAgICAgIGRlYnVnKFxuICAgICAgICAgIGBGb3VuZCBydW5uaW5nIGdoYy1tb2RpIGluc3RhbmNlIGZvciAke3RoaXMucm9vdERpci5nZXRQYXRoKCl9LCBidXQgZ2hjTW9kT3B0aW9ucyBkb24ndCBtYXRjaC4gT2xkOiBgLFxuICAgICAgICAgIHRoaXMuZ2hjTW9kT3B0aW9ucyxcbiAgICAgICAgICAnIG5ldzogJyxcbiAgICAgICAgICBnaGNNb2RPcHRpb25zLFxuICAgICAgICApXG4gICAgICAgIGF3YWl0IHRoaXMucHJvYy5raWxsKClcbiAgICAgICAgcmV0dXJuIHRoaXMuc3Bhd25Qcm9jZXNzKGdoY01vZE9wdGlvbnMpXG4gICAgICB9XG4gICAgICBkZWJ1ZyhgRm91bmQgcnVubmluZyBnaGMtbW9kaSBpbnN0YW5jZSBmb3IgJHt0aGlzLnJvb3REaXIuZ2V0UGF0aCgpfWApXG4gICAgICByZXR1cm4gdGhpcy5wcm9jXG4gICAgfVxuICAgIGRlYnVnKFxuICAgICAgYFNwYXduaW5nIG5ldyBnaGMtbW9kaSBpbnN0YW5jZSBmb3IgJHt0aGlzLnJvb3REaXIuZ2V0UGF0aCgpfSB3aXRoYCxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICApXG4gICAgY29uc3QgbW9kUGF0aCA9IGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmdoY01vZFBhdGgnKVxuICAgIHRoaXMuZ2hjTW9kT3B0aW9ucyA9IGdoY01vZE9wdGlvbnNcbiAgICB0aGlzLnByb2MgPSBuZXcgSW50ZXJhY3RpdmVQcm9jZXNzKFxuICAgICAgbW9kUGF0aCxcbiAgICAgIGdoY01vZE9wdGlvbnMuY29uY2F0KFsnbGVnYWN5LWludGVyYWN0aXZlJ10pLFxuICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgdGhpcy5jYXBzLFxuICAgIClcbiAgICB0aGlzLnByb2Mub25jZUV4aXQoKGNvZGUpID0+IHtcbiAgICAgIGRlYnVnKGBnaGMtbW9kaSBmb3IgJHt0aGlzLnJvb3REaXIuZ2V0UGF0aCgpfSBlbmRlZCB3aXRoICR7Y29kZX1gKVxuICAgICAgdGhpcy5wcm9jID0gdW5kZWZpbmVkXG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5wcm9jXG4gIH1cblxuICBwcml2YXRlIHJ1bk1vZENtZCA9IGFzeW5jICh7XG4gICAgZ2hjTW9kT3B0aW9ucyxcbiAgICBjb21tYW5kLFxuICAgIHRleHQsXG4gICAgdXJpLFxuICAgIGFyZ3MsXG4gIH06IHtcbiAgICBnaGNNb2RPcHRpb25zOiBzdHJpbmdbXVxuICAgIGNvbW1hbmQ6IHN0cmluZ1xuICAgIHRleHQ/OiBzdHJpbmdcbiAgICB1cmk/OiBzdHJpbmdcbiAgICBhcmdzOiBzdHJpbmdbXVxuICB9KSA9PiB7XG4gICAgY29uc3QgbW9kUGF0aCA9IGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1naGMtbW9kLmdoY01vZFBhdGgnKVxuICAgIGxldCBzdGRpblxuICAgIGNvbnN0IGNtZCA9IFsuLi5naGNNb2RPcHRpb25zXVxuICAgIGlmICh0ZXh0ICYmIHVyaSkge1xuICAgICAgY21kLnB1c2goJy0tbWFwLWZpbGUnLCB1cmkpXG4gICAgICBzdGRpbiA9IGAke3RleHR9JHtFT1R9YFxuICAgIH1cbiAgICBjbWQucHVzaChjb21tYW5kKVxuICAgIGlmICh1cmkpIHtcbiAgICAgIGNtZC5wdXNoKHVyaSlcbiAgICB9XG4gICAgY21kLnB1c2goLi4uYXJncylcbiAgICBjb25zdCB7IHN0ZG91dCwgc3RkZXJyIH0gPSBhd2FpdCBVdGlsLmV4ZWNQcm9taXNlKFxuICAgICAgbW9kUGF0aCxcbiAgICAgIGNtZCxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIHN0ZGluLFxuICAgIClcbiAgICByZXR1cm4ge1xuICAgICAgc3Rkb3V0OiBzdGRvdXQuc3BsaXQoRU9MKS5zbGljZSgwLCAtMSksXG4gICAgICBzdGRlcnI6IHN0ZGVyci5zcGxpdChFT0wpLFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcnVuTW9kaUNtZCA9IGFzeW5jIChvOiB7XG4gICAgZ2hjTW9kT3B0aW9uczogc3RyaW5nW11cbiAgICBjb21tYW5kOiBzdHJpbmdcbiAgICB0ZXh0Pzogc3RyaW5nXG4gICAgdXJpPzogc3RyaW5nXG4gICAgYXJnczogc3RyaW5nW11cbiAgfSkgPT4ge1xuICAgIGNvbnN0IHsgZ2hjTW9kT3B0aW9ucywgY29tbWFuZCwgdGV4dCwgYXJncyB9ID0gb1xuICAgIGxldCB7IHVyaSB9ID0gb1xuICAgIGRlYnVnKGBUcnlpbmcgdG8gcnVuIGdoYy1tb2RpIGluICR7dGhpcy5yb290RGlyLmdldFBhdGgoKX1gKVxuICAgIGNvbnN0IHByb2MgPSBhd2FpdCB0aGlzLnNwYXduUHJvY2VzcyhnaGNNb2RPcHRpb25zKVxuICAgIGlmICghcHJvYykge1xuICAgICAgZGVidWcoJ0ZhaWxlZC4gRmFsbGluZyBiYWNrIHRvIGdoYy1tb2QnKVxuICAgICAgcmV0dXJuIHRoaXMucnVuTW9kQ21kKG8pXG4gICAgfVxuICAgIGRlYnVnKCdTdWNjZXNzLiBSZXN1bWluZy4uLicpXG4gICAgaWYgKHVyaSAmJiAhdGhpcy5jYXBzLnF1b3RlQXJncykge1xuICAgICAgdXJpID0gdGhpcy5yb290RGlyLnJlbGF0aXZpemUodXJpKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaWYgKHVyaSAmJiB0ZXh0KSB7XG4gICAgICAgIGF3YWl0IHByb2MuaW50ZXJhY3QoJ21hcC1maWxlJywgW3VyaV0sIHRleHQpXG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBwcm9jLmludGVyYWN0KGNvbW1hbmQsIHVyaSA/IFt1cmldLmNvbmNhdChhcmdzKSA6IGFyZ3MpXG4gICAgICBpZiAodXJpICYmIHRleHQpIHtcbiAgICAgICAgYXdhaXQgcHJvYy5pbnRlcmFjdCgndW5tYXAtZmlsZScsIFt1cmldKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAodXJpICYmIHRleHQpIHtcbiAgICAgICAgYXdhaXQgcHJvYy5pbnRlcmFjdCgndW5tYXAtZmlsZScsIFt1cmldKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19
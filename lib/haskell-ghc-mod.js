"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghc_mod_1 = require("./ghc-mod");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
let resolveUpiPromise;
let upiPromise;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) {
    upiPromise = new Promise((resolve) => (resolveUpiPromise = resolve));
    process = new ghc_mod_1.GhcModiProcess(upiPromise);
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('ghc-mod warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'haskell-ghc-mod:shutdown-backend': () => process && process.killProcess(),
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
    tempDisposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return undefined;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process, upiPromise);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return undefined;
    }
    tempDisposables && tempDisposables.dispose();
    tempDisposables = undefined;
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    resolveUpiPromise(upiConsumer.upi);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFza2VsbC1naGMtbW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhc2tlbGwtZ2hjLW1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUEwQztBQUMxQywrQkFBMEM7QUFDMUMsNkRBQXdEO0FBQ3hELGlEQUE0QztBQUM1QyxpQ0FBNEM7QUFHNUMsSUFBSSxPQUFtQyxDQUFBO0FBQ3ZDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUNwRCxJQUFJLGlCQUFnRCxDQUFBO0FBQ3BELElBQUksVUFBcUMsQ0FBQTtBQUV6QyxtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYsU0FBZ0IsUUFBUSxDQUFDLE1BQWE7SUFDcEMsVUFBVSxHQUFHLElBQUksT0FBTyxDQUN0QixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsQ0FDM0MsQ0FBQTtJQUNELE9BQU8sR0FBRyxJQUFJLHdCQUFjLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDeEMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUN2QyxlQUFlLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0lBQzNDLFdBQVcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFaEMsZUFBZSxDQUFDLEdBQUcsQ0FDakIsT0FBTyxDQUFDLE9BQU8sQ0FBQywwQkFBbUIsQ0FBQyxFQUNwQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUU7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzlELENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRSxDQUN2QyxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtLQUNuQyxDQUFDLENBQ0gsQ0FBQTtBQUNILENBQUM7QUF0QkQsNEJBc0JDO0FBRUQsU0FBZ0IsVUFBVTtJQUN4QixPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLE9BQU8sR0FBRyxTQUFTLENBQUE7SUFDbkIsaUJBQWlCLEdBQUcsU0FBUyxDQUFBO0lBQzdCLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDcEMsV0FBVyxHQUFHLFNBQVMsQ0FBQTtJQUN2QixlQUFlLEdBQUcsU0FBUyxDQUFBO0FBQzdCLENBQUM7QUFQRCxnQ0FPQztBQUVELFNBQWdCLHdCQUF3QjtJQUN0QyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxTQUFTLENBQUE7S0FDakI7SUFDRCxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFDdEIsaUJBQWlCLEdBQUcsSUFBSSxzQ0FBaUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUE7S0FDL0Q7SUFDRCxPQUFPLGlCQUFpQixDQUFBO0FBQzFCLENBQUM7QUFSRCw0REFRQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxPQUE2QjtJQUN0RCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQzVCLE9BQU8sU0FBUyxDQUFBO0tBQ2pCO0lBQ0QsZUFBZSxJQUFJLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QyxlQUFlLEdBQUcsU0FBUyxDQUFBO0lBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDckQsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2xDLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDNUIsT0FBTyxXQUFXLENBQUE7QUFDcEIsQ0FBQztBQVZELGdDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2hjTW9kaVByb2Nlc3MgfSBmcm9tICcuL2doYy1tb2QnXG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IENvbXBsZXRpb25CYWNrZW5kIH0gZnJvbSAnLi9jb21wbGV0aW9uLWJhY2tlbmQnXG5pbXBvcnQgeyBVUElDb25zdW1lciB9IGZyb20gJy4vdXBpLWNvbnN1bWVyJ1xuaW1wb3J0IHsgZGVmYXVsdEVycm9ySGFuZGxlciB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuXG5sZXQgcHJvY2VzczogR2hjTW9kaVByb2Nlc3MgfCB1bmRlZmluZWRcbmxldCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHRlbXBEaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IGNvbXBsZXRpb25CYWNrZW5kOiBDb21wbGV0aW9uQmFja2VuZCB8IHVuZGVmaW5lZFxubGV0IHJlc29sdmVVcGlQcm9taXNlOiAodjogVVBJLklVUElJbnN0YW5jZSkgPT4gdm9pZFxubGV0IHVwaVByb21pc2U6IFByb21pc2U8VVBJLklVUElJbnN0YW5jZT5cblxuZXhwb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZShfc3RhdGU6IG5ldmVyKSB7XG4gIHVwaVByb21pc2UgPSBuZXcgUHJvbWlzZTxVUEkuSVVQSUluc3RhbmNlPihcbiAgICAocmVzb2x2ZSkgPT4gKHJlc29sdmVVcGlQcm9taXNlID0gcmVzb2x2ZSksXG4gIClcbiAgcHJvY2VzcyA9IG5ldyBHaGNNb2RpUHJvY2Vzcyh1cGlQcm9taXNlKVxuICBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgdGVtcERpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBkaXNwb3NhYmxlcy5hZGQodGVtcERpc3Bvc2FibGVzKVxuXG4gIHRlbXBEaXNwb3NhYmxlcy5hZGQoXG4gICAgcHJvY2Vzcy5vbkVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIpLFxuICAgIHByb2Nlc3Mub25XYXJuaW5nKChkZXRhaWw6IHN0cmluZykgPT4ge1xuICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoJ2doYy1tb2Qgd2FybmluZycsIHsgZGV0YWlsIH0pXG4gICAgfSksXG4gIClcblxuICBkaXNwb3NhYmxlcy5hZGQoXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgJ2hhc2tlbGwtZ2hjLW1vZDpzaHV0ZG93bi1iYWNrZW5kJzogKCkgPT5cbiAgICAgICAgcHJvY2VzcyAmJiBwcm9jZXNzLmtpbGxQcm9jZXNzKCksXG4gICAgfSksXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIHByb2Nlc3MgJiYgcHJvY2Vzcy5kZXN0cm95KClcbiAgcHJvY2VzcyA9IHVuZGVmaW5lZFxuICBjb21wbGV0aW9uQmFja2VuZCA9IHVuZGVmaW5lZFxuICBkaXNwb3NhYmxlcyAmJiBkaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgZGlzcG9zYWJsZXMgPSB1bmRlZmluZWRcbiAgdGVtcERpc3Bvc2FibGVzID0gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQ29tcGxldGlvbkJhY2tlbmQoKSB7XG4gIGlmICghcHJvY2Vzcykge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICBpZiAoIWNvbXBsZXRpb25CYWNrZW5kKSB7XG4gICAgY29tcGxldGlvbkJhY2tlbmQgPSBuZXcgQ29tcGxldGlvbkJhY2tlbmQocHJvY2VzcywgdXBpUHJvbWlzZSlcbiAgfVxuICByZXR1cm4gY29tcGxldGlvbkJhY2tlbmRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVVUEkoc2VydmljZTogVVBJLklVUElSZWdpc3RyYXRpb24pIHtcbiAgaWYgKCFwcm9jZXNzIHx8ICFkaXNwb3NhYmxlcykge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB0ZW1wRGlzcG9zYWJsZXMgJiYgdGVtcERpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB0ZW1wRGlzcG9zYWJsZXMgPSB1bmRlZmluZWRcbiAgY29uc3QgdXBpQ29uc3VtZXIgPSBuZXcgVVBJQ29uc3VtZXIoc2VydmljZSwgcHJvY2VzcylcbiAgcmVzb2x2ZVVwaVByb21pc2UodXBpQ29uc3VtZXIudXBpKVxuICBkaXNwb3NhYmxlcy5hZGQodXBpQ29uc3VtZXIpXG4gIHJldHVybiB1cGlDb25zdW1lclxufVxuIl19